<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>centOS7 安装 redis6.0.6</title>
      <link href="/myblog/centOS7-%E5%AE%89%E8%A3%85-redis6-0-6/"/>
      <url>/myblog/centOS7-%E5%AE%89%E8%A3%85-redis6-0-6/</url>
      
        <content type="html"><![CDATA[<h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>linux 上执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@iZx068ismxxjaoZ src]#  wget http://download.redis.io/releases/redis-6.0.6.tar.gz</span><br><span class="line">--2020-12-17 12:58:12--  http://download.redis.io/releases/redis-6.0.6.tar.gz</span><br><span class="line">Resolving download.redis.io (download.redis.io)... 45.60.125.1</span><br><span class="line">Connecting to download.redis.io (download.redis.io)|45.60.125.1|:80... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 2228781 (2.1M) [application/octet-stream]</span><br><span class="line">Saving to: ‘redis-6.0.6.tar.gz’</span><br><span class="line"></span><br><span class="line"><span class="meta">100%</span><span class="bash">[========================================================================================================================&gt;] 2,228,781   24.6KB/s   <span class="keyword">in</span> 69s    </span></span><br><span class="line"></span><br><span class="line">2020-12-17 12:59:25 (31.6 KB/s) - ‘redis-6.0.6.tar.gz’ saved [2228781/2228781]</span><br></pre></td></tr></table></figure><h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@iZx068ismxxjaoZ src]# tar -xzf redis-6.0.6.tar.gz</span><br></pre></td></tr></table></figure><h4 id="编译（源码）"><a href="#编译（源码）" class="headerlink" title="编译（源码）"></a>编译（源码）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@iZx068ismxxjaoZ src]# cd redis-6.0.6</span><br><span class="line">[root@iZx068ismxxjaoZ redis-6.0.6]# make</span><br></pre></td></tr></table></figure><p>报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">^</span><br><span class="line">server.c:5212:31: error: ‘struct redisServer’ has no member named ‘server_cpulist’</span><br><span class="line">     redisSetCpuAffinity(server.server_cpulist);</span><br><span class="line">                               ^</span><br><span class="line">server.c: In <span class="keyword">function</span> ‘hasActiveChildProcess’:</span><br><span class="line">server.c:1480:1: warning: control reaches end of non-void <span class="keyword">function</span> [-Wreturn-type]</span><br><span class="line"> &#125;</span><br><span class="line"> ^</span><br><span class="line">server.c: In <span class="keyword">function</span> ‘allPersistenceDisabled’:</span><br><span class="line">server.c:1486:1: warning: control reaches end of non-void <span class="keyword">function</span> [-Wreturn-type]</span><br><span class="line"> &#125;</span><br><span class="line"> ^</span><br><span class="line">server.c: In <span class="keyword">function</span> ‘writeCommandsDeniedByDiskError’:</span><br><span class="line">server.c:3826:1: warning: control reaches end of non-void <span class="keyword">function</span> [-Wreturn-type]</span><br><span class="line"> &#125;</span><br><span class="line"> ^</span><br><span class="line">server.c: In <span class="keyword">function</span> ‘iAmMaster’:</span><br><span class="line">server.c:5000:1: warning: control reaches end of non-void <span class="keyword">function</span> [-Wreturn-type]</span><br><span class="line"> &#125;</span><br><span class="line"> ^</span><br><span class="line">make[1]: *** [server.o] Error 1</span><br><span class="line">make[1]: Leaving directory `/usr/<span class="built_in">local</span>/src/redis-6.0.6/src<span class="string">'</span></span><br><span class="line"><span class="string">make: *** [all] Error 2</span></span><br></pre></td></tr></table></figure><a id="more"></a><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20201217140530481.png" alt="image-20201217140530481"></p><p>依次执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install centos-release-scl</span><br><span class="line">yum install devtoolset-7-gcc*</span><br><span class="line">scl enable devtoolset-7 bash</span><br><span class="line"><span class="meta">#</span><span class="bash"> 过程中提示 y/n  按 y</span></span><br></pre></td></tr></table></figure><p>再次执行编译：make 。成功了！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">CC setcpuaffinity.o</span><br><span class="line">    LINK redis-server</span><br><span class="line">    INSTALL redis-sentinel</span><br><span class="line">    CC redis-cli.o</span><br><span class="line">    LINK redis-cli</span><br><span class="line">    CC redis-benchmark.o</span><br><span class="line">    LINK redis-benchmark</span><br><span class="line">    INSTALL redis-check-rdb</span><br><span class="line">    INSTALL redis-check-aof</span><br><span class="line"></span><br><span class="line">Hint: It's a good idea to run 'make test' ;)</span><br><span class="line"></span><br><span class="line">make[1]: Leaving directory `/usr/local/src/redis-6.0.6/src'</span><br><span class="line">[root@iZx068ismxxjaoZ redis-6.0.6]#</span><br></pre></td></tr></table></figure><h4 id="安装到指定目录"><a href="#安装到指定目录" class="headerlink" title="安装到指定目录"></a>安装到指定目录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 执行</span></span><br><span class="line">make install PREFIX=/usr/local/redis</span><br></pre></td></tr></table></figure><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><h5 id="前台启动"><a href="#前台启动" class="headerlink" title="前台启动"></a>前台启动</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[root@iZx068ismxxjaoZ bin]# cd /usr/local/redis/bin/</span><br><span class="line">[root@iZx068ismxxjaoZ bin]# ./redis-server </span><br><span class="line">31845:C 17 Dec 2020 14:18:30.709 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br><span class="line">31845:C 17 Dec 2020 14:18:30.709 # Redis version=6.0.6, bits=64, commit=00000000, modified=0, pid=31845, just started</span><br><span class="line">31845:C 17 Dec 2020 14:18:30.709 # Warning: no config file specified, using the default config. In order to specify a config file use ./redis-server /path/to/redis.conf</span><br><span class="line">                _._                                                  </span><br><span class="line">           _.-``__ ''-._                                             </span><br><span class="line">      _.-``    `.  `_.  ''-._           Redis 6.0.6 (00000000/0) 64 bit</span><br><span class="line">  .-`` .-```.  ```\/    _.,_ ''-._                                   </span><br><span class="line"> (    '      ,       .-`  | `,    )     Running in standalone mode</span><br><span class="line"> |`-._`-...-` __...-.``-._|'` _.-'|     Port: 6379</span><br><span class="line"> |    `-._   `._    /     _.-'    |     PID: 31845</span><br><span class="line">  `-._    `-._  `-./  _.-'    _.-'                                   </span><br><span class="line"> |`-._`-._    `-.__.-'    _.-'_.-'|                                  </span><br><span class="line"> |    `-._`-._        _.-'_.-'    |           http://redis.io        </span><br><span class="line">  `-._    `-._`-.__.-'_.-'    _.-'                                   </span><br><span class="line"> |`-._`-._    `-.__.-'    _.-'_.-'|                                  </span><br><span class="line"> |    `-._`-._        _.-'_.-'    |                                  </span><br><span class="line">  `-._    `-._`-.__.-'_.-'    _.-'                                   </span><br><span class="line">      `-._    `-.__.-'    _.-'                                       </span><br><span class="line">          `-._        _.-'                                           </span><br><span class="line">              `-.__.-'                                               </span><br><span class="line"></span><br><span class="line">31845:M 17 Dec 2020 14:18:30.711 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span><br><span class="line">31845:M 17 Dec 2020 14:18:30.711 # Server initialized</span><br><span class="line">31845:M 17 Dec 2020 14:18:30.711 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.</span><br><span class="line">31845:M 17 Dec 2020 14:18:30.711 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.</span><br><span class="line">31845:M 17 Dec 2020 14:18:30.711 * Ready to accept connections</span><br></pre></td></tr></table></figure><h5 id="后台启动"><a href="#后台启动" class="headerlink" title="后台启动"></a>后台启动</h5><p>从 redis 的源码目录中复制 redis.conf 到 redis 的安装目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@iZx068ismxxjaoZ bin]# cp /usr/local/src/redis-6.0.6/redis.conf /usr/local/redis/bin/</span><br><span class="line">[root@iZx068ismxxjaoZ bin]# ll</span><br><span class="line">total 35792</span><br><span class="line">-rw-r--r-- 1 root root      92 Dec 17 14:19 dump.rdb</span><br><span class="line">-rwxr-xr-x 1 root root 4719584 Dec 17 14:14 redis-benchmark</span><br><span class="line">-rwxr-xr-x 1 root root 8952248 Dec 17 14:14 redis-check-aof</span><br><span class="line">-rwxr-xr-x 1 root root 8952248 Dec 17 14:14 redis-check-rdb</span><br><span class="line">-rwxr-xr-x 1 root root 4975064 Dec 17 14:14 redis-cli</span><br><span class="line">-rw-r--r-- 1 root root   83392 Dec 17 14:21 redis.conf</span><br><span class="line">lrwxrwxrwx 1 root root      12 Dec 17 14:14 redis-sentinel -&gt; redis-server</span><br><span class="line">-rwxr-xr-x 1 root root 8952248 Dec 17 14:14 redis-server</span><br><span class="line">[root@iZx068ismxxjaoZ bin]#</span><br></pre></td></tr></table></figure><p>修改 redis.conf 文件，把 daemonize no 改为 daemonize yes</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">################################ GENERAL #####################################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> By default Redis does not run as a daemon. Use <span class="string">'yes'</span> <span class="keyword">if</span> you need it.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Note that Redis will write a pid file <span class="keyword">in</span> /var/run/redis.pid when daemonized.</span></span><br><span class="line">daemonize yes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> If you run Redis from upstart or systemd, Redis can interact with your</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> supervision tree. Options:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   supervised no      - no supervision interaction</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   supervised upstart - signal upstart by putting Redis into SIGSTOP mode</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   supervised systemd - signal systemd by writing READY=1 to <span class="variable">$NOTIFY_SOCKET</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">   supervised auto    - detect upstart or systemd method based on</span></span><br><span class="line"><span class="meta">#</span><span class="bash">                        UPSTART_JOB or NOTIFY_SOCKET environment variables</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Note: these supervision methods only signal <span class="string">"process is ready."</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">       They <span class="keyword">do</span> not <span class="built_in">enable</span> continuous liveness pings back to your supervisor.</span></span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@iZx068ismxxjaoZ bin]# ./redis-server redis.conf </span><br><span class="line">32114:C 17 Dec 2020 14:23:50.018 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br><span class="line">32114:C 17 Dec 2020 14:23:50.018 # Redis version=6.0.6, bits=64, commit=00000000, modified=0, pid=32114, just started</span><br><span class="line">32114:C 17 Dec 2020 14:23:50.018 # Configuration loaded</span><br><span class="line">[root@iZx068ismxxjaoZ bin]# </span><br><span class="line">[root@iZx068ismxxjaoZ bin]# ps -ef |grep redis</span><br><span class="line">root     32115     1  0 14:23 ?        00:00:00 ./redis-server 127.0.0.1:6379</span><br><span class="line">root     32196 31555  0 14:25 pts/1    00:00:00 grep --color=auto redis</span><br><span class="line"><span class="meta">#</span><span class="bash">  <span class="built_in">kill</span> -9 32115</span></span><br></pre></td></tr></table></figure><h4 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h4><p>添加开机启动服务文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/systemd/system/redis.service</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入以下内容并保存</span></span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=redis-server</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/redis/bin/redis-server /usr/local/redis/bin/redis.conf</span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">执行：</span></span><br><span class="line">systemctl daemon-reload #重新加载服务配置文件</span><br><span class="line">systemctl enable redis.service</span><br><span class="line">systemctl start redis.service </span><br><span class="line"></span><br><span class="line">[root@iZx068ismxxjaoZ system]# ps -ef | grep redis</span><br><span class="line">root       337     1  0 14:36 ?        00:00:00 /usr/local/redis/bin/redis-server 127.0.0.1:6379</span><br><span class="line">root       345 31555  0 14:36 pts/1    00:00:00 grep --color=auto redis</span><br><span class="line">[root@iZx068ismxxjaoZ system]#</span><br></pre></td></tr></table></figure><p>服务操作命令</p><p>systemctl start redis.service  #启动redis服务</p><p>systemctl stop redis.service  #停止redis服务</p><p>systemctl restart redis.service  #重新启动服务</p><p>systemctl status redis.service  #查看服务当前状态</p><p>systemctl enable redis.service  #设置开机自启动</p><p>systemctl disable redis.service  #停止开机自启动</p><h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><p>redis 中文网 <a href="http://www.redis.cn/download.html" target="_blank" rel="noopener">http://www.redis.cn/download.html</a></p><p>博客：<a href="https://www.cnblogs.com/heqiuyong/p/10463334.html" target="_blank" rel="noopener">https://www.cnblogs.com/heqiuyong/p/10463334.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信公众号（服务号）配置服务器</title>
      <link href="/myblog/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%EF%BC%88%E6%9C%8D%E5%8A%A1%E5%8F%B7%EF%BC%89%E9%85%8D%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/myblog/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%EF%BC%88%E6%9C%8D%E5%8A%A1%E5%8F%B7%EF%BC%89%E9%85%8D%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>在微信公众号（服务号）开发的准备阶段需要我们配置自己的服务器。</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20201217131942035.png" alt="image-20201217131942035"></p><p>文档地址：<a href="https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Access_Overview.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Access_Overview.html</a></p><h4 id="下载运行官方示例"><a href="#下载运行官方示例" class="headerlink" title="下载运行官方示例"></a>下载运行官方示例</h4><p><a href="https://developers.weixin.qq.com/doc/oplatform/Third-party_Platforms/Message_Encryption/Message_encryption_and_decryption.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/doc/oplatform/Third-party_Platforms/Message_Encryption/Message_encryption_and_decryption.html</a></p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20201202171753034.png" alt="image-20201202171753034"></p><p>下载示例代码后解压如下：</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20201202172231504.png" alt="image-20201202172231504"></p><p>把 src 的代码复制到项目并解决完包路径问题后运行 demo 的 main 方法。提示如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">D:\Java\jdk1.8.0_144\bin\java.exe <span class="string">"-javaagent:D:\Program Files\ideaIU-2019.2win\lib\idea_rt.jar=1346:D:\Program Files\ideaIU-2019.2win\bin"</span> -Dfile.encoding=UTF-8 -classpath <span class="string">"D:\Java\jdk1.8.0_144\jre\lib\charsets.jar;D:\Java\jdk1.8.0_144\jre\lib\deploy.jar;D:\Java\jdk1.8.0_144\jre\lib\ext\access-bridge-64.jar;D:\Java\jdk1.8.0_144\jre\lib\ext\cldrdata.jar;D:\Java\jdk1.8.0_144\jre\lib\ext\dnsns.jar;D:\Java\jdk1.8.0_144\jre\lib\ext\jaccess.jar;D:\Java\jdk1.8.0_144\jre\lib\ext\jfxrt.jar;D:\Java\jdk1.8.0_144\jre\lib\ext\localedata.jar;D:\Java\jdk1.8.0_144\jre\lib\ext\nashorn.jar;D:\Java\jdk1.8.0_144\jre\lib\ext\sunec.jar;D:\Java\jdk1.8.0_144\jre\lib\ext\sunjce_provider.jar;D:\Java\jdk1.8.0_144\jre\lib\ext\sunmscapi.jar;D:\Java\jdk1.8.0_144\jre\lib\ext\sunpkcs11.jar;D:\Java\jdk1.8.0_144\jre\lib\ext\zipfs.jar;D:\Java\jdk1.8.0_144\jre\lib\javaws.jar;D:\Java\jdk1.8.0_144\jre\lib\jce.jar;D:\Java\jdk1.8.0_144\jre\lib\jfr.jar;D:\Java\jdk1.8.0_144\jre\lib\jfxswt.jar;D:\Java\jdk1.8.0_144\jre\lib\jsse.jar;D:\Java\jdk1.8.0_144\jre\lib\management-agent.jar;D:\Java\jdk1.8.0_144\jre\lib\plugin.jar;D:\Java\jdk1.8.0_144\jre\lib\resources.jar;D:\Java\jdk1.8.0_144\jre\lib\rt.jar;D:\IdeaProjects\qingyun\plantform\target\classes;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\boot\spring-boot-starter-data-jdbc\2.4.0\spring-boot-starter-data-jdbc-2.4.0.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\data\spring-data-jdbc\2.1.1\spring-data-jdbc-2.1.1.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\data\spring-data-relational\2.1.1\spring-data-relational-2.1.1.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\data\spring-data-commons\2.4.1\spring-data-commons-2.4.1.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\spring-tx\5.3.1\spring-tx-5.3.1.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\spring-context\5.3.1\spring-context-5.3.1.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\spring-beans\5.3.1\spring-beans-5.3.1.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\boot\spring-boot-starter-jdbc\2.4.0\spring-boot-starter-jdbc-2.4.0.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\boot\spring-boot-starter\2.4.0\spring-boot-starter-2.4.0.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\boot\spring-boot-starter-logging\2.4.0\spring-boot-starter-logging-2.4.0.jar;D:\Program Files\apache-maven-3.5.3\repository\ch\qos\logback\logback-classic\1.2.3\logback-classic-1.2.3.jar;D:\Program Files\apache-maven-3.5.3\repository\ch\qos\logback\logback-core\1.2.3\logback-core-1.2.3.jar;D:\Program Files\apache-maven-3.5.3\repository\org\apache\logging\log4j\log4j-to-slf4j\2.13.3\log4j-to-slf4j-2.13.3.jar;D:\Program Files\apache-maven-3.5.3\repository\org\apache\logging\log4j\log4j-api\2.13.3\log4j-api-2.13.3.jar;D:\Program Files\apache-maven-3.5.3\repository\org\slf4j\jul-to-slf4j\1.7.30\jul-to-slf4j-1.7.30.jar;D:\Program Files\apache-maven-3.5.3\repository\jakarta\annotation\jakarta.annotation-api\1.3.5\jakarta.annotation-api-1.3.5.jar;D:\Program Files\apache-maven-3.5.3\repository\org\yaml\snakeyaml\1.27\snakeyaml-1.27.jar;D:\Program Files\apache-maven-3.5.3\repository\com\zaxxer\HikariCP\3.4.5\HikariCP-3.4.5.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\spring-jdbc\5.3.1\spring-jdbc-5.3.1.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\boot\spring-boot-starter-web\2.4.0\spring-boot-starter-web-2.4.0.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\boot\spring-boot-starter-json\2.4.0\spring-boot-starter-json-2.4.0.jar;D:\Program Files\apache-maven-3.5.3\repository\com\fasterxml\jackson\core\jackson-databind\2.11.3\jackson-databind-2.11.3.jar;D:\Program Files\apache-maven-3.5.3\repository\com\fasterxml\jackson\core\jackson-annotations\2.11.3\jackson-annotations-2.11.3.jar;D:\Program Files\apache-maven-3.5.3\repository\com\fasterxml\jackson\core\jackson-core\2.11.3\jackson-core-2.11.3.jar;D:\Program Files\apache-maven-3.5.3\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.11.3\jackson-datatype-jdk8-2.11.3.jar;D:\Program Files\apache-maven-3.5.3\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.11.3\jackson-datatype-jsr310-2.11.3.jar;D:\Program Files\apache-maven-3.5.3\repository\com\fasterxml\jackson\module\jackson-module-parameter-names\2.11.3\jackson-module-parameter-names-2.11.3.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\boot\spring-boot-starter-tomcat\2.4.0\spring-boot-starter-tomcat-2.4.0.jar;D:\Program Files\apache-maven-3.5.3\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.39\tomcat-embed-core-9.0.39.jar;D:\Program Files\apache-maven-3.5.3\repository\org\glassfish\jakarta.el\3.0.3\jakarta.el-3.0.3.jar;D:\Program Files\apache-maven-3.5.3\repository\org\apache\tomcat\embed\tomcat-embed-websocket\9.0.39\tomcat-embed-websocket-9.0.39.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\spring-web\5.3.1\spring-web-5.3.1.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\spring-webmvc\5.3.1\spring-webmvc-5.3.1.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\spring-aop\5.3.1\spring-aop-5.3.1.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\spring-expression\5.3.1\spring-expression-5.3.1.jar;D:\Program Files\apache-maven-3.5.3\repository\org\mybatis\spring\boot\mybatis-spring-boot-starter\2.1.4\mybatis-spring-boot-starter-2.1.4.jar;D:\Program Files\apache-maven-3.5.3\repository\org\mybatis\spring\boot\mybatis-spring-boot-autoconfigure\2.1.4\mybatis-spring-boot-autoconfigure-2.1.4.jar;D:\Program Files\apache-maven-3.5.3\repository\org\mybatis\mybatis\3.5.6\mybatis-3.5.6.jar;D:\Program Files\apache-maven-3.5.3\repository\org\mybatis\mybatis-spring\2.0.6\mybatis-spring-2.0.6.jar;D:\Program Files\apache-maven-3.5.3\repository\org\thymeleaf\extras\thymeleaf-extras-springsecurity5\3.0.4.RELEASE\thymeleaf-extras-springsecurity5-3.0.4.RELEASE.jar;D:\Program Files\apache-maven-3.5.3\repository\org\slf4j\slf4j-api\1.7.30\slf4j-api-1.7.30.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\boot\spring-boot-devtools\2.4.0\spring-boot-devtools-2.4.0.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\boot\spring-boot\2.4.0\spring-boot-2.4.0.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\boot\spring-boot-autoconfigure\2.4.0\spring-boot-autoconfigure-2.4.0.jar;D:\Program Files\apache-maven-3.5.3\repository\mysql\mysql-connector-java\8.0.22\mysql-connector-java-8.0.22.jar;D:\Program Files\apache-maven-3.5.3\repository\org\projectlombok\lombok\1.18.16\lombok-1.18.16.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\spring-core\5.3.1\spring-core-5.3.1.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\spring-jcl\5.3.1\spring-jcl-5.3.1.jar;D:\Program Files\apache-maven-3.5.3\repository\commons-codec\commons-codec\1.13\commons-codec-1.13.jar"</span> com.wzy.plantform.weixin.demo.Program</span><br><span class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> java.lang.IllegalArgumentException: Last encoded character (before the paddings <span class="keyword">if</span> any) is a valid base 64 alphabet but not a possible value</span><br><span class="line">at org.apache.commons.codec.binary.Base64.validateCharacter(Base64.java:798)</span><br><span class="line">at org.apache.commons.codec.binary.Base64.decode(Base64.java:477)</span><br><span class="line">at org.apache.commons.codec.binary.BaseNCodec.decode(BaseNCodec.java:411)</span><br><span class="line">at org.apache.commons.codec.binary.BaseNCodec.decode(BaseNCodec.java:395)</span><br><span class="line">at org.apache.commons.codec.binary.Base64.decodeBase64(Base64.java:694)</span><br><span class="line">at com.wzy.plantform.weixin.aes.WXBizMsgCrypt.&lt;init&gt;(WXBizMsgCrypt.java:62)</span><br><span class="line">at com.wzy.plantform.weixin.demo.Program.main(Program.java:32)</span><br></pre></td></tr></table></figure><p>我加的依赖包：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-codec/commons-codec --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="comment">&lt;!-- 后面改到 1.9 版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>百度了下  说是包的版本问题。</p><p> 于是参照  readme.txt  更改了 commons-codec 包的版本为 1.9 再次运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">D:\Java\jdk1.8.0_144\bin\java.exe <span class="string">"-javaagent:D:\Program Files\ideaIU-2019.2win\lib\idea_rt.jar=1447:D:\Program Files\ideaIU-2019.2win\bin"</span> -Dfile.encoding=UTF-8 -classpath <span class="string">"D:\Java\jdk1.8.0_144\jre\lib\charsets.jar;D:\Java\jdk1.8.0_144\jre\lib\deploy.jar;D:\Java\jdk1.8.0_144\jre\lib\ext\access-bridge-64.jar;D:\Java\jdk1.8.0_144\jre\lib\ext\cldrdata.jar;D:\Java\jdk1.8.0_144\jre\lib\ext\dnsns.jar;D:\Java\jdk1.8.0_144\jre\lib\ext\jaccess.jar;D:\Java\jdk1.8.0_144\jre\lib\ext\jfxrt.jar;D:\Java\jdk1.8.0_144\jre\lib\ext\localedata.jar;D:\Java\jdk1.8.0_144\jre\lib\ext\nashorn.jar;D:\Java\jdk1.8.0_144\jre\lib\ext\sunec.jar;D:\Java\jdk1.8.0_144\jre\lib\ext\sunjce_provider.jar;D:\Java\jdk1.8.0_144\jre\lib\ext\sunmscapi.jar;D:\Java\jdk1.8.0_144\jre\lib\ext\sunpkcs11.jar;D:\Java\jdk1.8.0_144\jre\lib\ext\zipfs.jar;D:\Java\jdk1.8.0_144\jre\lib\javaws.jar;D:\Java\jdk1.8.0_144\jre\lib\jce.jar;D:\Java\jdk1.8.0_144\jre\lib\jfr.jar;D:\Java\jdk1.8.0_144\jre\lib\jfxswt.jar;D:\Java\jdk1.8.0_144\jre\lib\jsse.jar;D:\Java\jdk1.8.0_144\jre\lib\management-agent.jar;D:\Java\jdk1.8.0_144\jre\lib\plugin.jar;D:\Java\jdk1.8.0_144\jre\lib\resources.jar;D:\Java\jdk1.8.0_144\jre\lib\rt.jar;D:\IdeaProjects\qingyun\plantform\target\classes;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\boot\spring-boot-starter-data-jdbc\2.4.0\spring-boot-starter-data-jdbc-2.4.0.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\data\spring-data-jdbc\2.1.1\spring-data-jdbc-2.1.1.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\data\spring-data-relational\2.1.1\spring-data-relational-2.1.1.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\data\spring-data-commons\2.4.1\spring-data-commons-2.4.1.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\spring-tx\5.3.1\spring-tx-5.3.1.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\spring-context\5.3.1\spring-context-5.3.1.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\spring-beans\5.3.1\spring-beans-5.3.1.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\boot\spring-boot-starter-jdbc\2.4.0\spring-boot-starter-jdbc-2.4.0.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\boot\spring-boot-starter\2.4.0\spring-boot-starter-2.4.0.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\boot\spring-boot-starter-logging\2.4.0\spring-boot-starter-logging-2.4.0.jar;D:\Program Files\apache-maven-3.5.3\repository\ch\qos\logback\logback-classic\1.2.3\logback-classic-1.2.3.jar;D:\Program Files\apache-maven-3.5.3\repository\ch\qos\logback\logback-core\1.2.3\logback-core-1.2.3.jar;D:\Program Files\apache-maven-3.5.3\repository\org\apache\logging\log4j\log4j-to-slf4j\2.13.3\log4j-to-slf4j-2.13.3.jar;D:\Program Files\apache-maven-3.5.3\repository\org\apache\logging\log4j\log4j-api\2.13.3\log4j-api-2.13.3.jar;D:\Program Files\apache-maven-3.5.3\repository\org\slf4j\jul-to-slf4j\1.7.30\jul-to-slf4j-1.7.30.jar;D:\Program Files\apache-maven-3.5.3\repository\jakarta\annotation\jakarta.annotation-api\1.3.5\jakarta.annotation-api-1.3.5.jar;D:\Program Files\apache-maven-3.5.3\repository\org\yaml\snakeyaml\1.27\snakeyaml-1.27.jar;D:\Program Files\apache-maven-3.5.3\repository\com\zaxxer\HikariCP\3.4.5\HikariCP-3.4.5.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\spring-jdbc\5.3.1\spring-jdbc-5.3.1.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\boot\spring-boot-starter-web\2.4.0\spring-boot-starter-web-2.4.0.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\boot\spring-boot-starter-json\2.4.0\spring-boot-starter-json-2.4.0.jar;D:\Program Files\apache-maven-3.5.3\repository\com\fasterxml\jackson\core\jackson-databind\2.11.3\jackson-databind-2.11.3.jar;D:\Program Files\apache-maven-3.5.3\repository\com\fasterxml\jackson\core\jackson-annotations\2.11.3\jackson-annotations-2.11.3.jar;D:\Program Files\apache-maven-3.5.3\repository\com\fasterxml\jackson\core\jackson-core\2.11.3\jackson-core-2.11.3.jar;D:\Program Files\apache-maven-3.5.3\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.11.3\jackson-datatype-jdk8-2.11.3.jar;D:\Program Files\apache-maven-3.5.3\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.11.3\jackson-datatype-jsr310-2.11.3.jar;D:\Program Files\apache-maven-3.5.3\repository\com\fasterxml\jackson\module\jackson-module-parameter-names\2.11.3\jackson-module-parameter-names-2.11.3.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\boot\spring-boot-starter-tomcat\2.4.0\spring-boot-starter-tomcat-2.4.0.jar;D:\Program Files\apache-maven-3.5.3\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.39\tomcat-embed-core-9.0.39.jar;D:\Program Files\apache-maven-3.5.3\repository\org\glassfish\jakarta.el\3.0.3\jakarta.el-3.0.3.jar;D:\Program Files\apache-maven-3.5.3\repository\org\apache\tomcat\embed\tomcat-embed-websocket\9.0.39\tomcat-embed-websocket-9.0.39.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\spring-web\5.3.1\spring-web-5.3.1.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\spring-webmvc\5.3.1\spring-webmvc-5.3.1.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\spring-aop\5.3.1\spring-aop-5.3.1.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\spring-expression\5.3.1\spring-expression-5.3.1.jar;D:\Program Files\apache-maven-3.5.3\repository\org\mybatis\spring\boot\mybatis-spring-boot-starter\2.1.4\mybatis-spring-boot-starter-2.1.4.jar;D:\Program Files\apache-maven-3.5.3\repository\org\mybatis\spring\boot\mybatis-spring-boot-autoconfigure\2.1.4\mybatis-spring-boot-autoconfigure-2.1.4.jar;D:\Program Files\apache-maven-3.5.3\repository\org\mybatis\mybatis\3.5.6\mybatis-3.5.6.jar;D:\Program Files\apache-maven-3.5.3\repository\org\mybatis\mybatis-spring\2.0.6\mybatis-spring-2.0.6.jar;D:\Program Files\apache-maven-3.5.3\repository\org\thymeleaf\extras\thymeleaf-extras-springsecurity5\3.0.4.RELEASE\thymeleaf-extras-springsecurity5-3.0.4.RELEASE.jar;D:\Program Files\apache-maven-3.5.3\repository\org\slf4j\slf4j-api\1.7.30\slf4j-api-1.7.30.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\boot\spring-boot-devtools\2.4.0\spring-boot-devtools-2.4.0.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\boot\spring-boot\2.4.0\spring-boot-2.4.0.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\boot\spring-boot-autoconfigure\2.4.0\spring-boot-autoconfigure-2.4.0.jar;D:\Program Files\apache-maven-3.5.3\repository\mysql\mysql-connector-java\8.0.22\mysql-connector-java-8.0.22.jar;D:\Program Files\apache-maven-3.5.3\repository\org\projectlombok\lombok\1.18.16\lombok-1.18.16.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\spring-core\5.3.1\spring-core-5.3.1.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\spring-jcl\5.3.1\spring-jcl-5.3.1.jar;D:\Program Files\apache-maven-3.5.3\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar"</span> com.wzy.plantform.weixin.demo.Program</span><br><span class="line">java.security.InvalidKeyException: Illegal key size</span><br><span class="line">at javax.crypto.Cipher.checkCryptoPerm(Cipher.java:1039)</span><br><span class="line">at javax.crypto.Cipher.implInit(Cipher.java:805)</span><br><span class="line">at javax.crypto.Cipher.chooseProvider(Cipher.java:864)</span><br><span class="line">at javax.crypto.Cipher.init(Cipher.java:1396)</span><br><span class="line">at javax.crypto.Cipher.init(Cipher.java:1327)</span><br><span class="line">at com.wzy.plantform.weixin.aes.WXBizMsgCrypt.encrypt(WXBizMsgCrypt.java:129)</span><br><span class="line">at com.wzy.plantform.weixin.aes.WXBizMsgCrypt.encryptMsg(WXBizMsgCrypt.java:213)</span><br><span class="line">at com.wzy.plantform.weixin.demo.Program.main(Program.java:33)</span><br><span class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> com.wzy.plantform.weixin.aes.AesException: aes加密失败</span><br><span class="line">at com.wzy.plantform.weixin.aes.WXBizMsgCrypt.encrypt(WXBizMsgCrypt.java:140)</span><br><span class="line">at com.wzy.plantform.weixin.aes.WXBizMsgCrypt.encryptMsg(WXBizMsgCrypt.java:213)</span><br><span class="line">at com.wzy.plantform.weixin.demo.Program.main(Program.java:33)</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 1</span><br></pre></td></tr></table></figure><p>readme 里说了 要去下个什么文件放在 jre 下面。由于我 java 用的是 jdk8 所以我把下面的 jce-7 改成 jce-8 后下载文件。</p><p><a href="http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html</a></p><p>参照 readme 把下下来的 jar 包放在 jdk/jre/lib/security 下 替换后 再次运行如下：ok了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">D:\Java\jdk1.8.0_144\bin\java.exe <span class="string">"-javaagent:D:\Program Files\ideaIU-2019.2win\lib\idea_rt.jar=1655:D:\Program Files\ideaIU-2019.2win\bin"</span> -Dfile.encoding=UTF-8 -classpath <span class="string">"D:\Java\jdk1.8.0_144\jre\lib\charsets.jar;D:\Java\jdk1.8.0_144\jre\lib\deploy.jar;D:\Java\jdk1.8.0_144\jre\lib\ext\access-bridge-64.jar;D:\Java\jdk1.8.0_144\jre\lib\ext\cldrdata.jar;D:\Java\jdk1.8.0_144\jre\lib\ext\dnsns.jar;D:\Java\jdk1.8.0_144\jre\lib\ext\jaccess.jar;D:\Java\jdk1.8.0_144\jre\lib\ext\jfxrt.jar;D:\Java\jdk1.8.0_144\jre\lib\ext\localedata.jar;D:\Java\jdk1.8.0_144\jre\lib\ext\nashorn.jar;D:\Java\jdk1.8.0_144\jre\lib\ext\sunec.jar;D:\Java\jdk1.8.0_144\jre\lib\ext\sunjce_provider.jar;D:\Java\jdk1.8.0_144\jre\lib\ext\sunmscapi.jar;D:\Java\jdk1.8.0_144\jre\lib\ext\sunpkcs11.jar;D:\Java\jdk1.8.0_144\jre\lib\ext\zipfs.jar;D:\Java\jdk1.8.0_144\jre\lib\javaws.jar;D:\Java\jdk1.8.0_144\jre\lib\jce.jar;D:\Java\jdk1.8.0_144\jre\lib\jfr.jar;D:\Java\jdk1.8.0_144\jre\lib\jfxswt.jar;D:\Java\jdk1.8.0_144\jre\lib\jsse.jar;D:\Java\jdk1.8.0_144\jre\lib\management-agent.jar;D:\Java\jdk1.8.0_144\jre\lib\plugin.jar;D:\Java\jdk1.8.0_144\jre\lib\resources.jar;D:\Java\jdk1.8.0_144\jre\lib\rt.jar;D:\IdeaProjects\qingyun\plantform\target\classes;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\boot\spring-boot-starter-data-jdbc\2.4.0\spring-boot-starter-data-jdbc-2.4.0.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\data\spring-data-jdbc\2.1.1\spring-data-jdbc-2.1.1.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\data\spring-data-relational\2.1.1\spring-data-relational-2.1.1.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\data\spring-data-commons\2.4.1\spring-data-commons-2.4.1.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\spring-tx\5.3.1\spring-tx-5.3.1.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\spring-context\5.3.1\spring-context-5.3.1.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\spring-beans\5.3.1\spring-beans-5.3.1.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\boot\spring-boot-starter-jdbc\2.4.0\spring-boot-starter-jdbc-2.4.0.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\boot\spring-boot-starter\2.4.0\spring-boot-starter-2.4.0.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\boot\spring-boot-starter-logging\2.4.0\spring-boot-starter-logging-2.4.0.jar;D:\Program Files\apache-maven-3.5.3\repository\ch\qos\logback\logback-classic\1.2.3\logback-classic-1.2.3.jar;D:\Program Files\apache-maven-3.5.3\repository\ch\qos\logback\logback-core\1.2.3\logback-core-1.2.3.jar;D:\Program Files\apache-maven-3.5.3\repository\org\apache\logging\log4j\log4j-to-slf4j\2.13.3\log4j-to-slf4j-2.13.3.jar;D:\Program Files\apache-maven-3.5.3\repository\org\apache\logging\log4j\log4j-api\2.13.3\log4j-api-2.13.3.jar;D:\Program Files\apache-maven-3.5.3\repository\org\slf4j\jul-to-slf4j\1.7.30\jul-to-slf4j-1.7.30.jar;D:\Program Files\apache-maven-3.5.3\repository\jakarta\annotation\jakarta.annotation-api\1.3.5\jakarta.annotation-api-1.3.5.jar;D:\Program Files\apache-maven-3.5.3\repository\org\yaml\snakeyaml\1.27\snakeyaml-1.27.jar;D:\Program Files\apache-maven-3.5.3\repository\com\zaxxer\HikariCP\3.4.5\HikariCP-3.4.5.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\spring-jdbc\5.3.1\spring-jdbc-5.3.1.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\boot\spring-boot-starter-web\2.4.0\spring-boot-starter-web-2.4.0.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\boot\spring-boot-starter-json\2.4.0\spring-boot-starter-json-2.4.0.jar;D:\Program Files\apache-maven-3.5.3\repository\com\fasterxml\jackson\core\jackson-databind\2.11.3\jackson-databind-2.11.3.jar;D:\Program Files\apache-maven-3.5.3\repository\com\fasterxml\jackson\core\jackson-annotations\2.11.3\jackson-annotations-2.11.3.jar;D:\Program Files\apache-maven-3.5.3\repository\com\fasterxml\jackson\core\jackson-core\2.11.3\jackson-core-2.11.3.jar;D:\Program Files\apache-maven-3.5.3\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.11.3\jackson-datatype-jdk8-2.11.3.jar;D:\Program Files\apache-maven-3.5.3\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.11.3\jackson-datatype-jsr310-2.11.3.jar;D:\Program Files\apache-maven-3.5.3\repository\com\fasterxml\jackson\module\jackson-module-parameter-names\2.11.3\jackson-module-parameter-names-2.11.3.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\boot\spring-boot-starter-tomcat\2.4.0\spring-boot-starter-tomcat-2.4.0.jar;D:\Program Files\apache-maven-3.5.3\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.39\tomcat-embed-core-9.0.39.jar;D:\Program Files\apache-maven-3.5.3\repository\org\glassfish\jakarta.el\3.0.3\jakarta.el-3.0.3.jar;D:\Program Files\apache-maven-3.5.3\repository\org\apache\tomcat\embed\tomcat-embed-websocket\9.0.39\tomcat-embed-websocket-9.0.39.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\spring-web\5.3.1\spring-web-5.3.1.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\spring-webmvc\5.3.1\spring-webmvc-5.3.1.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\spring-aop\5.3.1\spring-aop-5.3.1.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\spring-expression\5.3.1\spring-expression-5.3.1.jar;D:\Program Files\apache-maven-3.5.3\repository\org\mybatis\spring\boot\mybatis-spring-boot-starter\2.1.4\mybatis-spring-boot-starter-2.1.4.jar;D:\Program Files\apache-maven-3.5.3\repository\org\mybatis\spring\boot\mybatis-spring-boot-autoconfigure\2.1.4\mybatis-spring-boot-autoconfigure-2.1.4.jar;D:\Program Files\apache-maven-3.5.3\repository\org\mybatis\mybatis\3.5.6\mybatis-3.5.6.jar;D:\Program Files\apache-maven-3.5.3\repository\org\mybatis\mybatis-spring\2.0.6\mybatis-spring-2.0.6.jar;D:\Program Files\apache-maven-3.5.3\repository\org\thymeleaf\extras\thymeleaf-extras-springsecurity5\3.0.4.RELEASE\thymeleaf-extras-springsecurity5-3.0.4.RELEASE.jar;D:\Program Files\apache-maven-3.5.3\repository\org\slf4j\slf4j-api\1.7.30\slf4j-api-1.7.30.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\boot\spring-boot-devtools\2.4.0\spring-boot-devtools-2.4.0.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\boot\spring-boot\2.4.0\spring-boot-2.4.0.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\boot\spring-boot-autoconfigure\2.4.0\spring-boot-autoconfigure-2.4.0.jar;D:\Program Files\apache-maven-3.5.3\repository\mysql\mysql-connector-java\8.0.22\mysql-connector-java-8.0.22.jar;D:\Program Files\apache-maven-3.5.3\repository\org\projectlombok\lombok\1.18.16\lombok-1.18.16.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\spring-core\5.3.1\spring-core-5.3.1.jar;D:\Program Files\apache-maven-3.5.3\repository\org\springframework\spring-jcl\5.3.1\spring-jcl-5.3.1.jar;D:\Program Files\apache-maven-3.5.3\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar"</span> com.wzy.plantform.weixin.demo.Program</span><br><span class="line">加密后: &lt;xml&gt;</span><br><span class="line">&lt;Encrypt&gt;&lt;![CDATA[VmeFwwY8J9xFYMVvL5gipXrxJAusR3v5CUOU6ZXaPP/kEOROdaBfgkpr55ZY4lKRXL7wFtvY1iACIMdkhWuJlkzVTVxxt9fvZkKeVoINaGpGLpfDMueu/kqrfB0Pab/n5V8Rc9te2OT3gy1VWU0kzQxMhsNKRljHKczYb5t7nQDa1n8E8md+K0xdLk9WRAnTJeOoeTUhZRDXuzgxAADHm2HS/DFHd+eh9QygTpWDmsUgLuaAwWRWlGuHgQwIN1wUkhEbQskHw57P7wa/uUWOlG/yDyrRLCy58iwshvKk2fTc0EBwkDLmmh9mOxROvJFoi61DTFGPqHcRUMoeNyfIrtQdbY5ffIZhZ8Cu1GNYz4MCNyZ216SH4M6mUdsEFMN9wk4rkbLZQxtbjkSdbZ00GURu939SgNItzidPeZeU6Nk3drYB4rW1+Eg5V0TjJu0Vee1OD0yRHbCaFMlvB7f5cGj2FKoY+Kggn8DkdmVx4TTmUKtZ6XLKS68v99BygNTmFBm56zVlwQLW7/ClqqWtnB3WW9Xt5eKi70j81kc5KcNZWiIHnTD2NDBSy952Y/dVR+XXNCfEXNbqFgF9smE0BONy/GD72VGARrdRASOkcps96qJ/1jJ5sMvph7Nb3S/e]]&gt;&lt;/Encrypt&gt;</span><br><span class="line">&lt;MsgSignature&gt;&lt;![CDATA[cdd207617899101c4bc79b612952f4b29b3f42e8]]&gt;&lt;/MsgSignature&gt;</span><br><span class="line">&lt;TimeStamp&gt;1409304348&lt;/TimeStamp&gt;</span><br><span class="line">&lt;Nonce&gt;&lt;![CDATA[xxxxxx]]&gt;&lt;/Nonce&gt;</span><br><span class="line">&lt;/xml&gt;</span><br><span class="line">解密后明文:  中文&lt;xml&gt;&lt;ToUserName&gt;&lt;![CDATA[oia2TjjewbmiOUlr6X-1crbLOvLw]]&gt;&lt;/ToUserName&gt;&lt;FromUserName&gt;&lt;![CDATA[gh_7f083739789a]]&gt;&lt;/FromUserName&gt;&lt;CreateTime&gt;1407743423&lt;/CreateTime&gt;&lt;MsgType&gt;&lt;![CDATA[video]]&gt;&lt;/MsgType&gt;&lt;Video&gt;&lt;MediaId&gt;&lt;![CDATA[eYJ1MbwPRJtOvIEabaxHs7TX2D-HV71s79GUxqdUkjm6Gs2Ed1KF3ulAOA9H1xG0]]&gt;&lt;/MediaId&gt;&lt;Title&gt;&lt;![CDATA[testCallBackReplyVideo]]&gt;&lt;/Title&gt;&lt;Description&gt;&lt;![CDATA[testCallBackReplyVideo]]&gt;&lt;/Description&gt;&lt;/Video&gt;&lt;/xml&gt;</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure><h4 id="发布服务"><a href="#发布服务" class="headerlink" title="发布服务"></a>发布服务</h4><p>把代码整理下发布一个 http 的服务。并把 url 地址填写到 微信的配置（url）里，提交即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/verify-Url"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">verifyUrl</span><span class="params">(String signature, String timestamp, String nonce, String echostr)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> AesException </span>&#123;</span><br><span class="line">  log.info(<span class="string">"msgSignature:&#123;&#125;,timeStamp:&#123;&#125;,nonce:&#123;&#125;,echoStr:&#123;&#125;"</span>,signature,timestamp,nonce,echostr);</span><br><span class="line">  WXBizMsgCrypt pc = <span class="keyword">new</span> WXBizMsgCrypt(token, encodingAesKey, appId);</span><br><span class="line">  <span class="keyword">return</span> pc.verifyUrl(signature, timestamp, nonce, echostr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 pc.verifyUrl 方法就是 示例代码中  WXBizMsgCrypt 类的 verifyUrl 方法。</p><h4 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h4><p>配置完后一直验证失败！通过打印输出 发现签名一直不对！后百度到 echoStr 参数填写 “” （空串）。最终结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">verifyUrl</span><span class="params">(String msgSignature, String timeStamp, String nonce, String echoStr)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> AesException </span>&#123;</span><br><span class="line"><span class="comment">//String signature = SHA1.getSHA1(token, timeStamp, nonce, echoStr);</span></span><br><span class="line"><span class="comment">//      SHA1.getSHA1 方法 echoStr  参数传 空串</span></span><br><span class="line">String signature = SHA1.getSHA1(token, timeStamp, nonce, <span class="string">""</span>);</span><br><span class="line">System.out.println(<span class="string">"微信传入的msgSignature："</span>+msgSignature);</span><br><span class="line">System.out.println(<span class="string">"代码生成的 Signature："</span>+signature);</span><br><span class="line"><span class="keyword">if</span> (!signature.equals(msgSignature)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AesException(AesException.ValidateSignatureError);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//String result = decrypt(echoStr);</span></span><br><span class="line"><span class="comment">//return result;</span></span><br><span class="line"><span class="comment">//  只要 签名相同 直接返回原样 echoStr （微信开发文档有说明）</span></span><br><span class="line"><span class="keyword">return</span> echoStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文档：<a href="https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Access_Overview.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Access_Overview.html</a></p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20201202222627199.png" alt="image-20201202222627199"></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> java </tag>
            
            <tag> 微信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7 安装mysql</title>
      <link href="/myblog/centos7-%E5%AE%89%E8%A3%85mysql/"/>
      <url>/myblog/centos7-%E5%AE%89%E8%A3%85mysql/</url>
      
        <content type="html"><![CDATA[<h3 id="查看mysql官网"><a href="#查看mysql官网" class="headerlink" title="查看mysql官网"></a>查看mysql官网</h3><p><a href="https://dev.mysql.com/doc/refman/5.7/en/linux-installation-yum-repo.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/linux-installation-yum-repo.html</a></p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20201117190237858.png" alt="image-20201117190237858"></p><p>找到  linux 上使用 yum 仓库的方式安装</p><h3 id="添加-mysql-yum-仓库"><a href="#添加-mysql-yum-仓库" class="headerlink" title="添加 mysql yum 仓库"></a>添加 mysql yum 仓库</h3><p>根据提示 下载 rpm 文件</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20201117190732740.png" alt="image-20201117190732740"></p><p>因为我的系统是 centos7 所以我选择了这个<a id="more"></a><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20201117190843318.png" alt="image-20201117190843318"></p><p>这里可以把文件下下来后上传到 linux 上。如果机器联网也可以复制下载连接后直接在 linux 上下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm</span><br><span class="line"><span class="comment"># el7 表示 对 linux7 的支持</span></span><br></pre></td></tr></table></figure><p>这里不用担心 mysql80 他是包含了以前的版本的（官网有说明）</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20201117191605123.png" alt="image-20201117191605123"></p><p>安装 sudo rpm -Uvh mysql80-community-release-el7-3.noarch.rpm </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@iZx068ismxxjaoZ src]<span class="comment"># ll</span></span><br><span class="line">total 440764</span><br><span class="line">-rw-r--r-- 1 root root     26024 Apr 25  2019 mysql80-community-release-el7-3.noarch.rpm</span><br><span class="line">[root@iZx068ismxxjaoZ src]<span class="comment"># sudo rpm -Uvh mysql80-community-release-el7-3.noarch.rpm</span></span><br></pre></td></tr></table></figure><p>查看版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@iZx068ismxxjaoZ src]<span class="comment">#  yum repolist all | grep mysql</span></span><br><span class="line">mysql-cluster-7.5-community/x86_64 MySQL Cluster 7.5 Community   disabled</span><br><span class="line">mysql-cluster-7.5-community-source MySQL Cluster 7.5 Community - disabled</span><br><span class="line">mysql-cluster-7.6-community/x86_64 MySQL Cluster 7.6 Community   disabled</span><br><span class="line">mysql-cluster-7.6-community-source MySQL Cluster 7.6 Community - disabled</span><br><span class="line">mysql-cluster-8.0-community/x86_64 MySQL Cluster 8.0 Community   disabled</span><br><span class="line">mysql-cluster-8.0-community-source MySQL Cluster 8.0 Community - disabled</span><br><span class="line">mysql-connectors-community/x86_64  MySQL Connectors Community    enabled:    175</span><br><span class="line">mysql-connectors-community-source  MySQL Connectors Community -  disabled</span><br><span class="line">mysql-tools-community/x86_64       MySQL Tools Community         enabled:    120</span><br><span class="line">mysql-tools-community-source       MySQL Tools Community - Sourc disabled</span><br><span class="line">mysql-tools-preview/x86_64         MySQL Tools Preview           disabled</span><br><span class="line">mysql-tools-preview-source         MySQL Tools Preview - Source  disabled</span><br><span class="line">mysql55-community/x86_64           MySQL 5.5 Community Server    disabled</span><br><span class="line">mysql55-community-source           MySQL 5.5 Community Server -  disabled</span><br><span class="line">mysql56-community/x86_64           MySQL 5.6 Community Server    disabled</span><br><span class="line">mysql56-community-source           MySQL 5.6 Community Server -  disabled</span><br><span class="line">mysql57-community/x86_64           MySQL 5.7 Community Server    disabled</span><br><span class="line">mysql57-community-source           MySQL 5.7 Community Server -  disabled</span><br><span class="line">mysql80-community/x86_64           MySQL 8.0 Community Server    enabled:    211</span><br><span class="line">mysql80-community-source           MySQL 8.0 Community Server -  disabled</span><br></pre></td></tr></table></figure><h3 id="修改-mysql-yum-仓库-默认配置"><a href="#修改-mysql-yum-仓库-默认配置" class="headerlink" title="修改 mysql yum 仓库 默认配置"></a>修改 mysql yum 仓库 默认配置</h3><p>我选择安装 5.7 的版本 所以这里根据官方说明 禁掉 8.0 开启 5.7</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@iZx068ismxxjaoZ src]<span class="comment"># sudo yum-config-manager --disable mysql80-community</span></span><br><span class="line">sudo: yum-config-manager: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure><p>我的系统不支持 yum-config-manager 命令（官网也说了，如果不支持该命令可以直接去修改文件。注意：红框里说的很明白了，开启了多个版本安装的时候会安装最新的版本）</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20201117192920331.png" alt="image-20201117192920331"></p><p>修改完后再匹配查询下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@iZx068ismxxjaoZ src]<span class="comment">#  yum repolist enabled | grep mysql</span></span><br><span class="line">mysql-connectors-community/x86_64 MySQL Connectors Community                 175</span><br><span class="line">mysql-tools-community/x86_64      MySQL Tools Community                      120</span><br><span class="line">mysql57-community/x86_64          MySQL 5.7 Community Server                 464</span><br></pre></td></tr></table></figure><h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install mysql-community-server</span><br><span class="line"><span class="comment">#过程中提示 是否下载 按 y 确定</span></span><br></pre></td></tr></table></figure><p>安装完成！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Installed:</span><br><span class="line">  mysql-community-libs.x86_64 0:5.7.32-1.el7        mysql-community-libs-compat.x86_64 0:5.7.32-1.el7        mysql-community-server.x86_64 0:5.7.32-1.el7       </span><br><span class="line"></span><br><span class="line">Dependency Installed:</span><br><span class="line">  libaio.x86_64 0:0.3.109-13.el7              mysql-community-client.x86_64 0:5.7.32-1.el7              mysql-community-common.x86_64 0:5.7.32-1.el7             </span><br><span class="line"></span><br><span class="line">Replaced:</span><br><span class="line">  mariadb-libs.x86_64 1:5.5.65-1.el7                                                                                                                              </span><br><span class="line"></span><br><span class="line">Complete!</span><br><span class="line">[root@iZx068ismxxjaoZ src]<span class="comment">#</span></span><br></pre></td></tr></table></figure><h3 id="启动mysql"><a href="#启动mysql" class="headerlink" title="启动mysql"></a>启动mysql</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld.service</span><br></pre></td></tr></table></figure><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20201117193807767.png" alt="官网说明"></p><h3 id="查看密码"><a href="#查看密码" class="headerlink" title="查看密码"></a>查看密码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@iZx068ismxxjaoZ src]<span class="comment"># grep 'temporary password' /var/log/mysqld.log</span></span><br><span class="line">2020-11-17T11:45:46.549571Z 1 [Note] A temporary password is generated <span class="keyword">for</span> root@localhost: ;LdxZgpZe76H</span><br></pre></td></tr></table></figure><h3 id="登录并修改密码"><a href="#登录并修改密码" class="headerlink" title="登录并修改密码"></a>登录并修改密码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line"><span class="comment"># 输入密码的时候 大写的字母我用 大写开关 失败。 然后 用 shift + 字母  的方式输入大写才成功</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER USER <span class="string">'root'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'new password'</span></span><br><span class="line">    -&gt; ;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><h3 id="开启远程访问"><a href="#开启远程访问" class="headerlink" title="开启远程访问"></a>开启远程访问</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; grant all privileges on *.* to <span class="string">'root'</span>@<span class="string">'%'</span> identified by <span class="string">'password'</span> with grant option;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><p>刷新</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; flush privileges; </span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="修改字符集"><a href="#修改字符集" class="headerlink" title="修改字符集"></a>修改字符集</h3><h4 id="查看默认字符集"><a href="#查看默认字符集" class="headerlink" title="查看默认字符集"></a>查看默认字符集</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; status;</span><br><span class="line">--------------</span><br><span class="line">mysql  Ver 14.14 Distrib 5.7.32, <span class="keyword">for</span> Linux (x86_64) using  EditLine wrapper</span><br><span class="line"></span><br><span class="line">Connection id:15</span><br><span class="line">Current database:</span><br><span class="line">Current user:root@localhost</span><br><span class="line">SSL:Not <span class="keyword">in</span> use</span><br><span class="line">Current pager:stdout</span><br><span class="line">Using outfile:<span class="string">''</span></span><br><span class="line">Using delimiter:;</span><br><span class="line">Server version:5.7.32 MySQL Community Server (GPL)</span><br><span class="line">Protocol version:10</span><br><span class="line">Connection:Localhost via UNIX socket</span><br><span class="line">Server characterset:latin1</span><br><span class="line">Db     characterset:latin1</span><br><span class="line">Client characterset:utf8</span><br><span class="line">Conn.  characterset:utf8</span><br><span class="line">UNIX socket:/var/lib/mysql/mysql.sock</span><br><span class="line">Uptime:38 min 44 sec</span><br><span class="line"></span><br><span class="line">Threads: 2  Questions: 18  Slow queries: 0  Opens: 114  Flush tables: 1  Open tables: 107  Queries per second avg: 0.007</span><br><span class="line">--------------</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><h4 id="修改字符集-1"><a href="#修改字符集-1" class="headerlink" title="修改字符集"></a>修改字符集</h4><p>停止 mysql   ：systemctl stop mysqld.service</p><p>编辑文件：vim /etc/my.cnf    加入四行</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20201117203429665.png" alt="image-20201117203429665"></p><p>保存 my.cnf 后重启 MySQL ：systemctl start mysqld.service</p><p>再次登录 mysql 查看状态</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20201117203842429.png" alt="image-20201117203842429"></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/myblog/hello-world/"/>
      <url>/myblog/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><p>test video</p><p><a href="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200501173500627.png" target="_blank" rel="noopener">https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200501173500627.png</a></p><p><video src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/bandicam 2019-09-30 12-07-11-599.mp4" controls="controls"></video></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>微服务之存储</title>
      <link href="/myblog/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B9%8B%E5%AD%98%E5%82%A8/"/>
      <url>/myblog/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B9%8B%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><blockquote><p>在微服务架构下，推荐每个服务都有自己独立的数据库、缓存、搜索等，这样做的优点是能够让服务之间的耦合度降低，同时可以让不同的服务根据不同的业务需求选择自己合适的存储方式。搜索服务可以用 Elasticsearch，日志服务可以用 Mongodb，业务数据可以用 MYSQL 。缺点就是对于事务的处理比较麻。所以我们尽量避免分布式事务，采用合理的设计。</p><p align="right">——《spring cloud 微服务 入门、进阶与实战》<p></blockquote><h3 id="存储选型"><a href="#存储选型" class="headerlink" title="存储选型"></a>存储选型</h3><blockquote><p>关于数据库的选择每个公司都不太一样，说说我的选择吧。业务数据肯定是用 MYSQL，如果资金允许也可以用 Oracle；搜索服务用 Elasticsearch来构建；大数据量的基础数据，采用 Mongodb存储，缓存用 Redis 即可。一个中小型的互联网公司用这些组件基本上就足够了。微服务的好处在这里就体现出来了，每个服务都可以根据自己的业务选择最合适的存储方式。</p><p align="right">——《spring cloud 微服务 入门、进阶与实战》<p></blockquote><h3 id="Mongodb"><a href="#Mongodb" class="headerlink" title="Mongodb"></a>Mongodb</h3><h4 id="集成-Spring-Data-Mongodb"><a href="#集成-Spring-Data-Mongodb" class="headerlink" title="集成 Spring Data Mongodb"></a>集成 Spring Data Mongodb</h4><ul><li>在 spring boot 中集成 mongodb 只需要加入对应的 starter 就可以了，非常方便。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置数据源 </li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mongodb</span></span><br><span class="line"><span class="meta">spring.data.mongodb.database</span>=<span class="string">test</span></span><br><span class="line"><span class="meta">spring.data.mongodb.host</span>=<span class="string">localhost</span></span><br><span class="line"><span class="meta">spring.data.mongodb.port</span>=<span class="string">27017</span></span><br><span class="line"><span class="comment">#spring.data.mongodb.username=xxx</span></span><br><span class="line"><span class="comment">#spring.data.mongodb.password=xxx</span></span><br></pre></td></tr></table></figure><h4 id="添加数据操作"><a href="#添加数据操作" class="headerlink" title="添加数据操作"></a>添加数据操作</h4><a id="more"></a><ul><li>准备实体对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Document 注解标识是一个文档，等同于Mysql 中的表，collection 值表示 Mongodb</span></span><br><span class="line"><span class="comment"> *  中的集合名称，不写的话默认为实体类名</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Document</span>(collection = <span class="string">"article_info"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Field</span>(<span class="string">"id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字段标识，可自定义存入数据库的 字段名（也就是 key 名）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Field</span>(<span class="string">"title"</span>)</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field</span>(<span class="string">"url"</span>)</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field</span>(<span class="string">"author"</span>)</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field</span>(<span class="string">"tags"</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; tags;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field</span>(<span class="string">"visit_count"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long visitCount;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field</span>(<span class="string">"add_time"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date addTime;</span><br><span class="line">  <span class="comment">//省略 set get 方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>控制器 测试代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">  MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/batchSave"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">batchSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 批量添加</span></span><br><span class="line">      List&lt;Article&gt; articles = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">          Article article = <span class="keyword">new</span> Article();</span><br><span class="line">          article.setTitle(<span class="string">"MongoTemplate 的基本使用 "</span>);</span><br><span class="line">          article.setAuthor(<span class="string">"wuzhiyong"</span>);</span><br><span class="line">          article.setUrl(<span class="string">"http://wu-zy.com/blog/"</span> + i);</span><br><span class="line">          article.setTags(Arrays.asList(<span class="string">"java"</span>, <span class="string">"mongodb"</span>, <span class="string">"spring"</span>));</span><br><span class="line">          article.setVisitCount(<span class="number">0L</span>);</span><br><span class="line">          article.setAddTime(<span class="keyword">new</span> Date());</span><br><span class="line">          article.setId(Long.parseLong(i+<span class="string">""</span>));</span><br><span class="line">          articles.add(article);</span><br><span class="line">      &#125;</span><br><span class="line">      mongoTemplate.insert(articles, Article<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>运行项目访问接口：数据库已成功添加了</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200519113141558.png" alt="image-20200519113141558"></p><h4 id="修改数据操作"><a href="#修改数据操作" class="headerlink" title="修改数据操作"></a>修改数据操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/update"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UpdateResult result = <span class="keyword">null</span>;</span><br><span class="line">                Query query = Query.query(Criteria.where(<span class="string">"author"</span>).is(<span class="string">"wuzhiyong"</span>));</span><br><span class="line">        Update update = Update.update(<span class="string">"title"</span>, <span class="string">"MongoTemplate"</span>)</span><br><span class="line">                .set(<span class="string">"visitCount"</span>, <span class="number">10</span>);</span><br><span class="line">      <span class="comment">//更新 一条 数据</span></span><br><span class="line">        result = mongoTemplate.updateFirst(query, update, Article<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        query = Query.query(Criteria.where(<span class="string">"author"</span>).is(<span class="string">"wuzhiyong"</span>));</span><br><span class="line">        update = Update.update(<span class="string">"title"</span>, <span class="string">"MongoTemplate"</span>).set(<span class="string">"visitCount"</span>, <span class="number">10</span>);</span><br><span class="line">      <span class="comment">//源码中实际上调用的方法为</span></span><br><span class="line">      <span class="comment">//doUpdate(getCollectionName(entityClass), query, update, entityClass, false, true);</span></span><br><span class="line">        <span class="comment">//最后面两个参数 final boolean upsert, final boolean multi</span></span><br><span class="line">      <span class="comment">//upsert true 表示如果找数据就更新，否则 插入一条数据 </span></span><br><span class="line">      <span class="comment">//multi true 则修改所有符合条件的行，否则只修改第一条符合条件的行。</span></span><br><span class="line">      result = mongoTemplate.updateMulti(query, update, Article<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        query = Query.query(Criteria.where(<span class="string">"author"</span>).is(<span class="string">"jason"</span>));</span><br><span class="line">        update = Update.update(<span class="string">"title"</span>, <span class="string">"MongoTemplate"</span>).set(<span class="string">"visitCount"</span>, <span class="number">10</span>);</span><br><span class="line">      <span class="comment">//有就更新 没有就插入一条</span></span><br><span class="line">        result = mongoTemplate.upsert(query, update, Article<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        query = Query.query(Criteria.where(<span class="string">"author"</span>).is(<span class="string">"jason"</span>));</span><br><span class="line">        update = Update.update(<span class="string">"title"</span>, <span class="string">"MongoTemplate"</span>).set(<span class="string">"money"</span>, <span class="number">100</span>);</span><br><span class="line">        result = mongoTemplate.updateMulti(query, update, Article<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        query = Query.query(Criteria.where(<span class="string">"author"</span>).is(<span class="string">"jason"</span>));</span><br><span class="line">        update = Update.update(<span class="string">"title"</span>, <span class="string">"MongoTemplate"</span>)</span><br><span class="line">          .inc(<span class="string">"money"</span>, <span class="number">100</span>); <span class="comment">//算数操作  + 100</span></span><br><span class="line">        result = mongoTemplate.updateMulti(query, update, Article<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        query = Query.query(Criteria.where(<span class="string">"author"</span>).is(<span class="string">"jason"</span>));</span><br><span class="line">        update = Update.update(<span class="string">"title"</span>, <span class="string">"MongoTemplate"</span>)</span><br><span class="line">                .rename(<span class="string">"visitCount"</span>, <span class="string">"vc"</span>);<span class="comment">//更新列名，</span></span><br><span class="line">        result = mongoTemplate.updateMulti(query, update, Article<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        query = Query.query(Criteria.where(<span class="string">"author"</span>).is(<span class="string">"jason"</span>));</span><br><span class="line">        update = Update.update(<span class="string">"title"</span>, <span class="string">"MongoTemplate"</span>)</span><br><span class="line">          .unset(<span class="string">"vc"</span>);<span class="comment">//删除列 vc </span></span><br><span class="line">        result = mongoTemplate.updateMulti(query, update, Article<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        query = Query.query(Criteria.where(<span class="string">"author"</span>).is(<span class="string">"wuzhiyong"</span>));</span><br><span class="line">        update = Update.update(<span class="string">"title"</span>, <span class="string">"MongoTemplate"</span>)</span><br><span class="line">          .pull(<span class="string">"tags"</span>, <span class="string">"java"</span>);<span class="comment">//删除 tags 数组里的 ‘Java’</span></span><br><span class="line">        result = mongoTemplate.updateMulti(query, update, Article<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="删除数据操作"><a href="#删除数据操作" class="headerlink" title="删除数据操作"></a>删除数据操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/delete"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       DeleteResult result = <span class="keyword">null</span>;</span><br><span class="line">       Query query = Query.query(Criteria.where(<span class="string">"author"</span>).is(<span class="string">"wuzhiyong"</span>));</span><br><span class="line">     <span class="comment">//通过 类 删除</span></span><br><span class="line">       result = mongoTemplate.remove(query, Article<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">       query = Query.query(Criteria.where(<span class="string">"author"</span>).is(<span class="string">"wuzhiyong"</span>));</span><br><span class="line">     <span class="comment">//通过表名 删除</span></span><br><span class="line">       result = mongoTemplate.remove(query, <span class="string">"article_info"</span>);</span><br><span class="line"></span><br><span class="line">       query = Query.query(Criteria.where(<span class="string">"author"</span>).is(<span class="string">"wuzhiyong"</span>));</span><br><span class="line">     <span class="comment">//查出数据并删除一条</span></span><br><span class="line">       Article article = mongoTemplate.findAndRemove(query, Article<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">       query = Query.query(Criteria.where(<span class="string">"author"</span>).is(<span class="string">"wuzhiyong"</span>));</span><br><span class="line">     <span class="comment">//查出数据并删除多条</span></span><br><span class="line">       List&lt;Article&gt; articles =</span><br><span class="line">               mongoTemplate.findAllAndRemove(query, Article<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//删除 表（集合）</span></span><br><span class="line">       mongoTemplate.dropCollection(Article<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">       mongoTemplate.dropCollection(<span class="string">"article_info"</span>);</span><br><span class="line"><span class="comment">//删除库</span></span><br><span class="line">       mongoTemplate.getDb().drop();</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"success"</span>;</span><br></pre></td></tr></table></figure><h4 id="查询数据操作"><a href="#查询数据操作" class="headerlink" title="查询数据操作"></a>查询数据操作</h4><ul><li>mongoTemplate 查询</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/query"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       Query query = Query.query(Criteria.where(<span class="string">"author"</span>).is(<span class="string">"wuzhiyong"</span>));</span><br><span class="line">     <span class="comment">//条件查询</span></span><br><span class="line">       List&lt;Article&gt; articles = mongoTemplate.find(query, Article<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">       query = Query.query(Criteria.where(<span class="string">"author"</span>).is(<span class="string">"wuzhiyong"</span>));</span><br><span class="line">     <span class="comment">//查询一条</span></span><br><span class="line">       Article article = mongoTemplate.findOne(query, Article<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">     <span class="comment">//查询所有</span></span><br><span class="line">       articles = mongoTemplate.findAll(Article<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">       query = Query.query(Criteria.where(<span class="string">"author"</span>).is(<span class="string">"wuzhiyong"</span>));</span><br><span class="line">     <span class="comment">//查询 count</span></span><br><span class="line">       <span class="keyword">long</span> count = mongoTemplate.count(query, Article<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">// 通过id 查询</span></span><br><span class="line">       article = mongoTemplate.findById(<span class="keyword">new</span> ObjectId(<span class="string">"5ec3511ea4a66f76d84a412e"</span>), Article<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">       List&lt;String&gt; authors = Arrays.asList(<span class="string">"wuzhiyong"</span>, <span class="string">"jason"</span>);</span><br><span class="line">       query = Query.query(Criteria.where(<span class="string">"author"</span>).in(authors));</span><br><span class="line">     <span class="comment">// where in 查询</span></span><br><span class="line">       articles = mongoTemplate.find(query, Article<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">       query = Query.query(Criteria.where(<span class="string">"author"</span>)</span><br><span class="line">                           .ne(<span class="string">"wuzhiyong"</span>));<span class="comment">// 不等与  </span></span><br><span class="line">       articles = mongoTemplate.find(query, Article<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">       query = Query.query(Criteria.where(<span class="string">"visitCount"</span>)</span><br><span class="line">                           .lt(<span class="number">10</span>)); <span class="comment">//小于</span></span><br><span class="line">       articles = mongoTemplate.find(query, Article<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">       query = Query.query(Criteria.where(<span class="string">"visitCount"</span>)</span><br><span class="line">                           .gt(<span class="number">5</span>).lt(<span class="number">10</span>));<span class="comment">//大于5 且 小于 10</span></span><br><span class="line">       articles = mongoTemplate.find(query, Article<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">       query = Query.query(Criteria.where(<span class="string">"author"</span>)</span><br><span class="line">                           .regex(<span class="string">"a"</span>));<span class="comment">//模糊查询 相当于 like  可传 正侧</span></span><br><span class="line">       articles = mongoTemplate.find(query, Article<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">       query = Query.query(Criteria.where(<span class="string">"tags"</span>).size(<span class="number">3</span>));<span class="comment">// tags 数组为 3 的</span></span><br><span class="line">       articles = mongoTemplate.find(query, Article<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">       query = Query.query(Criteria.where(<span class="string">""</span>)</span><br><span class="line">                           <span class="comment">// or 逻辑条件查询。</span></span><br><span class="line">                           .orOperator( Criteria.where(<span class="string">"author"</span>).is(<span class="string">"jason"</span>), Criteria.where(<span class="string">"visitCount"</span>).is(<span class="number">0</span>)));</span><br><span class="line">       articles = mongoTemplate.find(query, Article<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>spring data 框架查询</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span>(<span class="string">"ArticleRepositor"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleRepositor</span> <span class="keyword">extends</span> <span class="title">PagingAndSortingRepository</span>&lt;<span class="title">Article</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/** 分页查询*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Page&lt;Article&gt; <span class="title">findAll</span><span class="params">(Pageable pageable)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据 author 查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Article&gt; <span class="title">findByAuthor</span><span class="params">(String author)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据作者和标题查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Article&gt; <span class="title">findByAuthorAndTitle</span><span class="params">(String author, String title)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 忽略参数大小写</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Article&gt; <span class="title">findByAuthorIgnoreCase</span><span class="params">(String author)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 忽略所有参数大小写</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Article&gt; <span class="title">findByAuthorAndTitleAllIgnoreCase</span><span class="params">(String author, String title)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 排序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Article&gt; <span class="title">findByAuthorOrderByVisitCountDesc</span><span class="params">(String author)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Article&gt; <span class="title">findByAuthorOrderByVisitCountAsc</span><span class="params">(String author)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自带排序条件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Article&gt; <span class="title">findByAuthor</span><span class="params">(String author, Sort sort)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><p>要给某个字段加索引就在字段上面加上 @Index 注解，里面可以填写对应的参数，在插入数据的时候，框架会自动根据配置的注解创建对应的索引。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Document</span></span><br><span class="line"><span class="meta">@CompoundIndexes</span>(&#123;</span><br><span class="line">        <span class="meta">@CompoundIndex</span>(name = <span class="string">"city_region_idx"</span>, def = <span class="string">"&#123;'city': 1, 'region': 1&#125;"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Indexed</span>(unique = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Indexed</span>(background = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String region;</span><br><span class="line">  <span class="comment">//省略 set get。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@CompoundIndexes 组合索引声明，内可以包含多个 @CompoundIndex</li><li>@CompoundIndex 组合索引 <ul><li>name 索引的名称。如果未指定，MongoDB的通过连接索引的字段名和排序顺序生成一个索引名称。</li><li>def = “{‘city’: 1, ‘region’: 1}”  定义：city与region组合， 1 表示顺序。 -1 表示倒序。</li></ul></li><li>@Indexed 普通索引  <ul><li>unique = true 建立的索引是否唯一。指定为true创建唯一索引。默认值为 false.</li><li>建索引过程会阻塞其它数据库操作，background可指定以后台方式创建索引，即增加 “background” 可选参数。 “background” 默认值为 false。</li></ul></li></ul><hr><p>未完待续。。。</p><hr><p>参考：</p><p><a href="https://github.com/yinjihuan/spring-cloud/tree/a5a963ebf8c99cf78f9f44a9940955661525957b/Spring-Cloud-Book-Code-2/ch-17/mongodb" target="_blank" rel="noopener">《spring cloud 微服务 入门、进阶与实战》</a></p><p><a href="https://www.runoob.com/mongodb/mongodb-tutorial.html" target="_blank" rel="noopener">菜鸟教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> java </tag>
            
            <tag> spring cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud 之 Admin-微服务监控</title>
      <link href="/myblog/Spring-Cloud-%E4%B9%8B-Admin-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7/"/>
      <url>/myblog/Spring-Cloud-%E4%B9%8B-Admin-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="admin-server"><a href="#admin-server" class="headerlink" title="admin server"></a>admin server</h3><ul><li>建立一个 spring boot 项目并添加 admin 依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>启动类加上注解：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAdminServer</span><span class="comment">//开启 admin server</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringcloudAdminServiceApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringcloudAdminServiceApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>端口：</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8091</span></span><br></pre></td></tr></table></figure><p>启动项目 访问：<a href="http://localhost:8091/" target="_blank" rel="noopener">http://localhost:8091/</a></p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200517230826809.png" alt="image-20200517230826809"></p><h3 id="admin-client"><a href="#admin-client" class="headerlink" title="admin client"></a><a id="more"></a>admin client</h3><p>再新建一个 spring boot 项目</p><ul><li>依赖：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8092</span></span><br><span class="line"><span class="comment"># 指向 admin server 的地址</span></span><br><span class="line"><span class="meta">spring.boot.admin.client.url</span>=<span class="string">http://localhost:8091</span></span><br></pre></td></tr></table></figure><p>启动 client 项目。后访问：<a href="http://localhost:8091/" target="_blank" rel="noopener">http://localhost:8091/</a></p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200517231310927.png" alt="image-20200517231310927"></p><p>已经发现了一个应用了</p><p>点击应用可看到简单的信息。</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200517231536152.png" alt="image-20200517231536152"></p><p>在配置中 暴露 所有端点重启后再次访问：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#暴露所有端点</span></span><br><span class="line"><span class="meta">management.endpoints.web.exposure.include</span>=<span class="string">*</span></span><br></pre></td></tr></table></figure><p>就可以看到更多的信息了。</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200517231837244.png" alt="image-20200517231837244"></p><h3 id="整合-Eureka-监控所有服务。"><a href="#整合-Eureka-监控所有服务。" class="headerlink" title="整合 Eureka 监控所有服务。"></a>整合 Eureka 监控所有服务。</h3><p>在 admin-server 项目中添加 Eureka client 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">// 如果想同时监控自己的信息 添加 actuator 并暴露所有端点</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8091</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">spring-cloud-admin-service</span></span><br><span class="line"><span class="comment">#配置中心集群 地址</span></span><br><span class="line"><span class="meta">eureka.client.serviceUrl.defaultZone</span>=<span class="string">http://WuZhiYong:123456@localhost:8761/eureka/,http://WuZhiYong:123456@localhost:8762/eureka/</span></span><br><span class="line"><span class="comment">#采用IP注册</span></span><br><span class="line"><span class="meta">eureka.instance.prefer-ip-address</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#定义实例ID格式</span></span><br><span class="line"><span class="meta">eureka.instance.instance-id</span>=<span class="string">$&#123;spring.application.name&#125;:$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span></span><br><span class="line"><span class="comment">#暴露所有端点</span></span><br><span class="line"><span class="meta">management.endpoints.web.exposure.include</span>=<span class="string">*</span></span><br></pre></td></tr></table></figure><p>启动注册中心并把一些服务注册到注册中心里。（重启所有项目）</p><p>访问 ：<a href="http://localhost:8091/" target="_blank" rel="noopener">http://localhost:8091/</a> 点击应用墙可看到多个服务的实例</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200517234245135.png" alt="image-20200517234245135"></p><p>点击实例就可以看到每个实例的监控信息了</p><h3 id="配置查看各个服务的日志"><a href="#配置查看各个服务的日志" class="headerlink" title="配置查看各个服务的日志"></a>配置查看各个服务的日志</h3><ul><li>例如一个服务 logback 配置的日志输出文件为：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_FILE"</span> <span class="attr">value</span>=<span class="string">"D:/IdeaProjects/spring-cloud-study/springcloud-hystrix/sleuth-user-service.log"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>那么我在配置文件中加入：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">logging.file</span>=<span class="string">D:/IdeaProjects/spring-cloud-study/springcloud-hystrix/sleuth-user-service.log</span></span><br><span class="line"><span class="meta">logging.pattern.file</span>=<span class="string">%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;faint&#125; %clr(%5p) %clr($&#123;PID&#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n%wEx</span></span><br></pre></td></tr></table></figure><p>重启服务,并打开 admin 中该服务的监控信息：即可看到实时日志。</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200518214301403.png" alt="image-20200518214301403"></p><p>同时在这里可控制日志每个类的级别</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200518214714220.png" alt="image-20200518214714220"></p><h3 id="开启认证"><a href="#开启认证" class="headerlink" title="开启认证"></a>开启认证</h3><p>在实际生产环境中，对服务的监控，自然是通过认证的才能够访问的。</p><ul><li>添加依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加 web 依赖 是因为，security 是基于 filter 的。而 filter 需要 web 依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置用户名和密码</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.security.user.name</span>=<span class="string">wuzhiyong</span></span><br><span class="line"><span class="meta">spring.security.user.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><ul><li>配置 config</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringSecurityCustomConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">                <span class="comment">//关闭 CSRF 保护（如果不关闭  访问logoutUrl 必须为post方式  见源码注释）</span></span><br><span class="line">                .csrf().disable()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">          </span><br><span class="line">                <span class="comment">//允许匿名访问</span></span><br><span class="line">          <span class="comment">//若不放行 actuator 那么监控里看到自己是下线的。</span></span><br><span class="line">                .antMatchers(<span class="string">"/actuator/**"</span>).permitAll()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .and()</span><br><span class="line">                .httpBasic()</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置好后 启动。</li></ul><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200518215607010.png" alt="image-20200518215607010"></p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200518222020519.png" alt="image-20200518222020519"></p><p>《spring cloud 微服务 入门、进阶与实战》书中说。监控的服务中需要配置上与 admin 对应的用户名和密码，否则会注册失败。我这里尝试不配置重启后发现也是可以的。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.boot.admin.client.username</span>=<span class="string">wuzhiyong</span></span><br><span class="line"><span class="meta">spring.boot.admin.client.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><h3 id="邮件警报"><a href="#邮件警报" class="headerlink" title="邮件警报"></a>邮件警报</h3><ul><li>添加依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置邮箱服务</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#邮件</span></span><br><span class="line"><span class="meta">spring.mail.host</span>=<span class="string">smtp.qq.com</span></span><br><span class="line"><span class="meta">spring.mail.username</span>=<span class="string">563653092@qq.com</span></span><br><span class="line"><span class="meta">spring.mail.password</span>= <span class="string">&lt;&lt; 你的邮箱授权码 &gt;&gt;</span></span><br><span class="line"><span class="meta">spring.mail.properties.mail.smtp.auth</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.mail.properties.mail.smtp.starttls.enable</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.mail.properties.mail.smtp.starttls.required</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 发送给谁</span></span><br><span class="line"><span class="meta">spring.boot.admin.notify.mail.to</span>=<span class="string">563653092@qq.com</span></span><br><span class="line"><span class="comment"># 是谁发送出去的</span></span><br><span class="line"><span class="meta">spring.boot.admin.notify.mail.from</span>=<span class="string">563653092@qq.com</span></span><br></pre></td></tr></table></figure><p>保存后重启 admin 。然后我们停掉一台服务。收到的邮件如下：</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200518225619623.png" alt="image-20200518225619623"></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> java </tag>
            
            <tag> Admin </tag>
            
            <tag> spring cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务跟踪Sleuth</title>
      <link href="/myblog/%E6%9C%8D%E5%8A%A1%E8%B7%9F%E8%B8%AASleuth/"/>
      <url>/myblog/%E6%9C%8D%E5%8A%A1%E8%B7%9F%E8%B8%AASleuth/</url>
      
        <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><blockquote><p>在微服务架构下，服务之间的调用关系越来越复杂，通过 Zuul 转发到具体的业务接 ，一个接口中会涉及多个微服务的交互，只要其中某个服务出现问题，整个请求都将失败。这个时候我们要想快速定位到问题所在，就需要用到链路跟踪了。每个请求都是一条完整的调用链，通过调用链我们可以清楚地知道这个请求经过了哪些服务，在哪个服务上耗时多长时间，进而达到快速定位问题的目的。</p><p>为了解决上面提到的问题， Spring Cloud Sleuth为我们提供了完整的解决方案。本章我们将学习如何使用 Spring Cloud Sleuth来构建分布式链路跟踪功能。</p><p align="right">——《spring cloud 微服务 入门、进阶与实战》第197页<p></blockquote><p>Sleuth 官网：<a href="https://spring.io/projects/spring-cloud-sleuth#overview" target="_blank" rel="noopener">https://spring.io/projects/spring-cloud-sleuth#overview</a></p><h3 id="spring-cloud-集成-Sleuth"><a href="#spring-cloud-集成-Sleuth" class="headerlink" title="spring cloud 集成 Sleuth"></a>spring cloud 集成 Sleuth</h3><ul><li>给调用链中所有服务加上依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-sleuth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>代码中打印日志：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.info(<span class="string">"method call/hello be called....."</span>);</span><br></pre></td></tr></table></figure><ul><li>调用接口：A 服务 调用 B 服务的接口<a id="more"></a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> A 服务日志 ：</span></span><br><span class="line">2020-05-13 15:33:04.439  INFO [spring-cloud-hystrix,f764aae854c0d690,f764aae854c0d690,false] 20316 --- [nio-8087-exec-1] com.study.controller.Controller          : method call/hello be called.....</span><br><span class="line"><span class="meta">#</span><span class="bash"> B 服务日志 :</span></span><br><span class="line">2020-05-13 15:33:04.704  INFO [eureka-client-service,f764aae854c0d690,6569e6c4685070be,false] 22164 --- [nio-8081-exec-1] c.s.s.controller.UserController          : method be called....</span><br></pre></td></tr></table></figure><p>注意服务日志中的这段：</p><p>[spring-cloud-hystrix,f764aae854c0d690,f764aae854c0d690,false] </p><p>这里会记录每个服务的 名称 ，编号（trace），编号（span），是否导入数据到 Zipki 中，A 服务调用 B 服务，那么 A 服务的编号（span）就对应 B 服务的编号（trace）。以此来跟踪整个调用链路。</p><h3 id="整合-LogStash"><a href="#整合-LogStash" class="headerlink" title="整合 LogStash"></a>整合 LogStash</h3><p>首先</p><h4 id="格式化日志的输出格式为-json"><a href="#格式化日志的输出格式为-json" class="headerlink" title="格式化日志的输出格式为 json"></a>格式化日志的输出格式为 json</h4><p>pom 添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 输出 Json 格式日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.logstash.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logstash-logback-encoder<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 resources 下建立 logback-spring.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/defaults.xml"</span>/&gt;</span></span><br><span class="line">    ​</span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"springAppName"</span> <span class="attr">source</span>=<span class="string">"spring.application.name"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Example for logging into the build folder of your project --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;property name="LOG_FILE" value="/Users/yinjihuan/Downloads/sleuth-user-service.log"/&gt;​--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_FILE"</span> <span class="attr">value</span>=<span class="string">"D:/IdeaProjects/spring-cloud-study/springcloud-hystrix/sleuth-user-service.log"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- You can override this to have a custom pattern --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"CONSOLE_LOG_PATTERN"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">value</span>=<span class="string">"%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Appender to log to console --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"console"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.ThresholdFilter"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Minimum logging level to be presented in the console logs--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>utf8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Appender to log to file --&gt;</span>​</span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"flatfile"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_FILE&#125;<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_FILE&#125;.%d&#123;yyyy-MM-dd&#125;<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>7<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>utf8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    ​</span><br><span class="line">    <span class="comment">&lt;!-- Appender to log to file in a JSON format--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"logstash"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_FILE&#125;.json<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_FILE&#125;.json.%d&#123;yyyy-MM-dd&#125;.gz<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>7<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">providers</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">timestamp</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">timeZone</span>&gt;</span>UTC<span class="tag">&lt;/<span class="name">timeZone</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">timestamp</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">                        &#123;</span><br><span class="line">                        "severity": "%level",</span><br><span class="line">                        "service": "$&#123;springAppName:-&#125;",</span><br><span class="line">                        "trace": "%X&#123;X-B3-TraceId:-&#125;",</span><br><span class="line">                        "span": "%X&#123;X-B3-SpanId:-&#125;",</span><br><span class="line">                        "parent": "%X&#123;X-B3-ParentSpanId:-&#125;",</span><br><span class="line">                        "exportable": "%X&#123;X-Span-Export:-&#125;",</span><br><span class="line">                        "pid": "$&#123;PID:-&#125;",</span><br><span class="line">                        "thread": "%thread",</span><br><span class="line">                        "class": "%logger&#123;40&#125;",</span><br><span class="line">                        "rest": "%message"</span><br><span class="line">                        &#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">providers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    ​</span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- uncomment this to have also JSON logs--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"logstash"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"flatfile"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>请求接口让日志文件中记录下调用链的信息。</p><h4 id="使用ELK查询服务调用链"><a href="#使用ELK查询服务调用链" class="headerlink" title="使用ELK查询服务调用链"></a>使用ELK查询服务调用链</h4><blockquote><p>ELK是Elasticsearch、Logstash、Kibana三大开源框架首字母大写简称。市面上也被成为Elastic Stack。其中 Elasticsearch 是一个基于Lucene、分布式、通过 Restful 方式进行交互的近实时搜索平台框架。像类似百度、谷歌这种大数据全文搜索引擎的场景都可以使用 Elasticsearch 作为底层支持框架，可见Elasticsearch 提供的搜索能力确实强大,市面上很多时候我们简称 Elasticsearch 为 ES 。Logstash是 ELK的中央数据流引擎，用于从不同目标（文件/数据存储/MQ）收集的不同格式数据，经过过滤后支持输出到不同目的地（文件/MQ/redis/elasticsearch/kafka等）。Kibana可以将elasticsearch的数据通过友好的页面展示出来，提供实时分析的功能。</p><p align="right">—— <a href="https://www.jianshu.com/p/d66bfe7e9127" target="_blank" rel="noopener">laizhiy的简书</a><p></blockquote><p>下载 elasticsearch 和 kibana  地址：<a href="https://www.elastic.co/cn/start" target="_blank" rel="noopener">https://www.elastic.co/cn/start</a></p><p>下载 logstash 地址：<a href="https://www.elastic.co/cn/downloads/logstash" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/logstash</a></p><p>下载后解压：注意不要放在中文目录下，不然 logstash 会启动报错</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200513205655908.png" alt="image-20200513205655908"></p><ul><li>在 elasticsearch 解压的 bin 目录下双击执行 elasticsearch.bat 。后在浏览器访问   <a href="http://localhost:9200/" target="_blank" rel="noopener">http://localhost:9200/</a>  出现类似如下内容 说明启动成功！</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span> : <span class="string">"DESKTOP-SAUA6M1"</span>,</span><br><span class="line">  <span class="attr">"cluster_name"</span> : <span class="string">"elasticsearch"</span>,</span><br><span class="line">  <span class="attr">"cluster_uuid"</span> : <span class="string">"M-ZSPWU8SZyFqB2DWvqX2g"</span>,</span><br><span class="line">  <span class="attr">"version"</span> : &#123;</span><br><span class="line">    <span class="attr">"number"</span> : <span class="string">"7.6.2"</span>,</span><br><span class="line">    <span class="attr">"build_flavor"</span> : <span class="string">"default"</span>,</span><br><span class="line">    <span class="attr">"build_type"</span> : <span class="string">"zip"</span>,</span><br><span class="line">    <span class="attr">"build_hash"</span> : <span class="string">"ef48eb35cf30adf4db14086e8aabd07ef6fb113f"</span>,</span><br><span class="line">    <span class="attr">"build_date"</span> : <span class="string">"2020-03-26T06:34:37.794943Z"</span>,</span><br><span class="line">    <span class="attr">"build_snapshot"</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"lucene_version"</span> : <span class="string">"8.4.0"</span>,</span><br><span class="line">    <span class="attr">"minimum_wire_compatibility_version"</span> : <span class="string">"6.8.0"</span>,</span><br><span class="line">    <span class="attr">"minimum_index_compatibility_version"</span> : <span class="string">"6.0.0-beta1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编辑 logstash 目录 -&gt; config -&gt; logstash-sample.conf 文件</li></ul><p>意思就是 读取 input 的内容 通过 output 发送到  elasticsearch 。我这里 是把 springcloud-eureka-server-consumer，springcloud-eureka-server-provider 作为集群，提供给 springcloud-hystrix 来调用。所以我这里读取三个 json 日志文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">file &#123;</span><br><span class="line">path =&gt; ["D:/IdeaProjects/spring-cloud-study/springcloud-eureka-server-consumer/sleuth-user-service.log.json",</span><br><span class="line">"D:/IdeaProjects/spring-cloud-study/springcloud-eureka-server-provider/sleuth-user-service.log.json",</span><br><span class="line">"D:/IdeaProjects/spring-cloud-study/springcloud-hystrix/sleuth-user-service.log.json"]</span><br><span class="line"></span><br><span class="line">start_position =&gt; "beginning"</span><br><span class="line">    </span><br><span class="line">    #设置编码</span><br><span class="line">    codec =&gt; json &#123;charset =&gt; "UTF-8"&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; ["http://localhost:9200"]</span><br><span class="line">    index =&gt; "sleuth"</span><br><span class="line">    #类型</span><br><span class="line">    document_type =&gt; "json_index"</span><br><span class="line"></span><br><span class="line">    #user =&gt; "elastic"</span><br><span class="line">    #password =&gt; "changeme"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>启动 logstash 采集数据 发送到 elasticsearch </li></ul><p>在 logstash 目录 -&gt; bin  目录下 通过 gitbash (或者其它 bash 客户端 ) 执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wuzhiyong@DESKTOP-SAUA6M1 MINGW64 /d/ELK/logstash-7.6.2/bin</span><br><span class="line">$ ./logstash -f ../config/logstash-sample.conf</span><br></pre></td></tr></table></figure><p>如果出现异常： invalid byte sequence in US-ASCII  ，请检查你路径中不能有中文。</p><p>一切正常 会提示  Successfully started</p><ul><li>配置与启动 kibana  </li></ul><p>修改 kibana-7.6.2-windows-x86_64 -&gt; config 下的 kibana.yml 。解开下列属性的注释 使其生效并保存。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port:</span> <span class="number">5601</span></span><br><span class="line"><span class="attr">server.host:</span> <span class="string">"localhost"</span></span><br><span class="line"><span class="attr">server.name:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">elasticsearch.hosts:</span> <span class="string">["http://localhost:9200"]</span></span><br><span class="line"><span class="attr">kibana.index:</span> <span class="string">".kibana"</span></span><br><span class="line"><span class="attr">kibana.defaultAppId:</span> <span class="string">"home"</span></span><br></pre></td></tr></table></figure><p>双击 kibana-7.6.2-windows-x86_64   下 bin  目录下的 kibana.bat  </p><p>如果成功会有类似提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">log</span>   [09:58:01.360] [info][listening] Server running at http://localhost:5601</span><br><span class="line"><span class="built_in">log</span>   [09:58:01.529] [info][server][Kibana][http] http server running at http://localhost:5601</span><br></pre></td></tr></table></figure><h4 id="检索数据"><a href="#检索数据" class="headerlink" title="检索数据"></a>检索数据</h4><p>打开 <a href="http://localhost:5601/" target="_blank" rel="noopener">http://localhost:5601/</a></p><p>填写个  sleuth   点击 next step</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200513180017941.png" alt="image-20200513180017941"></p><p>选择 I don`t want  to ….  点击 create index pattern</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200513180113059.png" alt="image-20200513180113059"></p><p>会出现下面这个界面</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200513180142097.png" alt="image-20200513180142097"></p><p>看图：</p><p><img data-src="%E6%9C%8D%E5%8A%A1%E8%B7%9F%E8%B8%AASleuth/image-20200513213835958.png" alt="image-20200513213835958"></p><p>点击 1  就会来到这个 检索的界面。</p><p>2 的输入框输入检索的内容</p><p>3 添加需要展示的 列</p><p>4 检索按钮</p><p>5 展示框 展示数据</p><p>通过检索就可以很清楚的知道，调用链什么时间经过了哪些服务，调用了什么接口。</p><h3 id="整合-Zipkin"><a href="#整合-Zipkin" class="headerlink" title="整合 Zipkin"></a>整合 Zipkin</h3><p>Zipkin 是 twitter 开发的一个致力于收集所有服务的监控数据的分布式跟踪系统。</p><p>gitHub 地址：<a href="https://github.com/openzipkin/zipkin" target="_blank" rel="noopener">https://github.com/openzipkin/zipkin</a></p><h4 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h4><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200513233208638.png" alt="image-20200513233208638"></p><p>下到本地后执行 ：java -jar zipkin ….</p><p>spring cloud 项目添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>properties 中配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 配置 zipkin server 地址</span><br><span class="line">spring.zipkin.base-url&#x3D;http:&#x2F;&#x2F;127.0.0.1:9411</span><br><span class="line"># zipkin 抽样比例</span><br><span class="line">spring.sleuth.sampler.probability&#x3D;1.0</span><br></pre></td></tr></table></figure><p>重启项目</p><p>控制台中复制 trace id</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200513233747139.png" alt="image-20200513233747139"></p><p>浏览器访问：<a href="http://localhost:9411/zipkin/" target="_blank" rel="noopener">http://localhost:9411/zipkin/</a></p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200513233407667.png" alt="image-20200513233407667"></p><p>把 trace id 复制到 图中 1 按回车</p><p>即可查到调用链</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200513234422669.png" alt="image-20200513234422669"></p><h4 id="异步任务线程池定义"><a href="#异步任务线程池定义" class="headerlink" title="异步任务线程池定义"></a>异步任务线程池定义</h4><p>在 《spring cloud 微服务 入门、进阶与实战》书中说。我们用 @Async 开启一个异步任务后，Sleuth 会为这个调用新创建一个 span. 如果你自定义了异步任务的线程池，会导致无法新创建一个 Span 。这需要使用 Sleuth 提供的 LazyTraceAsyncTaskExecutor 来包装：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义线程池配置   部分代码</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    BeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">getAsyncExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ThreadPoolTaskExecutor executor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        executor.setCorePoolSize(config.getCorePoolSize());</span><br><span class="line">        executor.setMaxPoolSize(config.getMaxPoolSize());</span><br><span class="line">        executor.setQueueCapacity(config.getQueueCapacity());</span><br><span class="line">        executor.setKeepAliveSeconds(config.getKeepAliveSeconds());</span><br><span class="line">        executor.setThreadNamePrefix(config.getThreadNamePrefix());</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 线程池拒绝策略：如果不配置并超过了负荷会造成溢出</span></span><br><span class="line"><span class="comment">         * AbortPolicy:直接抛出异常  会丢弃任务</span></span><br><span class="line"><span class="comment">         * CallerRunsPolicy 先由主线程执行当前任务，下个任务继续交给线程池来执行</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        executor.setRejectedExecutionHandler(<span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());</span><br><span class="line">        executor.initialize();</span><br><span class="line">      <span class="comment">//使用 LazyTraceAsyncTaskExecutor 进行包装。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LazyTraceAsyncTaskExecutor(<span class="keyword">this</span>.beanFactory,executor);</span><br><span class="line"><span class="comment">//        return executor;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>测试用例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/call/hello"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">cellHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">    logger.info(<span class="string">"method call/hello be called....."</span>);</span><br><span class="line">    myservice.saveLog();<span class="comment">//异步方法</span></span><br><span class="line">    myservice.saveLog2();<span class="comment">//</span></span><br><span class="line">    <span class="keyword">return</span> userRemoteClient.hello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>已包装：</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200514111125122.png" alt="image-20200514111125122"></p><p>未包装：</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200514110947974.png" alt="image-20200514110947974"></p><h4 id="TracingFilter-自定义"><a href="#TracingFilter-自定义" class="headerlink" title="TracingFilter 自定义"></a>TracingFilter 自定义</h4><p>TracingFilter 是负责处理请求和响应的组件，我们可以通过注册自定义的 TracingFilter 实例来实现一些扩展性的需求。下例将演示如何给请求添加自定义的标记以及将请求 ID 添加到响应头返回给客户端。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order</span>(TraceWebServletAutoConfiguration.TRACING_FILTER_ORDER + <span class="number">1</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">extends</span> <span class="title">GenericFilterBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Tracer tracer;</span><br><span class="line"></span><br><span class="line">    MyFilter(Tracer tracer) &#123;</span><br><span class="line">        <span class="keyword">this</span>.tracer = tracer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                         FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        Span currentSpan = <span class="keyword">this</span>.tracer.currentSpan();</span><br><span class="line">        <span class="keyword">if</span> (currentSpan == <span class="keyword">null</span>) &#123;</span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ((HttpServletResponse) response).addHeader(<span class="string">"ZIPKIN-TRACE-ID"</span>,</span><br><span class="line">                currentSpan.context().traceIdString());</span><br><span class="line">        currentSpan.tag(<span class="string">"custom"</span>, <span class="string">"tag"</span>);</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器调试请求：</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200514111811873.png" alt="image-20200514111811873"></p><p>可在响应头中看到 trace-id 这对调试问题非常有帮助。</p><h4 id="监控本地方法"><a href="#监控本地方法" class="headerlink" title="监控本地方法"></a>监控本地方法</h4><p>异步和远程调用都会开启一个 span ,如果想监控本地方法，可采用埋点的方式监控本地方法，也就是开启一个新的 span</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Tracer tracer;</span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"异步线程执行"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//  方法一  使用注解</span></span><br><span class="line"><span class="comment">//    @NewSpan(name = "saveLog2")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveLog2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//   方法二   使用 tracer 对象</span></span><br><span class="line">        ScopedSpan span = tracer.startScopedSpan(<span class="string">"saveLog2"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception | Error e) &#123;</span><br><span class="line">            span.error(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            span.finish();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="用-RabbitMq-代替-http-发送调用链数据"><a href="#用-RabbitMq-代替-http-发送调用链数据" class="headerlink" title="用 RabbitMq 代替 http 发送调用链数据"></a>用 RabbitMq 代替 http 发送调用链数据</h4><p>虽然有基于采样的收集方式，但是数据的发送采用 Http 还是对性能有影响。如果 Zipkin 的服务端重启或挂掉了，那么将丢失部分采集数据。为了解决这个问题，我们将集成 RabbitMq 来发送采集数据，利用消息队列来提高发送性能，保证数据不会丢。</p><h5 id="安装-RabbitMq-环境"><a href="#安装-RabbitMq-环境" class="headerlink" title="安装 RabbitMq 环境"></a>安装 RabbitMq 环境</h5><p>RabbitMq 依赖于 Erlang 所以先安装 Erlang</p><ul><li>安装 Erlang</li></ul><p>下载：<a href="https://www.erlang.org/downloads" target="_blank" rel="noopener">https://www.erlang.org/downloads</a></p><ul><li>安装 rabbitmq</li></ul><p>下载：<a href="https://www.rabbitmq.com/install-windows-manual.html" target="_blank" rel="noopener">https://www.rabbitmq.com/install-windows-manual.html</a></p><p>安装与配置环境变量参考：<a href="https://www.cnblogs.com/nongzihong/p/11578255.html" target="_blank" rel="noopener">https://www.cnblogs.com/nongzihong/p/11578255.html</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 rabbitmq 状态</span></span><br><span class="line">D:\Program Files\rabbitmq_server-3.8.3\sbin&gt;rabbitmqctl status</span><br><span class="line">Error: unable to perform an operation on node <span class="string">'rabbit@DESKTOP-SAUA6M1'</span>. Please see diagnostics information and suggestions below.</span><br><span class="line"></span><br><span class="line"><span class="comment"># enable rabbitmq_management</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line">D:\Program Files\rabbitmq_server-3.8.3\sbin&gt;rabbitmq-plugins.bat <span class="built_in">enable</span> rabbitmq_management</span><br><span class="line">Enabling plugins on node rabbit@DESKTOP-SAUA6M1:</span><br><span class="line">rabbitmq_management</span><br><span class="line">The following plugins have been configured:</span><br><span class="line">  rabbitmq_management</span><br><span class="line">  rabbitmq_management_agent</span><br><span class="line">  rabbitmq_web_dispatch</span><br><span class="line">Applying plugin configuration to rabbit@DESKTOP-SAUA6M1...</span><br><span class="line">The following plugins have been enabled:</span><br><span class="line">  rabbitmq_management</span><br><span class="line">  rabbitmq_management_agent</span><br><span class="line">  rabbitmq_web_dispatch</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> 3 plugins.</span><br><span class="line">Offline change; changes will take effect at broker restart.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再启动 rabbitmq</span></span><br><span class="line">D:\Program Files\rabbitmq_server-3.8.3\sbin&gt;rabbitmq-server.bat</span><br><span class="line"></span><br><span class="line">  <span class="comment">##  ##      RabbitMQ 3.8.3</span></span><br><span class="line">  <span class="comment">##  ##</span></span><br><span class="line">  <span class="comment">##########  Copyright (c) 2007-2020 Pivotal Software, Inc.</span></span><br><span class="line">  <span class="comment">######  ##</span></span><br><span class="line">  <span class="comment">##########  Licensed under the MPL 1.1. Website: https://rabbitmq.com</span></span><br><span class="line"></span><br><span class="line">  Doc guides: https://rabbitmq.com/documentation.html</span><br><span class="line">  Support:    https://rabbitmq.com/contact.html</span><br><span class="line">  Tutorials:  https://rabbitmq.com/getstarted.html</span><br><span class="line">  Monitoring: https://rabbitmq.com/monitoring.html</span><br><span class="line"></span><br><span class="line">  Logs: C:/Users/wuzhiyong/AppData/Roaming/RabbitMQ/<span class="built_in">log</span>/rabbit@DESKTOP-SAUA6M1.log</span><br><span class="line">        C:/Users/wuzhiyong/AppData/Roaming/RabbitMQ/<span class="built_in">log</span>/rabbit@DESKTOP-SAUA6M1_upgrade.log</span><br><span class="line"></span><br><span class="line">  Config file(s): (none)</span><br><span class="line"></span><br><span class="line">  Starting broker... completed with 3 plugins.</span><br></pre></td></tr></table></figure><p>访问：<a href="http://localhost:15672/" target="_blank" rel="noopener">http://localhost:15672/</a></p><p>用户名：guest  密码：guest</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200514144246611.png" alt="image-20200514144246611"></p><h5 id="spring-cloud-项目的配置"><a href="#spring-cloud-项目的配置" class="headerlink" title="spring cloud 项目的配置"></a>spring cloud 项目的配置</h5><p>把所有项目都配上：</p><p>pom:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.amqp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注释掉 </span></span><br><span class="line"><span class="comment">#spring.zipkin.base-url=http://127.0.0.1:9411</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加</span></span><br><span class="line"><span class="meta">spring.zipkin.sender.type</span>=<span class="string">RABBIT</span></span><br><span class="line"><span class="meta">spring.rabbitmq.addresses</span>=<span class="string">amqp:localhost:15672/</span></span><br><span class="line"><span class="meta">spring.rabbitmq.username</span>=<span class="string">guest</span></span><br><span class="line"><span class="meta">spring.rabbitmq.password</span>=<span class="string">guest</span></span><br></pre></td></tr></table></figure><p>启动 zinkin : 带上 rabbit 的参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">wuzhiyong@DESKTOP-SAUA6M1 MINGW64 /d/Zipkin</span><br><span class="line"><span class="meta">$</span><span class="bash"> java -DRABBIT_ADDRESSES=127.0.0.1:5672 -DRABBIT_USER=guest -DRABBIT_PASSWORD=guest -jar zipkin-server-2.21.1-exec.jar</span></span><br><span class="line"></span><br><span class="line">                  oo</span><br><span class="line">                 oooo</span><br><span class="line">                oooooo</span><br><span class="line">               oooooooo</span><br><span class="line">              oooooooooo</span><br><span class="line">             oooooooooooo</span><br><span class="line">           ooooooo  ooooooo</span><br><span class="line">          oooooo     ooooooo</span><br><span class="line">         oooooo       ooooooo</span><br><span class="line">        oooooo   o  o   oooooo</span><br><span class="line">       oooooo   oo  oo   oooooo</span><br><span class="line">     ooooooo  oooo  oooo  ooooooo</span><br><span class="line">    oooooo   ooooo  ooooo  ooooooo</span><br><span class="line">   oooooo   oooooo  oooooo  ooooooo</span><br><span class="line">  oooooooo      oo  oo      oooooooo</span><br><span class="line">  ooooooooooooo oo  oo ooooooooooooo</span><br><span class="line">      oooooooooooo  oooooooooooo</span><br><span class="line">          oooooooo  oooooooo</span><br><span class="line">              oooo  oooo</span><br><span class="line"></span><br><span class="line">     ________ ____  _  _____ _   _</span><br><span class="line">    |__  /_ _|  _ \| |/ /_ _| \ | |</span><br><span class="line">      / / | || |_) | ' / | ||  \| |</span><br><span class="line">     / /_ | ||  __/| . \ | || |\  |</span><br><span class="line">    |____|___|_|   |_|\_\___|_| \_|</span><br><span class="line"></span><br><span class="line">:: version 2.21.1 :: commit c30ffc5 ::</span><br><span class="line"></span><br><span class="line">2020-05-14 15:51:16.549  INFO 416 --- [           main] z.s.ZipkinServer                         : Starting ZipkinServer on DESKTOP-SAUA6M1 with PID 416 (D:\Zipkin\zipkin-server-2.21.1-exec.jar started by wuzhiyong in D:\Zipkin)</span><br><span class="line">2020-05-14 15:51:16.552  INFO 416 --- [           main] z.s.ZipkinServer                         : The following profiles are active: shared</span><br><span class="line">2020-05-14 15:51:17.400  INFO 416 --- [           main] c.l.a.c.u.SystemInfo                     : Hostname: desktop-saua6m1 (from 'hostname' command)</span><br><span class="line">2020-05-14 15:51:18.100  INFO 416 --- [oss-http-*:9411] c.l.a.s.Server                           : Serving HTTP at /0:0:0:0:0:0:0:0:9411 - http://127.0.0.1:9411/</span><br><span class="line">2020-05-14 15:51:18.100  INFO 416 --- [           main] c.l.a.s.ArmeriaAutoConfiguration         : Armeria server started at ports: &#123;/0:0:0:0:0:0:0:0:9411=ServerPort(/0:0:0:0:0:0:0:0:9411, [http])&#125;</span><br><span class="line">2020-05-14 15:51:18.115  INFO 416 --- [           main] z.s.ZipkinServer                         : Started ZipkinServer in 2.126 seconds (JVM running for 3.133)</span><br></pre></td></tr></table></figure><h5 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h5><p>rabbitMq</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200514160521203.png" alt="image-20200514160521203"></p><p>请求接口后再从 zipkin 中查看某个调用链：</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200514160606857.png" alt="image-20200514160606857"></p><h4 id="用-Elasticsearch-存储调用链数据"><a href="#用-Elasticsearch-存储调用链数据" class="headerlink" title="用 Elasticsearch 存储调用链数据"></a>用 Elasticsearch 存储调用链数据</h4><p>目前收集的数据都是存在 Zipkin 服务的内存中，服务一重启这些数据就没了，我们需要将这些数据持久化。实际使用中数据量可能会比较大，所以一般数据库并不是很好的选择，可以选择 ES 来存储数据，ES 在搜索方面有先天的优势</p><p>启动 ES</p><p>启动  zipkin ，带上 ES 的参数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wuzhiyong@DESKTOP-SAUA6M1 MINGW64 /d/Zipkin</span><br><span class="line"><span class="meta">$</span><span class="bash"> java -DSTORAGE_TYPE=elasticsearch -DES_HOST=http://127.0.0.1:9200 -DRABBIT_ADDRESSES=127.0.0.1:5672 -DRABBIT_USER=guest -DRABBIT_PASSWORD=guest -jar zipkin-server-2.21.1-exec.jar</span></span><br></pre></td></tr></table></figure><p>访问几次接口生成几条条用链数据：</p><p>在 zipkin 中查看。</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200514162719215.png" alt="image-20200514162719215"></p><p>重启 zipkin 用刚才的 trace id 查询。查到了说明数据被保存了。</p><h5 id="验证数据是否存到了-ES"><a href="#验证数据是否存到了-ES" class="headerlink" title="验证数据是否存到了 ES"></a>验证数据是否存到了 ES</h5><p>我们再访问 ES 的接口  查找索引：<a href="http://localhost:9200/_cat/indices" target="_blank" rel="noopener">http://localhost:9200/_cat/indices</a></p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200514163051852.png" alt="image-20200514163051852"></p><p>有了 zipkin 前缀的索引。说明 zipkin 的数据保存到了ES里</p><p>通过 kibana 也可以看到这条索引：</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200514163858862.png" alt="image-20200514163858862"></p><p>在 kibana 中创建对应的 index pattern</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200514164331054.png" alt="image-20200514164331054"></p><p>然后就可以通过 trace id 搜素到了：</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200514164652907.png" alt="image-20200514164652907"></p><hr><p>参考：《spring cloud 微服务 入门、进阶与实战》</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> java </tag>
            
            <tag> spring cloud </tag>
            
            <tag> Sleuth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置中心之Apollo</title>
      <link href="/myblog/%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E4%B9%8BApollo/"/>
      <url>/myblog/%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E4%B9%8BApollo/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>Apollo（阿波罗）是携程框架部门研发的分布式配置中心，能够集中化管理应用不同环境、不同集群的配置，配置修改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性，适用于微服务配置管理场景。</p><p align="right">—— Apollo官方WIKI<p></blockquote><p>gitHub:<a href="https://github.com/ctripcorp/apollo/" target="_blank" rel="noopener">Apollo</a></p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><blockquote><p>正是基于配置的特殊性，所以Apollo从设计之初就立志于成为一个有治理能力的配置发布平台，目前提供了以下的特性：</p><ul><li><strong>统一管理不同环境、不同集群的配置</strong><ul><li>Apollo提供了一个统一界面集中式管理不同环境（environment）、不同集群（cluster）、不同命名空间（namespace）的配置。</li><li>同一份代码部署在不同的集群，可以有不同的配置，比如zookeeper的地址等</li><li>通过命名空间（namespace）可以很方便地支持多个不同应用共享同一份配置，同时还允许应用对共享的配置进行覆盖</li></ul></li><li><strong>配置修改实时生效（热发布）</strong><ul><li>用户在Apollo修改完配置并发布后，客户端能实时（1秒）接收到最新的配置，并通知到应用程序</li></ul></li><li><strong>版本发布管理</strong><ul><li>所有的配置发布都有版本概念，从而可以方便地支持配置的回滚</li></ul></li><li><strong>灰度发布</strong><ul><li>支持配置的灰度发布，比如点了发布后，只对部分应用实例生效，等观察一段时间没问题后再推给所有应用实例</li></ul></li><li><strong>权限管理、发布审核、操作审计</strong><ul><li>应用和配置的管理都有完善的权限管理机制，对配置的管理还分为了编辑和发布两个环节，从而减少人为的错误。</li><li>所有的操作都有审计日志，可以方便地追踪问题</li></ul></li><li><strong>客户端配置信息监控</strong><a id="more"></a><ul><li>可以在界面上方便地看到配置在被哪些实例使用</li></ul></li><li><strong>提供Java和.Net原生客户端</strong><ul><li>提供了Java和.Net的原生客户端，方便应用集成</li><li>支持Spring Placeholder, Annotation和Spring Boot的ConfigurationProperties，方便应用使用（需要Spring 3.1.1+）</li><li>同时提供了Http接口，非Java和.Net应用也可以方便地使用</li></ul></li><li><strong>提供开放平台API</strong><ul><li>Apollo自身提供了比较完善的统一配置管理界面，支持多环境、多数据中心配置管理、权限、流程治理等特性。不过Apollo出于通用性考虑，不会对配置的修改做过多限制，只要符合基本的格式就能保存，不会针对不同的配置值进行针对性的校验，如数据库用户名、密码，Redis服务地址等</li><li>对于这类应用配置，Apollo支持应用方通过开放平台API在Apollo进行配置的修改和发布，并且具备完善的授权和权限控制</li></ul></li><li><strong>部署简单</strong><ul><li>配置中心作为基础服务，可用性要求非常高，这就要求Apollo对外部依赖尽可能地少</li><li>目前唯一的外部依赖是MySQL，所以部署非常简单，只要安装好Java和MySQL就可以让Apollo跑起来</li><li>Apollo还提供了打包脚本，一键就可以生成所有需要的安装包，并且支持自定义运行时参数</li></ul></li></ul></blockquote><h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><p>确保  java version 8+</p><h4 id="下载快速开始项目"><a href="#下载快速开始项目" class="headerlink" title="下载快速开始项目"></a>下载快速开始项目</h4><p>下载：<a href="https://github.com/nobodyiam/apollo-build-scripts.git" target="_blank" rel="noopener">https://github.com/nobodyiam/apollo-build-scripts.git</a></p><p>下到本地后解压如下：</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200512113925813.png" alt="image-20200512113925813"></p><h4 id="启动本地服务端"><a href="#启动本地服务端" class="headerlink" title="启动本地服务端"></a>启动本地服务端</h4><p>使用 gitbash 在当前目录（上图）执行 demo.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">s-master</span><br><span class="line"><span class="meta">$</span><span class="bash"> ./demo.sh start</span></span><br><span class="line">Windows new JAVA_HOME is: /d/Java/jdk1.8.0_144</span><br><span class="line">version : 1.8.0_144</span><br><span class="line">==== starting service ====</span><br><span class="line">Service logging file is ./service/apollo-service.log</span><br><span class="line">Started [18080]</span><br><span class="line">Waiting for config service startup......</span><br><span class="line">Config service started. You may visit http://localhost:8080 for service status now!</span><br><span class="line">Waiting for admin service startup</span><br><span class="line">Admin service started</span><br><span class="line">==== starting portal ====</span><br><span class="line">Portal logging file is ./portal/apollo-portal.log</span><br><span class="line">Started [19772]</span><br><span class="line">Waiting for portal startup...</span><br><span class="line">Portal started. You can visit http://localhost:8070 now!</span><br><span class="line"></span><br><span class="line">wuzhiyong@DESKTOP-SAUA6M1 MINGW64 /e/迅雷下载/apollo配置中心/apollo-build-scripts-master</span><br><span class="line"><span class="meta">$</span></span><br></pre></td></tr></table></figure><p>在 Windows 下执行可能会出现类似提示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Java version is , please make sure java 1.8+ is in the path</span><br></pre></td></tr></table></figure><p>本人这里折腾了些时间，重新下载配置更高版本的jdk，修改调试 demo.sh 都不行，后来在这篇博客（<a href="http://www.kungge.com/kwan/3896.html" target="_blank" rel="noopener">点这里</a>）得到解决。 问题原因是 apollo 读 java 地址路径上不能有空格。我的 jdk 是放在 Program Files 下，这里有个空格。后面 把 jdk 移到其它位置，并重新配置好环境变量就可以了。</p><h4 id="登录服务端控制台"><a href="#登录服务端控制台" class="headerlink" title="登录服务端控制台"></a>登录服务端控制台</h4><p>打开地址：</p><p><a href="http://localhost:8070" target="_blank" rel="noopener">http://localhost:8070</a></p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200512115251752.png" alt="image-20200512115251752"></p><p>输入  用户名：apollo  密码 admin</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200512115334476.png" alt="image-20200512115334476"></p><p>点击 SampleApp 项目后可看到类似下面的内容</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200513113702191.png" alt="image-20200513113702191"></p><h4 id="配置客户端"><a href="#配置客户端" class="headerlink" title="配置客户端"></a>配置客户端</h4><p>在 springboot 项目中添加客户端依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ctrip.framework.apollo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>apollo-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动类设置环境 (下下来的快速开始项目 本地启动只有一个环境，我测试的时候不加这段也可以)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringcloudZuulFileDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.setProperty(<span class="string">"env"</span>,<span class="string">"DEV"</span>);</span><br><span class="line">        SpringApplication.run(SpringcloudZuulFileDemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>properties中配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">apollo.bootstrap.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">app.id</span>=<span class="string">SampleApp</span></span><br><span class="line"><span class="meta">apollo.meta</span>=<span class="string">http://localhost:8080</span></span><br><span class="line"><span class="meta">apollo.bootstrap.namespaces</span>=<span class="string">application</span></span><br></pre></td></tr></table></figure><p>添加一个属性类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJavaConfigBean</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;timeout:100&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> timeout;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> batch;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;batch:200&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBatch</span><span class="params">(<span class="keyword">int</span> batch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.batch = batch;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTimeout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> timeout;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBatch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> batch;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableApolloConfig</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TestJavaConfigBean <span class="title">javaConfigBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TestJavaConfigBean();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制器测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    TestJavaConfigBean testJavaConfigBean;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"get/config"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"timeout:"</span>+testJavaConfigBean.getTimeout()</span><br><span class="line">                +<span class="string">"batch"</span></span><br><span class="line">                +testJavaConfigBean.getBatch();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试读取配置"><a href="#测试读取配置" class="headerlink" title="测试读取配置"></a>测试读取配置</h4><p>启动项目调用测试接口：</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200513115527824-1589342252236.png" alt="image-20200513115527824"></p><p>apollo 控制台 增加修改并发布</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200513120010468.png" alt="image-20200513120010468"></p><p>再次请求 spring boot 的测试接口</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200513120059188.png" alt="image-20200513120059188"></p><p>发现配置已经更新了。</p><h3 id="apollo-中的核心概念"><a href="#apollo-中的核心概念" class="headerlink" title="apollo 中的核心概念"></a>apollo 中的核心概念</h3><blockquote><p>在介绍高级特性前，我们有必要先来了解一下Apollo中的几个核心概念：</p><h4 id="application-应用"><a href="#application-应用" class="headerlink" title="application (应用)"></a>application (应用)</h4><ul><li><p>这个很好理解，就是实际使用配置的应用，Apollo客户端在运行时需要知道当前应用是谁，从而可以去获取对应的配置</p></li><li><p>每个应用都需要有唯一的身份标识 – appId，我们认为应用身份是跟着代码走的，所以需要在代码中配置，具体信息请参见<a href="https://github.com/ctripcorp/apollo/wiki/Java客户端使用指南" target="_blank" rel="noopener">Java客户端使用指南</a>。</p><h4 id="environment-环境"><a href="#environment-环境" class="headerlink" title="environment (环境)"></a>environment (环境)</h4></li><li><p>配置对应的环境，Apollo客户端在运行时需要知道当前应用处于哪个环境，从而可以去获取应用的配置</p></li><li><p>我们认为环境和代码无关，同一份代码部署在不同的环境就应该能够获取到不同环境的配置</p></li><li><p>所以环境默认是通过读取机器上的配置（server.properties中的env属性）指定的，不过为了开发方便，我们也支持运行时通过System Property等指定，具体信息请参见<a href="https://github.com/ctripcorp/apollo/wiki/Java客户端使用指南" target="_blank" rel="noopener">Java客户端使用指南</a>。</p></li></ul><h4 id="cluster-集群"><a href="#cluster-集群" class="headerlink" title="cluster (集群)"></a>cluster (集群)</h4><ul><li>一个应用下不同实例的分组，比如典型的可以按照数据中心分，把上海机房的应用实例分为一个集群，把北京机房的应用实例分为另一个集群。</li><li>对不同的cluster，同一个配置可以有不一样的值，如zookeeper地址。</li><li>集群默认是通过读取机器上的配置（server.properties中的idc属性）指定的，不过也支持运行时通过System Property指定，具体信息请参见<a href="https://github.com/ctripcorp/apollo/wiki/Java客户端使用指南" target="_blank" rel="noopener">Java客户端使用指南</a>。<h4 id="namespace-命名空间"><a href="#namespace-命名空间" class="headerlink" title="namespace (命名空间)"></a>namespace (命名空间)</h4></li><li>一个应用下不同配置的分组，可以简单地把namespace类比为文件，不同类型的配置存放在不同的文件中，如数据库配置文件，RPC配置文件，应用自身的配置文件等</li><li>应用可以直接读取到公共组件的配置namespace，如DAL，RPC等</li><li>应用也可以通过继承公共组件的配置namespace来对公共组件的配置做调整，如DAL的初始数据库连接数</li></ul></blockquote><p>更多高级使用和配置请参考官方文档：</p><p><a href="https://github.com/ctripcorp/apollo/wiki" target="_blank" rel="noopener">apollo 官方 Wiki</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> java </tag>
            
            <tag> spring cloud </tag>
            
            <tag> Apollo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>API网关之Zuul</title>
      <link href="/myblog/API%E7%BD%91%E5%85%B3%E4%B9%8BZuul/"/>
      <url>/myblog/API%E7%BD%91%E5%85%B3%E4%B9%8BZuul/</url>
      
        <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><blockquote><p>Zuul is the front door for all requests from devices and web sites to the backend of the Netflix streaming application. As an edge service application, Zuul is built to enable dynamic routing, monitoring, resiliency and security. It also has the ability to route requests to multiple Amazon Auto Scaling Groups as appropriate.</p><p align="right">—— <a href="https://github.com/Netflix/zuul/wiki" target="_blank" rel="noopener">Zuul 官方wiki</a><p></blockquote><h3 id="Zuul-简介"><a href="#Zuul-简介" class="headerlink" title="Zuul 简介"></a>Zuul 简介</h3><blockquote><p>Zuul 是 Netflix OOS 中的一员，是一个基于 JVM 路由和服务端的负载均衡。提供路由、监控、弹性、安全等方面的服务框架。Zuul 能够与 Eureka 、Ribbon 、Hystrix 等组件配合使用。</p><p>Zuul 的核心是过滤器，通过这些过滤器我们可以扩展出很多功能，比如：</p><ul><li>动态路由：动态的将客户端的请求路由到后端的不同服务，做一些逻辑处理，比如聚合多个服务的数据返回。</li><li>请求监控：可以对整个系统的请求进行监控，记录详细的请求响应日志，可以实时统计出当前系统的访问量以及监控状态。</li><li>认证鉴权：对每一个访问的请求做认证，拒绝非法请求，保护好后端的服务。</li><li>压力测试：压力测试是一项很重要的工作，像电商公司需要模拟更多的真实的用户并发量来保证重大活动时系统的稳定。通过 Zuul 可以动态地将请求转发到后端服务的集群中，还可以识别测试流量和真实流量，从而做一些特殊处理。</li><li>灰度发布：灰度发布可以保证系统的稳定，在初始灰度的时候就可以发现、调整问题、以保证其影响度。</li></ul><p align="right">——《spring cloud 微服务 入门、进阶与实战》第103页<p></blockquote><h3 id="使用-Zuul-构建微服务网关"><a href="#使用-Zuul-构建微服务网关" class="headerlink" title="使用 Zuul 构建微服务网关"></a>使用 Zuul 构建微服务网关</h3><h4 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h4><p>建立一个 spring cloud 项目。配置如下：</p><ul><li>pom添加依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>properties 配置：</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.application.name</span>=<span class="string">zuul-demo</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">2103</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#拦截匹配了 /demo1/** 规则的url  转发到  https://blog.wu-zy.com/</span></span><br><span class="line"><span class="comment">#这里 routes.demo1 的 demo1 是自定义的</span></span><br><span class="line"><span class="meta">zuul.routes.demo1.path</span>=<span class="string">/demo1/**</span></span><br><span class="line"><span class="meta">zuul.routes.demo1.url</span>=<span class="string">https://blog.wu-zy.com/</span></span><br></pre></td></tr></table></figure><ul><li>启动类加上 @EnableZuulProxy 注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZuulDemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动项目我们访问：<a href="http://localhost:2103/demo1/myblog" target="_blank" rel="noopener">http://localhost:2103/demo1/myblog</a></p><p>结果跳转到了我的博客：<a href="https://blog.wu-zy.com/myblog/" target="_blank" rel="noopener">https://blog.wu-zy.com/myblog/</a></p><h4 id="集成-Eurekas"><a href="#集成-Eurekas" class="headerlink" title="集成 Eurekas"></a>集成 Eurekas</h4><p>结合 Eureka 实现动态路由</p><ul><li>加入 Eureka 的依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置注册中心</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#注册中心集群</span></span><br><span class="line"><span class="meta">eureka.client.serviceUrl.defaultZone</span>=<span class="string">http://WuZhiYong:123456@localhost:8761/eureka/,http://WuZhiYong:123456@localhost:8762/eureka/</span></span><br></pre></td></tr></table></figure><a id="more"></a>我们可通过：  API网关地址 + 访问的服务实例的名称 + 服务接口的URL<p>我这里注册中心有个 eureka-client-service 服务 并且 该服务有 /user/hello 接口</p><p>我们可通过  网关这样调用。</p><p><a href="http://localhost:2103/eureka-client-service/user/hello" target="_blank" rel="noopener">http://localhost:2103/eureka-client-service/user/hello</a></p><h4 id="Zuul-路由配置"><a href="#Zuul-路由配置" class="headerlink" title="Zuul 路由配置"></a>Zuul 路由配置</h4><ol><li>指定具体服务的路由</li></ol><p>配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">zuul.routes.eureka-client-service.path</span>=<span class="string">/api-user/**</span></span><br></pre></td></tr></table></figure><p>访问 <a href="http://localhost:2103/api-user/user/hello" target="_blank" rel="noopener">http://localhost:2103/api-user/user/hello</a>  即可调用 eureka-client-service 的接口了。</p><blockquote><p>以前面的配置为例：</p><p>zuul.routes.demo1.path=/demo1/**<br>zuul.routes.demo1.url=<a href="https://blog.wu-zy.com/" target="_blank" rel="noopener">https://blog.wu-zy.com/</a></p><p>这里给我的感觉是：如果我们只配置了path  zuul 会尝试将  demo1 尝试当作 服务实例名进行解析，如果我们配置了  url  zuul 就会根据我们指定的 url 进行转发。</p><p>zuul.routes.${server_name}.path=/demo1/**<br>zuul.routes.${server_name}.url=<a href="https://blog.wu-zy.com/" target="_blank" rel="noopener">https://blog.wu-zy.com/</a></p></blockquote><ol start="2"><li>路由前缀</li></ol><p>对前缀的设置，分为 统一前缀  和每条转发路线的前缀</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#统一前缀 (所有请求进来的 地址 必须满足 /user 前缀)</span></span><br><span class="line"><span class="meta">zuul.prefix</span>=<span class="string">/user</span></span><br><span class="line"><span class="comment">#经过 zuul 后实际的请求  是否跳过（去除）统一前缀  默认为true</span></span><br><span class="line"><span class="meta">zuul.strip-prefix</span>=<span class="string">false</span></span><br><span class="line"></span><br><span class="line"><span class="meta">zuul.routes.demo1.path</span>=<span class="string">/demo1/**</span></span><br><span class="line"><span class="meta">zuul.routes.demo1.url</span>=<span class="string">https://blog.wu-zy.com/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#对某个服务进行转发</span></span><br><span class="line"><span class="meta">zuul.routes.eureka-client-service.path</span>=<span class="string">/api-user/**</span></span><br><span class="line"><span class="comment">#经过 zuul 后实际请求是否跳过（去除）path 所匹配的前缀 /api-user/  默认为 true</span></span><br><span class="line"><span class="meta">zuul.routes.eureka-client-service.strip-prefix</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><ol start="3"><li>本地跳转</li></ol><ul><li>为了逻辑简单我们去掉统一的前缀</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#统一前缀</span></span><br><span class="line"><span class="comment">#zuul.prefix=/user</span></span><br><span class="line"><span class="comment">#zuul.strip-prefix=false</span></span><br><span class="line"></span><br><span class="line"><span class="meta">zuul.routes.demo1.path</span>=<span class="string">/demo1/**</span></span><br><span class="line"><span class="meta">zuul.routes.demo1.url</span>=<span class="string">forward:/local</span></span><br></pre></td></tr></table></figure><ul><li>添加本地的控制器代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/local/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">local</span><span class="params">(@PathVariable String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200511112353620.png" alt="image-20200511112353620"></p><h4 id="Zuul-中的过滤器"><a href="#Zuul-中的过滤器" class="headerlink" title="Zuul 中的过滤器"></a>Zuul 中的过滤器</h4><p>本文简介中也说到 zuul 中的很多高级功能都是通过 zuul 的过滤器实现的。与我们了解的传统 servlet 过滤器不同的是 zuul 中的过滤器分为 4 种。每一种都有对应的使用场景。</p><h5 id="过滤器类型"><a href="#过滤器类型" class="headerlink" title="过滤器类型"></a>过滤器类型</h5><blockquote><p>pre：可以在请求被路由之前调用。适用于身份认证的场景，认证通过后再继续执行下面的流程。</p><p>route：在路由请求时被调用。适用于灰度发布场景，在将要路由的时候可以做一些自定义的逻辑。</p><p>post：在 route和eror过滤器之后被调用。这种过滤器将请求路由到达具体的服务之后执行。适用于需要添加响应头，记录响应日志等应用场景。</p><p>eror：处理请求时发生错误时被调用。在执行过程中发送错误时会进入eror过滤器，可以用来统一记录错误信息。</p><p align="right">——《spring cloud 微服务 入门、进阶与实战》第107页<p></blockquote><h5 id="请求生命周期"><a href="#请求生命周期" class="headerlink" title="请求生命周期"></a>请求生命周期</h5><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/u=3158899300,220096942&fm=26&gp=0.jpg" alt="img"></p><p>通过上面的图可以清楚地知道整个执行的顺序，请求发过来首先到pre过滤器，再到routing过滤器，最后到post过滤器，任何一个过滤器有异常都会进入eror过滤器。</p><p>在源码中也可看到这种执行顺序：</p><p>源码包地址：com.netflix.zuul.http.ZuulServlet</p><h5 id="使用过滤器"><a href="#使用过滤器" class="headerlink" title="使用过滤器"></a>使用过滤器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPreFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** IP黑名单列表 */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; blackIpList = Arrays.asList(<span class="string">"127.0.0.1"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤器类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 可选值有pre、 route、post、 error</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"pre"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤器的执行顺序，数值越小，优先级越高。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否执行该过滤器，</span></span><br><span class="line"><span class="comment">     * 这个也可以利用配置中心来实现，达到动态的开启和关闭过滤器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> tue为执行， false为不执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行自己的业务逻辑，本段代码中是通过判断请求的IP是否在黑名单中，</span></span><br><span class="line"><span class="comment">     * 决定是否进行拦截。 blacklist字段是IP的黑名单，判断条件成立之后，</span></span><br><span class="line"><span class="comment">     * 通过设置ctx.setsendzuulresponse（ false），</span></span><br><span class="line"><span class="comment">     * 告诉Zul不需要将当前请求转发到后端的服务了。</span></span><br><span class="line"><span class="comment">     * 通过 setresponse Body返回数据给客户端。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ZuulException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        <span class="comment">//System.err.println(2/0);</span></span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        String ip = IpUtils.getIpAddr(ctx.getRequest());</span><br><span class="line">        <span class="comment">// 在黑名单中禁用</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(ip) &amp;&amp; blackIpList.contains(ip)) &#123;</span><br><span class="line">            ctx.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">            ctx.set(<span class="string">"sendForwardFilter.ran"</span>, <span class="keyword">true</span>);</span><br><span class="line">            ResponseData data = ResponseData.fail(<span class="string">"非法请求"</span>, ResponseCode.NO_AUTH_CODE.getCode());</span><br><span class="line">            ctx.setResponseBody(JsonUtils.toJson(data));</span><br><span class="line">            ctx.getResponse().setContentType(<span class="string">"application/json; charset=utf-8"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤器定义完成之后我们需要配置过滤器才能生效，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyPreFilter <span class="title">ipFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyPreFilter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="禁用过滤器"><a href="#禁用过滤器" class="headerlink" title="禁用过滤器"></a>禁用过滤器</h5><ul><li>利用 shouldFilter 方法中的 return false 让过滤器不再执行</li><li>利用配置文件方式。格式为：“zuul.过滤器类名.过滤器类型.disable=true”  例：</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#禁用过滤器</span></span><br><span class="line"><span class="meta">zuul.MyPreFilter.pre.disable</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><h5 id="过滤器中传递数据"><a href="#过滤器中传递数据" class="headerlink" title="过滤器中传递数据"></a>过滤器中传递数据</h5><p>在前面的过滤器中我们可以这样存入数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.netflix.zuul.context.RequestContext;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">  </span><br><span class="line">RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">ctx.set(<span class="string">"msg"</span>,<span class="string">"hello"</span>);</span><br></pre></td></tr></table></figure><p>在后面的过滤器中我们可以这样取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">ctx.get(<span class="string">"msg"</span>);</span><br></pre></td></tr></table></figure><h5 id="过滤器拦截请求"><a href="#过滤器拦截请求" class="headerlink" title="过滤器拦截请求"></a>过滤器拦截请求</h5><p>拦截和返回信息从前面代码里就可以看出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//告诉 zuul 不需要将当前请求转发到后端服务</span></span><br><span class="line">ctx.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line"><span class="comment">//用来拦截本地转发请求的。当我们设置了 forward:/local 的路由，ctx.setSendZuulResponse(false)</span></span><br><span class="line"><span class="comment">//对 forward 是不起作用的，需要设置 ctx.set("sendForwardFilter.ran", true); 才行。</span></span><br><span class="line">ctx.set(<span class="string">"sendForwardFilter.ran"</span>, <span class="keyword">true</span>);</span><br><span class="line">ctx.setResponseBody(<span class="string">"返回信息"</span>);</span><br><span class="line"><span class="comment">//ctx.getResponse().setContentType("application/json; charset=utf-8");</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><p>由于 zuul 拦截器和普通拦截器的逻辑的不同，如果 zuul 中有多个拦截器，即使 我们设置了 ctx.setSendZuulResponse(false); 和 ctx.set(“sendForwardFilter.ran”, true);。虽然请求最终不会转发到后端服务，但在后面的拦截器依然会执行。</p><p>如果我们不想让后面的拦截器执行，可通过 转递数据的方法 例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在前面的拦截器处理后 设置</span></span><br><span class="line">RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">ctx.set(<span class="string">"is_success"</span>,<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><p>在后面的拦截器 shouldFilter 方法中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">  Object success = ctx.get(<span class="string">"is_success"</span>);</span><br><span class="line">  <span class="keyword">return</span> success == <span class="keyword">null</span> ? <span class="keyword">true</span> : Boolean.parseBoolean(success.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="过滤器中的异常处理"><a href="#过滤器中的异常处理" class="headerlink" title="过滤器中的异常处理"></a>过滤器中的异常处理</h5><blockquote><p>对于异常来说，无论在哪个地方都需要处理。过滤器中的异常主要发生在run方法中，可以用 try catch来处理。Zuul中也为我们提供了一个异常处理的过滤器，当过滤器在执行过程中发生异常，若没有被捕获到，就会进入 error过滤器中。</p></blockquote><p>我们可以定义一个eror过滤器来记录异常信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger log = LoggerFactory.getLogger(ErrorFilter<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        Throwable throwable = ctx.getThrowable();</span><br><span class="line">        log.error(<span class="string">"Filter Erroe : &#123;&#125;"</span>, throwable.getCause().getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并在 ipFilter run 方法中 System.err.println(2/0);  这行代码取消注释。重启项目，在访问接口：</p><p>得到响应：</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200511134331169.png" alt="image-20200511134331169"></p><p>这种情况自然不符合和统一接口规范</p><p>在 《spring cloud 微服务 入门、进阶与实战》书中说这种情况下使用 @ControllerAdvice 方式也是无效的，并解释：@ControllerAdvice 注解主要是针对 Controller 中的方法做处理的，作用于 @RequestMappping 标注的方法上，只针对与我们定义的方法有效，在 zuul 中是无效的。书中给出的解决方案是增加一个控制器类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorHandlerController</span> <span class="keyword">implements</span> <span class="title">ErrorController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ErrorAttributes errorAttributes;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getErrorPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/error"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/error"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseData <span class="title">error</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; errorAttributes = getErrorAttributes(request);</span><br><span class="line">        String message = (String) errorAttributes.get(<span class="string">"message"</span>);</span><br><span class="line">        String trace = (String) errorAttributes.get(<span class="string">"trace"</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(trace)) &#123;</span><br><span class="line">            message += String.format(<span class="string">" and trace %s"</span>, trace);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResponseData.fail(message, ResponseCode.SERVER_ERROR_CODE.getCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> errorAttributes.getErrorAttributes(<span class="keyword">new</span> ServletWebRequest(request), <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次请求发现返回了我们想要的格式的数据了。</p><h4 id="Zuul-容错和回退"><a href="#Zuul-容错和回退" class="headerlink" title="Zuul 容错和回退"></a>Zuul 容错和回退</h4><h5 id="容错机制"><a href="#容错机制" class="headerlink" title="容错机制"></a>容错机制</h5><p>当某个服务不可用的时候能够切换到其他可用的服务上去。也就是需要重试机制。在 zuul 中开启重试机制需要依赖于 spring-retry</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.retry<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-retry<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开启重试</span></span><br><span class="line"><span class="meta">zuul.retryable</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#请求链接的超时时间</span></span><br><span class="line"><span class="meta">ribbon.ConnectTimeout</span>=<span class="string">1000</span></span><br><span class="line"><span class="comment">#请求处理的超时时间</span></span><br><span class="line"><span class="meta">ribbon.ReadTimeout</span>=<span class="string">1000</span></span><br><span class="line"><span class="comment">#对当前实例的重试次数</span></span><br><span class="line"><span class="meta">ribbon.MaxAutoRetries</span>=<span class="string">1</span></span><br><span class="line"><span class="comment">#切换实例的最大重试次数</span></span><br><span class="line"><span class="meta">ribbon.MaxAutoRetriesNextServer</span>=<span class="string">3</span></span><br><span class="line"><span class="comment">#对所有操作请求都进行重试</span></span><br><span class="line"><span class="meta">ribbon.OkToRetryOnAllOperations</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#对指定的 http 响应码进行重试</span></span><br><span class="line"><span class="meta">ribbon.retryableStatusCodes</span>=<span class="string">500,404,502</span></span><br></pre></td></tr></table></figure><p>测试：</p><p>服务提供方的集群我们启动多个服务，通过 zuul 不停调用，期间停掉集群中一台机器。发现确实达到了容错的目的。</p><h5 id="回退机制"><a href="#回退机制" class="headerlink" title="回退机制"></a>回退机制</h5><p>在 spring cloud 中，zuul 默认整合了 hystrix ，当后端服务异常时可以为 zuul 添加回退的功能，返回默认的数据给客户端。</p><p>实现回退机制需要实现 FallbackProvider 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.study.base.ResponseCode;</span><br><span class="line"><span class="keyword">import</span> com.study.base.ResponseData;</span><br><span class="line"><span class="keyword">import</span> com.study.utils.JsonUtils;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.filters.route.FallbackProvider;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.client.ClientHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> ServiceConsumerFallbackProvider</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> wuzhiyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/5/11 15:07</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceConsumerFallbackProvider</span> <span class="keyword">implements</span> <span class="title">FallbackProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger log = LoggerFactory.getLogger(ServiceConsumerFallbackProvider<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 匹配回退服务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回 * 表示对所有服务进行回退操作。如果只想对某个服务进行回退，</span></span><br><span class="line"><span class="comment">     * 那么就返回需要回退的服务名称，这个名称一定要注册到 Eureka 中的名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRoute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"*"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造回退内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> route</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cause</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClientHttpResponse <span class="title">fallbackResponse</span><span class="params">(String route, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ClientHttpResponse() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 返回响应的 状态码</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">             * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> HttpStatus <span class="title">getStatusCode</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> HttpStatus.OK;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRawStatusCode</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.getStatusCode().value();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 返回状态码对应的文本</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">             * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getStatusText</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.getStatusCode().getReasonPhrase();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 返回回退的内容</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">             * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> InputStream <span class="title">getBody</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (cause != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    log.error(<span class="string">""</span>, cause.getCause());</span><br><span class="line">                &#125;</span><br><span class="line">                ResponseData data = ResponseData.fail(route+<span class="string">"服务内部错误"</span>, ResponseCode.SERVER_ERROR_CODE.getCode());</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ByteArrayInputStream(JsonUtils.toJson(data).getBytes());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 返回响应的请求头信息</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> HttpHeaders <span class="title">getHeaders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">                MediaType mt = <span class="keyword">new</span> MediaType(<span class="string">"application"</span>, <span class="string">"json"</span>, Charset.forName(<span class="string">"UTF-8"</span>));</span><br><span class="line">                headers.setContentType(mt);</span><br><span class="line">                <span class="keyword">return</span> headers;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启 zuul 后我们停掉集群服务。再通过 zuul 访问接口。发现返回我们想要的数据了</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"eureka-client-service服务内部错误"</span>,</span><br><span class="line">    <span class="attr">"data"</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Zuul-使用小经验"><a href="#Zuul-使用小经验" class="headerlink" title="Zuul 使用小经验"></a>Zuul 使用小经验</h3><h4 id="结合-Actuator-查看相关信息"><a href="#结合-Actuator-查看相关信息" class="headerlink" title="结合 Actuator 查看相关信息"></a>结合 Actuator 查看相关信息</h4><p>zuul 在结合 Actuator 使用的时候可以暴露一些端点来方面我们来查看管理 zuul 路由。</p><p>首先我们添加 Actuator 并配置暴露出所有端点。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#暴露所有端点</span></span><br><span class="line"><span class="meta">management.endpoints.web.exposure.include</span>=<span class="string">*</span></span><br></pre></td></tr></table></figure><ul><li>/routes 端点</li></ul><p>访问：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">http://localhost:2103/actuator/routes</span></span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"/demo1/**"</span>: <span class="string">"forward:/local"</span>,</span><br><span class="line">    <span class="attr">"/api-server/**"</span>: <span class="string">"eureka-client-service"</span>,</span><br><span class="line">    <span class="attr">"/eureka-client-service/**"</span>: <span class="string">"eureka-client-service"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>/filters 端点</li></ul><p>访问：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">http://localhost:2103/actuator/filters</span></span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"error"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"class"</span>: <span class="string">"org.springframework.cloud.netflix.zuul.filters.post.SendErrorFilter"</span>,</span><br><span class="line">            <span class="attr">"order"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">"disabled"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"static"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"post"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"class"</span>: <span class="string">"org.springframework.cloud.netflix.zuul.filters.post.SendResponseFilter"</span>,</span><br><span class="line">            <span class="attr">"order"</span>: <span class="number">1000</span>,</span><br><span class="line">            <span class="attr">"disabled"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"static"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"pre"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"class"</span>: <span class="string">"org.springframework.cloud.netflix.zuul.filters.pre.Servlet30WrapperFilter"</span>,</span><br><span class="line">            <span class="attr">"order"</span>: <span class="number">-2</span>,</span><br><span class="line">            <span class="attr">"disabled"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"static"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"class"</span>: <span class="string">"org.springframework.cloud.netflix.zuul.filters.pre.ServletDetectionFilter"</span>,</span><br><span class="line">            <span class="attr">"order"</span>: <span class="number">-3</span>,</span><br><span class="line">            <span class="attr">"disabled"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"static"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"class"</span>: <span class="string">"org.springframework.cloud.netflix.zuul.filters.pre.PreDecorationFilter"</span>,</span><br><span class="line">            <span class="attr">"order"</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="attr">"disabled"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"static"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"class"</span>: <span class="string">"org.springframework.cloud.netflix.zuul.filters.pre.DebugFilter"</span>,</span><br><span class="line">            <span class="attr">"order"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"disabled"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"static"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"class"</span>: <span class="string">"org.springframework.cloud.netflix.zuul.filters.pre.FormBodyWrapperFilter"</span>,</span><br><span class="line">            <span class="attr">"order"</span>: <span class="number">-1</span>,</span><br><span class="line">            <span class="attr">"disabled"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"static"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"class"</span>: <span class="string">"com.study.customFilter.MyRouteFilter"</span>,</span><br><span class="line">            <span class="attr">"order"</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">"disabled"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"static"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"class"</span>: <span class="string">"com.study.customFilter.MyPreFilter"</span>,</span><br><span class="line">            <span class="attr">"order"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"disabled"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"static"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"route"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"class"</span>: <span class="string">"org.springframework.cloud.netflix.zuul.filters.route.SimpleHostRoutingFilter"</span>,</span><br><span class="line">            <span class="attr">"order"</span>: <span class="number">100</span>,</span><br><span class="line">            <span class="attr">"disabled"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"static"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"class"</span>: <span class="string">"org.springframework.cloud.netflix.zuul.filters.route.RibbonRoutingFilter"</span>,</span><br><span class="line">            <span class="attr">"order"</span>: <span class="number">10</span>,</span><br><span class="line">            <span class="attr">"disabled"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"static"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"class"</span>: <span class="string">"org.springframework.cloud.netflix.zuul.filters.route.SendForwardFilter"</span>,</span><br><span class="line">            <span class="attr">"order"</span>: <span class="number">500</span>,</span><br><span class="line">            <span class="attr">"disabled"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"static"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><p>创建一个 spring cloud 应用  zuul-file-demo。并注册到 Eureka</p><p>文件上传控制器接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/file/upload"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fileUpload</span><span class="params">(@RequestParam(value = <span class="string">"file"</span>)</span> MultipartFile file) <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = file.getBytes();</span><br><span class="line">        File fileToSave = <span class="keyword">new</span> File(file.getOriginalFilename());</span><br><span class="line">        FileCopyUtils.copy(bytes, fileToSave);</span><br><span class="line">        <span class="keyword">return</span> fileToSave.getAbsolutePath();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 postman 上传测试。并成功返回了文件路径</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200511160023555.png" alt="image-20200511160023555"></p><p>然后换个大文件 35M。上传失败了</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200511160405668.png" alt="image-20200511160405668"></p><p>在 zuul-demo 和 zuul-file-demo 都加上</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.servlet.multipart.max-file-size</span>=<span class="string">100MB</span></span><br><span class="line"><span class="meta">spring.servlet.multipart.max-request-size</span>=<span class="string">100MB</span></span><br></pre></td></tr></table></figure><p>在 zuul-demo 调整</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#请求链接的超时时间</span></span><br><span class="line"><span class="meta">ribbon.ConnectTimeout</span>=<span class="string">90000</span></span><br><span class="line"><span class="comment">#请求处理的超时时间</span></span><br><span class="line"><span class="meta">ribbon.ReadTimeout</span>=<span class="string">90000</span></span><br></pre></td></tr></table></figure><p>重启两个服务再次测试便成功了。</p><ul><li>绕过 zuul 上传文件：</li></ul><p>在请求地址前面加上 /zuul 就可以绕过 zuul-demo 服务，这样就可以不用配置文件大小。但接收文件的服务 zuul-file-demo 还是得配置上</p><p>访问：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">http://localhost:2103/zuul/zuul-file-demo/file/upload</span></span><br></pre></td></tr></table></figure><p>注意：在Hystrix 隔离模式为线程模式下。需要设置 Hystrix 线程的超时时间。</p><p>execution.isolation.thread.timeoutInMilliseconds （详细参看 Hystrix服务容错 文章）</p><h4 id="请求响应详细信息输出"><a href="#请求响应详细信息输出" class="headerlink" title="请求响应详细信息输出"></a>请求响应详细信息输出</h4><p>实际开发当中，详细的日志能够帮助我们快速排查和定位系统的问题。在 zuul 中最适合的方式就是通过post 过滤器来实现输出详细日志。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletInputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.util.Pair;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.ZuulFilter;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.context.RequestContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.ribbon.RibbonHttpResponse;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> DebugRequestFilter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> wuzhiyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/5/11 16:33</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DebugRequestFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"post"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HttpServletRequest req = (HttpServletRequest)RequestContext.getCurrentContext().getRequest();</span><br><span class="line">        System.err.println(<span class="string">"REQUEST:: "</span> + req.getScheme() + <span class="string">" "</span> + req.getRemoteAddr() + <span class="string">":"</span> + req.getRemotePort());</span><br><span class="line">        StringBuilder params = <span class="keyword">new</span> StringBuilder(<span class="string">"?"</span>);</span><br><span class="line">        <span class="comment">// 获取URL参数</span></span><br><span class="line">        Enumeration&lt;String&gt; names = req.getParameterNames();</span><br><span class="line">        <span class="keyword">if</span>( req.getMethod().equals(<span class="string">"GET"</span>) ) &#123;</span><br><span class="line">            <span class="keyword">while</span> (names.hasMoreElements()) &#123;</span><br><span class="line">                String name = (String) names.nextElement();</span><br><span class="line">                params.append(name);</span><br><span class="line">                params.append(<span class="string">"="</span>);</span><br><span class="line">                params.append(req.getParameter(name));</span><br><span class="line">                params.append(<span class="string">"&amp;"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (params.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            params.delete(params.length()-<span class="number">1</span>, params.length());</span><br><span class="line">        &#125;</span><br><span class="line">        System.err.println(<span class="string">"REQUEST:: &gt; "</span> + req.getMethod() + <span class="string">" "</span> + req.getRequestURI() + params + <span class="string">" "</span> + req.getProtocol());</span><br><span class="line">        Enumeration&lt;String&gt; headers = req.getHeaderNames();</span><br><span class="line">        <span class="keyword">while</span> (headers.hasMoreElements()) &#123;</span><br><span class="line">            String name = (String) headers.nextElement();</span><br><span class="line">            String value = req.getHeader(name);</span><br><span class="line">            System.err.println(<span class="string">"REQUEST:: &gt; "</span> + name + <span class="string">":"</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        <span class="comment">// 获取请求体参数</span></span><br><span class="line">        <span class="keyword">if</span> (!ctx.isChunkedRequestBody()) &#123;</span><br><span class="line">            ServletInputStream inp = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                inp = ctx.getRequest().getInputStream();</span><br><span class="line">                String body = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (inp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    body = IOUtils.toString(inp);</span><br><span class="line">                    System.err.println(<span class="string">"REQUEST:: &gt; "</span> + body);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;Pair&lt;String, String&gt;&gt;  headerList = RequestContext.getCurrentContext().getOriginResponseHeaders();</span><br><span class="line">        <span class="keyword">for</span> (Pair&lt;String, String&gt; pair : headerList) &#123;</span><br><span class="line">            System.err.println(<span class="string">"RESPONSE HEADER:: &gt; "</span> +pair.second());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第一种，获取响应结果</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        Object zuulResponse = RequestContext.getCurrentContext().get(<span class="string">"zuulResponse"</span>);</span><br><span class="line">        <span class="keyword">if</span> (zuulResponse != <span class="keyword">null</span>) &#123;</span><br><span class="line">        RibbonHttpResponse resp = (RibbonHttpResponse) zuulResponse;</span><br><span class="line">    String body = IOUtils.toString(resp.getBody());</span><br><span class="line">    System.err.println(<span class="string">"RESPONSE:: &gt; "</span> + body);</span><br><span class="line">    resp.close();</span><br><span class="line">    RequestContext.getCurrentContext().setResponseBody(body);</span><br><span class="line">        &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二种，获取响应结果</span></span><br><span class="line"><span class="comment">//        InputStream stream = RequestContext.getCurrentContext().getResponseDataStream();</span></span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//            if (stream != null) &#123;</span></span><br><span class="line"><span class="comment">//                String body = IOUtils.toString(stream);</span></span><br><span class="line"><span class="comment">//                System.err.println("RESPONSE:: &gt; " + body);</span></span><br><span class="line"><span class="comment">//                RequestContext.getCurrentContext().setResponseBody(body);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">REQUEST:: http 0:0:0:0:0:0:0:1:9596</span><br><span class="line">REQUEST:: &gt; GET /api-server/user/hello HTTP/1.1</span><br><span class="line">REQUEST:: &gt; content-type:application/json</span><br><span class="line">REQUEST:: &gt; user-agent:PostmanRuntime/7.24.1</span><br><span class="line">REQUEST:: &gt; accept:*/*</span><br><span class="line">REQUEST:: &gt; cache-control:no-cache</span><br><span class="line">REQUEST:: &gt; postman-token:9d887b8d-42d2-4787-bae8-11c63447be8c</span><br><span class="line">REQUEST:: &gt; host:localhost:2103</span><br><span class="line">REQUEST:: &gt; accept-encoding:gzip, deflate, br</span><br><span class="line">REQUEST:: &gt; connection:keep-alive</span><br><span class="line">REQUEST:: &gt; content-length:28</span><br><span class="line">REQUEST:: &gt; &#123;"username":"22","pwd":"33"&#125;</span><br><span class="line">RESPONSE HEADER:: &gt; eureka-client-service</span><br><span class="line">RESPONSE HEADER:: &gt; text/plain;charset=UTF-8</span><br><span class="line">RESPONSE HEADER:: &gt; 5</span><br><span class="line">RESPONSE HEADER:: &gt; Mon, 11 May 2020 08:37:33 GMT</span><br><span class="line">RESPONSE HEADER:: &gt; timeout=60</span><br><span class="line">RESPONSE HEADER:: &gt; keep-alive</span><br><span class="line">RESPONSE:: &gt; hello</span><br></pre></td></tr></table></figure><h3 id="Zuul-高可用"><a href="#Zuul-高可用" class="headerlink" title="Zuul 高可用"></a>Zuul 高可用</h3><blockquote><p>跟业务相关的服务我们都是注册到 Eureka 中，通过 Ribbon 来进行负载均衡，服务可以通过水平扩展来实现高可用。现实使用中，API网关这层往往是给 APP、 Webapp、客户来调用接口的，如果我们将 Zuul 也注册到 Eureka 中是达不到高可用的，因为你不可能让你的客户也去操作你的注册中心。这时最好的办法就是用额外的负载均衡器来实现 Zuul 的高可用，比如我们最常用的 Nginx，或者 Haproxy、F5等。</p><p>这种方式也是单体项目最常用的负载方式，当用户请求一个地址的时候，通过Ngin去做转发，当一个服务挂掉的时候， Nginx会把它排除掉。</p><p>如果想要API网关也能随时水平扩展，那么我们可以用脚本来动态修改 Nginx 的配置，通过脚本操作 Eureka，发现有新加人的网关服务或者下线的网关服务，直接修改 Nginx 的 upstream，然后通过重载（ reload）配置来达到网关的动态扩容。</p><p>如果不用脚本结合注册中心去做的话，就只能提前规划好N个节点，然后手动配置上去。</p></blockquote><hr><p>参考：</p><p>《spring cloud 微服务 入门、进阶与实战》</p><p>书中本章代码：</p><p><a href="https://github.com/yinjihuan/spring-cloud/tree/master/Spring-Cloud-Book-Code-2/ch-7" target="_blank" rel="noopener">API 网关</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> java </tag>
            
            <tag> spring cloud </tag>
            
            <tag> Zuul </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hystrix服务容错</title>
      <link href="/myblog/Hystrix%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99/"/>
      <url>/myblog/Hystrix%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99/</url>
      
        <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><blockquote><p>Hystrix is a latency and fault tolerance library designed to isolate points of access to remote systems, services and 3rd party libraries, stop cascading failure and enable resilience in complex distributed systems where failure is inevitable.</p><p>翻译：Hystrix是一个延迟和容错库，旨在隔离对远程系统，服务和第三方库的访问点，停止级联故障，并在不可避免发生故障的复杂分布式系统中实现弹性。</p><p align="right">—— Hystrix GitHub官网 介绍<p></blockquote><h3 id="Hystrix介绍"><a href="#Hystrix介绍" class="headerlink" title="Hystrix介绍"></a>Hystrix介绍</h3><blockquote><p>Hystrix [hɪst’rɪks]，中文含义是豪猪，因其背上长满棘刺，从而拥有了自我保护的能力。本文所说的Hystrix是Netflix开源的一款容错框架，同样具有自我保护能力。为了实现容错和自我保护，下面我们看看Hystrix如何设计和实现的。</p><p>Hystrix设计目标：</p><ul><li>对来自依赖的延迟和故障进行防护和控制——这些依赖通常都是通过网络访问的</li><li>阻止故障的连锁反应</li><li>快速失败并迅速恢复</li><li>回退并优雅降级</li><li>提供近实时的监控与告警</li></ul><p>Hystrix遵循的设计原则：</p><ul><li>防止任何单独的依赖耗尽资源（线程）</li><li>过载立即切断并快速失败，防止排队</li><li>尽可能提供回退以保护用户免受故障</li><li>使用隔离技术（例如隔板，泳道和断路器模式）来限制任何一个依赖的影响</li><li>通过近实时的指标，监控和告警，确保故障被及时发现</li><li>通过动态修改配置属性，确保故障及时恢复</li><li>防止整个依赖客户端执行失败，而不仅仅是网络通信</li></ul><p>Hystrix如何实现这些设计目标？</p><ul><li>使用命令模式将所有对外部服务（或依赖关系）的调用包装在HystrixCommand或HystrixObservableCommand对象中，并将该对象放在单独的线程中执行；</li><li>每个依赖都维护着一个线程池（或信号量），线程池被耗尽则拒绝请求（而不是让请求排队）。</li><li>记录请求成功，失败，超时和线程拒绝。</li><li>服务错误百分比超过了阈值，熔断器开关自动打开，一段时间内停止对该服务的所有请求。</li><li>请求失败，被拒绝，超时或熔断时执行降级逻辑。</li><li>近实时地监控指标和配置的修改。</li></ul><p align="right">—— <a href="https://my.oschina.net/7001/blog/1619842" target="_blank" rel="noopener">AbeJeffrey的个人空间 </a><p></blockquote><h3 id="在spring-cloud-中使用Hystrix"><a href="#在spring-cloud-中使用Hystrix" class="headerlink" title="在spring cloud 中使用Hystrix"></a>在spring cloud 中使用Hystrix</h3><ul><li>添加 Hystrix 依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>启动类加上开启 Hystrix 注解 @EnableHystrix<a id="more"></a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableHystrix</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringcloudHystrixApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringcloudHystrixApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试 Hystrix</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/call/hello"</span>)</span><br><span class="line"><span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"defaultCallHello"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">callHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String result = restTemplate.getForObject(<span class="string">"http://localhost:8081/hello"</span>,String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">defaultCallHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"fail"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们没有启动 localhost:8081/hello 的服务时</p><p>请求 /call/hello  返回了  “fail”。说明 Hystrix 的熔断机制试用成功了。</p><h3 id="配置详解"><a href="#配置详解" class="headerlink" title="配置详解"></a>配置详解</h3><p>官网：<a href="https://github.com/Netflix/Hystrix/wiki/Configuration" target="_blank" rel="noopener">https://github.com/Netflix/Hystrix/wiki/Configuration</a></p><p>如果我们想配置隔离策略为线程隔离</p><p>可在 @HystrixComman注解中增加 commandProperties 来进行配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"defaultCallHello"</span>, commandProperties = &#123;</span><br><span class="line">        <span class="meta">@HystrixProperty</span>(name = <span class="string">"execution.isolation.strategy"</span>,value = <span class="string">"THREAD"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>其他配置及说明如下：</p><ul><li>Command Properties<ul><li>Execution<ul><li>execution.isolation.strategy    指定隔离策略，具体策略有两种<ul><li>THREAD    线程隔离，在单独的线程上执行，并发请求受线程池大小的控制。</li><li>SEMAPHORE    信号量隔离，在调用线程上执行，并发请求受信号量计数器的限制。    </li><li>execution.isolation.thread.timeoutInMilliseconds    配置执行超时时间设置。当Hystrix Command 执行的时间超过了设定值就会进入服务降级处理，单位是毫秒，默认值1000 </li><li>execution.timeout.enabled    用于确定是否启用 execution.isolation.thread.timeoutInMilliseconds 的超时时间设置，默认值为 true。</li><li>execution.isolation.thread.interruptOnTimeout    用于确定 Hystrix Command 执行超时后是否需要中断它，默认值为 true</li><li>execution.isolation.thread.interruptOnCancel    用于确定 Hystrix Command 执行被取消时是否需要中断它，默认值为 false</li><li>execution.isolation.semaphore.maxConcurrentRequests    用于确定 Hystrix 使用信号量策略时最大的请求并发数。<ul><li>Fallback</li><li>fallback.isolation.semaphore.maxConcurrentRequests    用于如果并发数达到该设定值，请求会被拒绝和抛出异常并且 fallback 不会被调用，默认值为 10</li><li>fallback.enabled    用于确定当执行失败或者请求被拒绝时，是否会尝试调用 HystrixCommand.getFallback(),默认值为 ture</li><li>CircuitBreaker</li><li>circuitBreaker.enabled    用来跟踪 circuit 的健康性，如果未达标则让 request 短路，默认值为 true</li><li>circuitBreaker.requestVolumeThreshold    用于设置一个 rolling window 内最小的请求数。如果设定为 20 ，那么当一个 rolling window 的时间内（比如一个 rolling window 是10秒）收到19个请求，即使19个请求都失败，也不会触发 circuit break,默认值为 20.</li><li>circuitBreaker.sleepWindowInMilliseconds    用于设置一个触发短路的时间值，当该值设定为 5000 时，则当触发 circuit break 后的 5000 毫秒内都会拒绝 request ,也就是 5000 毫秒后才会关闭 circuit .默认值为 5000.</li><li>circuitBreaker.errorThresholdPercentage    用于设置错误率阈值，当错误里超出此值时，所有请求都会触发 fallback ,默认值为 50 .</li><li>circuitBreaker.forceOpen    如果配置为 true ,则强制打开熔断器，在这个状态下将拒绝所有请求，默认值为 false.</li><li>circuitBreaker.forceClosed    如果配置为 true 则强制关闭熔断器，在这个状态下，不管错误率有多高，都允许请求，默认值为 false.</li><li>Metrics</li><li>metrics.rollingStats.timeInMilliseconds    设置统计时间窗口值，单位为毫秒。circuit break 的打开会根据 1 个 rolling window 的统计来计算。若 rolling window 被设定为 10000 毫秒，则 rolling window 会被分成多个 buckets,每个 bucket 包含 success、failure、timeout、rejection 的次数的统计信息。默认值为 10000 毫秒。</li><li>metrics.rollingStats.numBuckets    设定一个 rolling window 被划分的数量，若 numBuckets=10、rolling window=10000,那么一个burket的时间即为1秒。必须符合 rolling window % numberBurkets==0 .默认值为 10 .</li><li>metrics.rollingPercentile.enabled    是否开启指标的计算和跟踪，默认值为 true。</li><li>metrics.rollingPercentile.timeInMilliseconds    设置 rolling percentile window 的时间，默认值为 60000 毫秒。</li><li>metrics.rollingPercentile.numBuckets    设置 rolling percentile window numBuckets    默认值 6 。</li><li>metrics.rollingPercentile.bucketSize    如果设置 bucketSize=100 ，window=10 秒，若这10 秒内有 500 次执行，只有最后 100 次执行会被统计到 bucket 里去。增加该值会增加内存开销。默认值为 100</li><li>metrics.healthSnapshot.intervalInMilliseconds    用来计算影响断路器状态的健康快照的间隔等待时间，默认值为 500 毫秒。</li><li>Request Context</li><li>requestCache.enabled    是否开启请求缓存功能，默认值为 true</li><li>requestLog.enabled    记录日志到 HystrixRequestLog,默认值为 true</li></ul></li></ul></li></ul></li></ul></li><li>Collapser Properties<ul><li>maxRequestsInBatch    单次批处理的最大请求数，达到该数量触发批处理，默认值为 Integer.MAX_VALUE。</li><li>timerDelayInMilliseconds    触发批处理的延迟，延迟也可以为创建批处理的时间与该值的和，默认值为 10 毫秒</li><li>requestCache.enabled    是否启用对 HytrixCollapser.execute() 和 HytrixCollapser.queue() 的请求缓存，默认值为 true</li></ul></li><li>Thread Pool Properties<pre><code>- coreSize    并发请求核心线程数，默认值 10 - maximumSize    在1.5.9中添加。此属性设置最大线程池大小。这是在不开始拒绝HystrixCommands的情况下可以支持的最大并发量。请注意，只有同时设置了allowMaximumSizeToDivergeFromCoreSize，此设置才会生效。在1.5.9之前，核心和最大大小始终相等- maxQueueSize    BlockingQueue 的最大队列数，当设置为 -1 时，会使用 SynchronousQueue ; 值为正数时，会使用 LinkedBlockingQueue.该设置只会在初始化时有效，之后不能修改 threadpool 的 queue size。默认值为 -1.- queueSizeRejectionThreshold    即使没有达到 maxQueueSize 但若达到了 queueSizeRejectionThreshold 该值后，请求也会被拒绝。因为  maxQueueSize 不能被动态修改，而 queueSizeRejectionThreshold 参数将允许我们动态设置该值，如果 maxQueueSize=-1，该字段将不起作用。- keepAliveTimeMinutes    设置存活时间，单位为分钟，如果 coreSize 小于  maximumSize 那么该实例控制一个线程从使用完成到被释放的时间（闲置时间）。默认值为 1 分钟  - allowMaximumSizeToDivergeFromCoreSize    该属性允许 maximumSize 的配置生效。那么该值可以等于或高于 coreSize 。设置 coreSize 小于 maximumSize 会创建一个线程池，该线程池可以支持 maximumSize 并发，但在相对不活动期间将向系统返回线程。默认值为 false。- metrics.rollingStats.timeInMilliseconds    设置滚动时间窗的时间，单位为毫秒，默认值是 10000- metrics.rollingStats.numBuckets    设置滚动时间窗划分桶的数量。默认值为 10 </code></pre></li></ul><h3 id="Feign整合Hystrix服务容错"><a href="#Feign整合Hystrix服务容错" class="headerlink" title="Feign整合Hystrix服务容错"></a>Feign整合Hystrix服务容错</h3><p>需要EurekaClient,Feign,Hystrix的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>属性文件中开启 Feign 对 Hytrix 的支持</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开启feign对Hystrix的支持</span></span><br><span class="line"><span class="meta">feign.hystrix.enabled</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><h4 id="Fallback-方式"><a href="#Fallback-方式" class="headerlink" title="Fallback 方式"></a>Fallback 方式</h4><ul><li>UserRemoteClient</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"eureka-client-service"</span> ,fallback = UserRemoteClientFallBack<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">UserRemoteClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/hello"</span>)</span><br><span class="line">    <span class="function">String <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>UserRemoteClientFallBack</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRemoteClientFallBack</span> <span class="keyword">implements</span> <span class="title">UserRemoteClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"null"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>启动类feign 扫包</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableHystrix</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span>(basePackages = <span class="string">"com.study.feignclient"</span>)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringcloudHystrixApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringcloudHystrixApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>控制器调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserRemoteClient userRemoteClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/call/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">cellHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userRemoteClient.hello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们停掉所有 eureka-client-service 服务后调用 发现返回了  “null”  这正是我们所预见的，</p><h4 id="FallbackFactory-方式"><a href="#FallbackFactory-方式" class="headerlink" title="FallbackFactory 方式"></a>FallbackFactory 方式</h4><ul><li>UserRemoteClientFallbackFactory</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> feign.hystrix.FallbackFactory;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRemoteClientFallbackFactory</span> <span class="keyword">implements</span> <span class="title">FallbackFactory</span>&lt;<span class="title">UserRemoteClient</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(UserRemoteClientFallbackFactory<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserRemoteClient <span class="title">create</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line">        logger.error(<span class="string">"UserRemoteClient回退："</span>, cause);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserRemoteClient() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"fail"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改 UserRemoteClient 的 @FeignClient 注解属性配置 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"eureka-client-service"</span> ,fallbackFactory = UserRemoteClientFallBack<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">UserRemoteClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/hello"</span>)</span><br><span class="line">    <span class="function">String <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释掉前面  UserRemoteClientFallBack 类的代码 再次测试  发现得到相同的结果。</p><h3 id="Feign-中禁用-Hystrix"><a href="#Feign-中禁用-Hystrix" class="headerlink" title="Feign 中禁用 Hystrix"></a>Feign 中禁用 Hystrix</h3><ul><li>方式一</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">feign.hystrix.enabled</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure><ul><li>方式二</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfiguration</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line">    <span class="keyword">public</span> Feign.<span class="function">Builder <span class="title">feignBuilder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Feign.builder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Hystrix-监控"><a href="#Hystrix-监控" class="headerlink" title="Hystrix 监控"></a>Hystrix 监控</h3><p>在微服务架构中，Hystrix 除了提供容错外，还提供了实时监控功能。在服务调用时， Hystrix 会实时累积关于 HystrixCommand 的执行信息，比如每秒的请求数，成功数等。更多的指标信息请查看官方文档：<a href="https://github.com/Netflix/Hystrix/wiki/Metrics-and-Monitoring" target="_blank" rel="noopener">https://github.com/Netflix/Hystrix/wiki/Metrics-and-Monitoring</a></p><p>除了 Hystrix 本身的 依赖还需 Actuator 的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动服务，访问地址：<a href="http://localhost:8087/actuator/hystrix.stream" target="_blank" rel="noopener">http://localhost:8087/actuator/hystrix.stream</a></p><p>（注意：这里不要用接口测试工具访问。直接在浏览器中访问）</p><p>如果浏览器 返回 404</p><p>那就在配置文件中配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#暴露所有端点</span></span><br><span class="line"><span class="meta">management.endpoints.web.exposure.include</span>=<span class="string">*</span></span><br></pre></td></tr></table></figure><p>如果浏览器页面一直显示</p><blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ping: </span><br><span class="line"></span><br><span class="line">ping: </span><br><span class="line"></span><br><span class="line">ping: </span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><p>说明成功了。只是没有检测到数据。这时我们访问下 控制器接口。就会发现已下类似的数据了</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200509173423944.png" alt="image-20200509173423944"></p><p>为了方便阅读数据，我们可以借助 dashborad 来查看监控数据</p><h3 id="整合-Dashboard-查看监控数据"><a href="#整合-Dashboard-查看监控数据" class="headerlink" title="整合 Dashboard 查看监控数据"></a>整合 Dashboard 查看监控数据</h3><ul><li>添加 dashboard 依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>启动类加上注解 @EnableHystrixDashboard</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableHystrix</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span>(basePackages = <span class="string">"com.study.feignclient"</span>)</span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringcloudHystrixApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringcloudHystrixApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启服务，浏览器访问：<a href="http://localhost:8087/hystrix" target="_blank" rel="noopener">http://localhost:8087/hystrix</a></p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200509174332525.png" alt="image-20200509174332525"></p><ul><li>1 处填写监控地址：<a href="http://localhost:8087/actuator/hystrix.stream" target="_blank" rel="noopener">http://localhost:8087/actuator/hystrix.stream</a></li><li>2 处填写监控同步的时间间隔</li><li>标题（任意）</li></ul><p>填写完后 点击下方的按钮</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200509174713800.png" alt="image-20200509174713800"></p><p>如果页面没有数据。同上面一样访问下 控制器的接口 再过来看就有数据了</p><h3 id="Turbine-聚合集群数据"><a href="#Turbine-聚合集群数据" class="headerlink" title="Turbine 聚合集群数据"></a>Turbine 聚合集群数据</h3><p>集群监控数据流：<a href="http://localhost:8087/turbine.stream" target="_blank" rel="noopener">http://localhost:8087/turbine.stream</a></p><p>监控面板：<a href="http://localhost:8087/hystrix/" target="_blank" rel="noopener">http://localhost:8087/hystrix/</a></p><p>同前面一样，进入监控面板，填写监控数据流的地址，时间间隔，和标题。我看到类似如下界面。</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/hystrix%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF%E8%AF%B4%E6%98%8E.png" alt="hystrix监控面板说明"></p><p>这里我简单说下我的几个服务。</p><p>我这里发布的 8081 端口服务。实例名为 eureka-client-service 并提供了两个接口服务，/test  和 /call/hello</p><p>8082、8084、8087 作为 spring-cloud-hystrix 集群消费  8081的服务  /call/hello 接口</p><p>8085 作为 feign-provider 实例，消费 8081 服务的 /test  和 /call/hello 接口</p><p>所以上图中可看到。#test() 下只有一个host。 #hello() 下有4个 host.</p><p>（8087的服务是我们提供集群监控的服务。从我上面的访问地址就可以看出来。我这里同时把 8087 也作为消费者并加入集群。实际生产中我们的的监控服务可能会单独出来了并不会加入业务的消费中。我们只要配置好它单独的实例名称即可。 ）</p><ul><li>8087端口。我的监控服务的监控相关的配置。</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#监控的服务实例名，多个用逗号分隔</span></span><br><span class="line"><span class="meta">turbine.appConfig</span>=<span class="string">spring-cloud-hystrix,feign-provider</span></span><br><span class="line"><span class="meta">turbine.aggregator.clusterConfig</span>=<span class="string">default</span></span><br><span class="line"><span class="meta">turbine.clusterNameExpression</span>=<span class="string">new String("default")</span></span><br><span class="line"><span class="comment">#使用同一主机上的服务通过主机号与端口号组合进行区分</span></span><br><span class="line"><span class="meta">turbine.combine-host-port</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p>注意：</p><p>所有希望被监控的 feign 客户端的集群实例 </p><ul><li>必须加入 hystrix、actuator 依赖。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>启动类必须加上 @EnableHystrix 注解</p></li><li><p>属性配置必须开启  feign 对 actuator 的支持</p></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开启feign对Hystrix的支持</span></span><br><span class="line"><span class="meta">feign.hystrix.enabled</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><ul><li>必须暴露相关端点</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#暴露所有端点   (根据自己的情况暴露端点)</span></span><br><span class="line"><span class="comment">#management.endpoints.web.exposure.include=*</span></span><br></pre></td></tr></table></figure><h3 id="context-path-导致监控失败"><a href="#context-path-导致监控失败" class="headerlink" title="context-path 导致监控失败"></a>context-path 导致监控失败</h3><p>在《spring cloud 微服务 入门、进阶与实战》书中描述了如果被监控的服务中设置了 context-path ,则会导致 Turbine 无法获取监控数据。</p><p>这个时候要在 Turbine 中指定  turbine.instanceUrlSuffix 来解决这个问题：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">turbine.instanceUrlSuffix</span>=<span class="string">/sub/hystrix.stream</span></span><br></pre></td></tr></table></figure><p>sub 用于监控服务的 context-path 上面这种方式是全局配置，会有一个问题，就是一般我们在使用中会用一个集群去监听多个服务，如果每个服务的 context-path 都不一样，这个时候有一些就会出问题，那么就需要对每一个服务做一个集群，然后配置集群对应的 context-path：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">turbine.instanceUrlSuffix.集群名称</span>=<span class="string">/sub/hystrix.stream</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> java </tag>
            
            <tag> spring cloud </tag>
            
            <tag> Hystrix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gitee-page配置自定义域名</title>
      <link href="/myblog/gitee-page%E9%85%8D%E7%BD%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/"/>
      <url>/myblog/gitee-page%E9%85%8D%E7%BD%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<h3 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h3><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200507193617495.png" alt="image-20200507193617495"></p><p>通过gitee 上面的简单帮助我们可以看到主要分两大部</p><p>Step 1、绑定你已备案的域名</p><p>Step 2、通过解析域名的DNS服务商，配置域名CNAME解析到gitee.gitee.io</p><h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h3><h4 id="填写好想配置的域名"><a href="#填写好想配置的域名" class="headerlink" title="填写好想配置的域名"></a>填写好想配置的域名</h4><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200507193918111.png" alt="image-20200507193918111"></p><h4 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h4><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200507163153819.png" alt="image-20200507163153819"></p><p>点击免费申请HTTPS证书（跳转到第三方生成证书）</p><h4 id="第三方网站生成证书"><a href="#第三方网站生成证书" class="headerlink" title="第三方网站生成证书"></a>第三方网站生成证书</h4><p>比如我 购买了一个域名  wu-zy.com <a id="more"></a></p><p>因为我正在给自己的 gitee 博客配置证书，所以这里我希望用三级域名 blog.wu-zy.com 来配置我的博客域名。</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200507194629070.png" alt="image-20200507194629070"></p><p>填写好域名后点击 创建xxxx证书</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200507163504339.png" alt="image-20200507163504339"></p><p>下载并安装那个客户端的软件，keyManage</p><p>本地启动好软件，密码什么的设置好就可以了，然后会有这个见面</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200507163846287.png" alt="image-20200507163846287"></p><p>本地启动好后，返回浏览器，点击启动KeyManage 的继续</p><p>会打开KeyManage 出现类似这样的界面</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200507194908430.png" alt="image-20200507194908430"></p><p>根据提示返回浏览器经行操作。ok的话网页会变成类似下面这种</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200507195206754.png" alt="image-20200507195206754"></p><p>网页的提示也很清楚。</p><ul><li><p>去域名服务商去配置解析。我的是阿里云的域名。（前提是自己购买了一个域名）</p><p>去到阿里云的  域名列表-&gt;解析。列表处点击 添加记录</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200507195351897.png" alt="image-20200507195351897"></p></li><li><p>这里填写 </p><ol><li><p>记录类型 选 TXT，</p></li><li><p>主机记录  _dnsauth.blog （也就是前面的 TXT记录）</p></li><li><p>解析线路  默认就好</p></li><li><p>记录值  就是前面的 记录值</p></li><li><p>TTL  就选 10 分钟。</p></li></ol></li><li><p>回到这里：</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200507165632482.png" alt="image-20200507165632482"></p></li></ul><p>先点击检测下检测。ok 的话 再点击验证</p><p> 如果顺利（可能会有点慢。只要检测成功，这里的验证问题就不大）就会弹出一个界面</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200507194537663.png" alt="image-20200507194537663"></p><p>点击按钮保存到KeyManager</p><h4 id="把证书配置在gitee"><a href="#把证书配置在gitee" class="headerlink" title="把证书配置在gitee"></a>把证书配置在gitee</h4><p>在证书管理界面点击更多 并选择 证书详情</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200507195926657.png" alt="image-20200507195926657"></p><p>在详情页查看PEM</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200507200020953.png" alt="image-20200507200020953"></p><p>把这里的 证书（和证书链）  和 私钥 连个框的内容分别复制到 gitee 的配置域名证书的两个框里</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200507200124031.png" alt="image-20200507200124031"></p><p>就是这里的两个框  然后点击提交</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200507163153819.png" alt="image-20200507163153819"></p><h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h3><p>在阿里云再添加一条解析，把它映射配置到 gitee.gitee.io </p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200507200721494.png" alt="image-20200507200721494"></p><p>点击确定</p><p>到此阿里云域名解析共有两条记录了</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200507202453884.png" alt="image-20200507202453884"></p><p>再回到gitee 重新发布更新 </p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200507200929015.png" alt="image-20200507200929015"></p><p>就可以通过 自己配置的域名 blog.wu-zy.com 来访问自己的博客了</p><p>（结束）</p><hr><p>参考：</p><p><a href="https://blog.csdn.net/L158943041/article/details/103036136" target="_blank" rel="noopener">https://blog.csdn.net/L158943041/article/details/103036136</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 其它 </category>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>声明式REST客户端Feign</title>
      <link href="/myblog/%E5%A3%B0%E6%98%8E%E5%BC%8FREST%E5%AE%A2%E6%88%B7%E7%AB%AFFeign/"/>
      <url>/myblog/%E5%A3%B0%E6%98%8E%E5%BC%8FREST%E5%AE%A2%E6%88%B7%E7%AB%AFFeign/</url>
      
        <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><blockquote><p>​        Feign是一个声明式REST客户端，它能让REST调用更加简单。Feign提供了HTTP请求的模板，通过编写简单的接口和插入注解，就可以定义好HTTP请求的参数、格式、地址等信息。</p><p>而Feign则会完全代理HTTP请求，我们只需要像调用方法一样调用它就可以完成服务请求及相关处理。 Spring Cloud对 Feign进行了封装，使其支持 Springmvc标准注解和Httpmessage Converters Feign可以与 Eureka和 Ribbon组合使用以支持负载均衡。</p><p align="right">——《spring cloud 微服务 入门、进阶与实战》第70页<p></blockquote><h3 id="在spring-cloud-中集成Feign"><a href="#在spring-cloud-中集成Feign" class="headerlink" title="在spring cloud 中集成Feign"></a>在spring cloud 中集成Feign</h3><ul><li>添加Feign starter</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>定义Feign客户端</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> UserRemotClient</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> wuzhiyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/5/2 23:16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"eureka-client-service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRemoteClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/hello"</span>)</span><br><span class="line">    <span class="function">String <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>启动类开启Feign客户端并扫包<a id="more"></a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients</span>(basePackages = <span class="string">"com.study.feignInfo"</span>)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringcloudFeignApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringcloudFeignApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试Feign客户端的controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRemoteClient userRemoteClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/call/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">cellHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userRemoteClient.hello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动项目访问 /call/hello  成功返回了  eureka-client-service 服务的数据</p><h3 id="自定义Feign配置"><a href="#自定义Feign配置" class="headerlink" title="自定义Feign配置"></a>自定义Feign配置</h3><h4 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h4><ul><li>增加配置类 并配置日志级别</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> feign.Logger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.<span class="function">Level <span class="title">feignLoggerLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在 UserRemoteClient @FeignClient注解加入配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"eureka-client-service"</span> ,configuration = FeignConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br></pre></td></tr></table></figure><ul><li>properties中增加</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#给某个 Feign客户端类 设定日志级别。（这里配置后才能输出日志）</span></span><br><span class="line"><span class="meta">logging.level.com.study.feignInfo.UserRemoteClient</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure><p>再次调用测试 /call/hello 接口，控制台日志输出：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[UserRemoteClient#hello]</span> <span class="string">&lt;--- HTTP/1.1 200 (33ms)</span></span><br><span class="line"><span class="meta">[UserRemoteClient#hello]</span> <span class="string">connection: keep-alive</span></span><br><span class="line"><span class="meta">[UserRemoteClient#hello]</span> <span class="string">content-length: 5</span></span><br><span class="line"><span class="meta">[UserRemoteClient#hello]</span> <span class="string">content-type: text/plain;charset=UTF-8</span></span><br><span class="line"><span class="meta">[UserRemoteClient#hello]</span> <span class="string">date: Sat, 02 May 2020 15:41:22 GMT</span></span><br><span class="line"><span class="meta">[UserRemoteClient#hello]</span> <span class="string">keep-alive: timeout=60</span></span><br><span class="line"><span class="meta">[UserRemoteClient#hello]</span> <span class="string"></span></span><br><span class="line"><span class="meta">[UserRemoteClient#hello]</span> <span class="string">hello</span></span><br><span class="line"><span class="meta">[UserRemoteClient#hello]</span> <span class="string">&lt;--- END HTTP (5-byte body)</span></span><br></pre></td></tr></table></figure><h4 id="契约配置"><a href="#契约配置" class="headerlink" title="契约配置"></a>契约配置</h4><p>spring cloud 在 Feign 基础上做了扩展，使其能够支持 spring mvc 的注解。原生的 Feign 是不支持 spring mvc 的注解的。如果想用原生的方式来定义 Feign 客户端，可通过如下配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Contract <span class="title">feignContract</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> feign.Contract.Default();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当这样配置后，如果前面定义客户端的代码不改变，项目重启时会报错。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org<span class="variable">.springframework</span><span class="variable">.beans</span><span class="variable">.factory</span><span class="variable">.UnsatisfiedDependencyException</span>: Error creating bean <span class="keyword">with</span> name 'userController': Unsatisfied dependency expressed through field 'userRemoteClient'; nested exception is org<span class="variable">.springframework</span><span class="variable">.beans</span><span class="variable">.factory</span><span class="variable">.BeanCreationException</span>: Error creating bean <span class="keyword">with</span> name 'com<span class="variable">.study</span><span class="variable">.feignInfo</span><span class="variable">.UserRemoteClient</span>': FactoryBean threw exception on object creation; nested exception is java<span class="variable">.lang</span><span class="variable">.IllegalStateException</span>: Method UserRemoteClient#hello() <span class="keyword">not</span> annotated <span class="keyword">with</span> HTTP method <span class="keyword">type</span> (ex. GET, POST)</span><br></pre></td></tr></table></figure><h4 id="Basic-认证配置"><a href="#Basic-认证配置" class="headerlink" title="Basic 认证配置"></a>Basic 认证配置</h4><p>如果服务端开启了 Basic 认证。我们可以通过下面方式配置登录名和密码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BasicAuthRequestInterceptor <span class="title">basicAuthRequestInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BasicAuthRequestInterceptor(<span class="string">"WuZhiYong"</span>, <span class="string">"123456"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果服务端使用的其它的认证方式，我们可以配置自定义请求拦截器。把相应的认证信息存入head 中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> feign.RequestInterceptor;</span><br><span class="line"><span class="keyword">import</span> feign.RequestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignBasicAuthRequestInterceptor</span> <span class="keyword">implements</span> <span class="title">RequestInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(RequestTemplate requestTemplate)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//业务逻辑 比如存放 token 。。。</span></span><br><span class="line">        requestTemplate.header(<span class="string">"Authorization"</span>,<span class="string">"Basic V3VaaGlZb25nOjEyMzQ1Ng=="</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再配置上自定义的拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FeignBasicAuthRequestInterceptor <span class="title">basicAuthRequestInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FeignBasicAuthRequestInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="超时时间配置"><a href="#超时时间配置" class="headerlink" title="超时时间配置"></a>超时时间配置</h4><p>链接超时  读取超时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Request.<span class="function">Options <span class="title">options</span><span class="params">()</span></span>&#123;</span><br><span class="line">          <span class="comment">/**</span></span><br><span class="line"><span class="comment">           * <span class="doctag">@param</span> connectTimeout value.</span></span><br><span class="line"><span class="comment">           * <span class="doctag">@param</span> connectTimeoutUnit with the TimeUnit for the timeout value.</span></span><br><span class="line"><span class="comment">           * <span class="doctag">@param</span> readTimeout value.</span></span><br><span class="line"><span class="comment">           * <span class="doctag">@param</span> readTimeoutUnit with the TimeUnit for the timeout value.</span></span><br><span class="line"><span class="comment">           * <span class="doctag">@param</span> followRedirects if the request should follow 3xx redirections.</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Request.Options(<span class="number">50000L</span>, TimeUnit.MILLISECONDS, <span class="number">10000</span>,TimeUnit.MILLISECONDS,<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="客户端组件配置"><a href="#客户端组件配置" class="headerlink" title="客户端组件配置"></a>客户端组件配置</h4><p>Feign 中默认使用 JDK 原生的 URLConnection 发送 HTTP 请求，我们可以集成别的组件来替换它。比如Apache HttpClient.OkHttp.</p><p>配置OkHttp ：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-okhttp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Feign 使用 OkHttp</span></span><br><span class="line"><span class="meta">feign.httpclient.enabled</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">feign.okhttp.enabled</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关于配置可参看源码</span></span><br><span class="line">org.springframework.cloud.openfeign.FeignAutoConfiguration.HttpClientFeignConfiguration</span><br><span class="line">  </span><br><span class="line">org.springframework.cloud.openfeign.FeignAutoConfiguration.OkHttpFeignConfiguration</span><br></pre></td></tr></table></figure><h4 id="GZIP压缩配置"><a href="#GZIP压缩配置" class="headerlink" title="GZIP压缩配置"></a>GZIP压缩配置</h4><p>配置GZIP来压缩数据可以有效的节约网络资源，提升接口性能。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置   开启压缩</span></span><br><span class="line"><span class="meta">feign.compression.request.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">feign.compression.response.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#配置压缩的类型</span></span><br><span class="line"><span class="meta">feign.compression.request.mime-types</span>=<span class="string">text/xml,application/xml,application/json</span></span><br><span class="line"><span class="comment">#最小压缩值标准</span></span><br><span class="line"><span class="meta">feign.compression.request.min-request-size</span>=<span class="string">2048</span></span><br></pre></td></tr></table></figure><p>注意：只有当Feign的httpClient 不是okhttp3的时候，压缩才会生效。（参看下面源代码）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.cloud.openfeign.encoding.FeignAcceptGzipEncodingAutoConfiguration</span><br></pre></td></tr></table></figure><h4 id="配置编码器解码器"><a href="#配置编码器解码器" class="headerlink" title="配置编码器解码器"></a>配置编码器解码器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> feign.codec.Decoder;</span><br><span class="line"><span class="keyword">import</span> feign.codec.Encoder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfiguration</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Decoder <span class="title">decoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyDecoder();<span class="comment">//自定义实现 Decoder</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Encoder <span class="title">encoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MyEncoder();<span class="comment">//自定义实现 Encoder</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用自定义Feign的配置"><a href="#使用自定义Feign的配置" class="headerlink" title="使用自定义Feign的配置"></a>使用自定义Feign的配置</h4><p>在配置文件中自定义配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 链接超时时间</span></span><br><span class="line"><span class="meta">feign.client.config.feignName.connectTimeout</span>=<span class="string">5000</span></span><br><span class="line"><span class="comment"># 读取超时时间</span></span><br><span class="line"><span class="meta">feign.client.config.feignName.readTimeout</span>=<span class="string">5000</span></span><br><span class="line"><span class="comment"># 日志等级</span></span><br><span class="line"><span class="meta">feign.client.config.feignName.loggerLevel</span>=<span class="string">full</span></span><br><span class="line"><span class="comment"># 重试</span></span><br><span class="line"><span class="meta">feign.client.config.feignName.retryer</span>=<span class="string">com.example.SimpleRetryer</span></span><br><span class="line"><span class="comment"># 拦截器</span></span><br><span class="line"><span class="meta">feign.client.config.feignName.requestInterceptors[0]</span>=<span class="string">com.example.FooRequestInterceptor</span></span><br><span class="line"><span class="meta">feign.client.config.feignName.requestInterceptors[1]</span>=<span class="string">com.example.BarRequestInterceptor</span></span><br><span class="line"><span class="comment"># 编码器</span></span><br><span class="line"><span class="meta">feign.client.config.feignName.encoder</span>=<span class="string">com.example.SimpleEncoder</span></span><br><span class="line"><span class="comment"># 解码器</span></span><br><span class="line"><span class="meta">feign.client.config.feignName.decoder</span>=<span class="string">com.example.SimpleDecoder</span></span><br><span class="line"><span class="comment"># 契约</span></span><br><span class="line"><span class="meta">feign.client.config.feignName.contract</span>=<span class="string">com.example.SimpleContract</span></span><br></pre></td></tr></table></figure><p>其中 feignName 表示我们定义的 Feign 客户端里配置的服务名，即下面 @FeignClient 注解的 value 值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"eureka-client-service"</span> ,configuration = FeignConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">UserRemoteClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/hello"</span>)</span><br><span class="line">    <span class="function">String <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="继承特性"><a href="#继承特性" class="headerlink" title="继承特性"></a>继承特性</h4><p>Feign 的继承特性可以让服务的接口定义单独抽出来，作为公共的依赖，以方便使用。</p><ul><li><p>创建一个 maven quickstart 项目 命名为 feign-api</p><p>我们可看到 pom 中这个项目的坐标信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.study<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-feign-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure><p>加入 feign 和 spring cloud 相关依赖</p><p>再建立一个fegin 客户端类  （完了后运行编译，打包，install 看看有没有什么问题）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"feign-provider"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRemoteClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/name"</span>)</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>再建立一个spring cloud 项目 命名为 feign-provider。 </p><p>引入 Eureka 的依赖 并把服务实例名配置为 feign-provider</p><p>引入 feign-api 项目的坐标作为依赖</p><p>建立一个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">implements</span> <span class="title">UserRemoteClient</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"my name is wuzhiyong "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>再建立一个spring cloud 项目 命名为 feign-consumer。(如果注册到 Eureka 就引入相关依赖并配置)</p><p>引入 feign-api 项目的坐标作为依赖</p><p>建立一个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    UserRemoteClient userRemoteClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/call"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userRemoteClient.getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在启动类上配置 feign client 扫包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span>(basePackages = <span class="string">"com.study"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringcloudFeignConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringcloudFeignConsumerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>分别启动 注册中心，feign-provider ,feign-consumer 访问 feign-consumer 的 call 接口可以得到 feign-provider 返回的数据。</p><h4 id="多参数请求构造"><a href="#多参数请求构造" class="headerlink" title="多参数请求构造"></a>多参数请求构造</h4><p>多参数请求构造分为 GET 请求和 POST 请求两种方式</p><p>feign-api 添加如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/user/info"</span>)</span><br><span class="line"><span class="function">User <span class="title">getUserInfo</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span>String name, @<span class="title">RequestParam</span><span class="params">(<span class="string">"age"</span>)</span><span class="keyword">int</span> age)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/user/detail"</span>)</span><br><span class="line"><span class="function">String <span class="title">getUserDetail</span><span class="params">(@RequestParam Map&lt;String, Object&gt; param)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/user/add"</span>)</span><br><span class="line"><span class="function">String <span class="title">addUser</span><span class="params">(@RequestBody User user)</span></span>;</span><br></pre></td></tr></table></figure><hr><p>书中说 addUser 实现类 也要加上 @RequestBody 注解，我试了下没加上也可以。然后传map 参数我这边后台接收不到，一直解析不成功。（可能是没有加第三方解析json的依赖的缘故吧）</p><h3 id="脱离-spring-cloud-使用-Feign"><a href="#脱离-spring-cloud-使用-Feign" class="headerlink" title="脱离 spring cloud 使用 Feign"></a>脱离 spring cloud 使用 Feign</h3><h4 id="原生注解方式"><a href="#原生注解方式" class="headerlink" title="原生注解方式"></a>原生注解方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> feign.Body;</span><br><span class="line"><span class="keyword">import</span> feign.Headers;</span><br><span class="line"><span class="keyword">import</span> feign.Param;</span><br><span class="line"><span class="keyword">import</span> feign.RequestLine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRemoteClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestLine</span>(value = <span class="string">"GET user/hello"</span>)</span><br><span class="line">    <span class="function">String <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestLine</span>(<span class="string">"GET /repos/&#123;id&#125;/&#123;name&#125;/xxx"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRepos</span><span class="params">(@Param(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id,@<span class="title">Param</span><span class="params">(<span class="string">"name"</span>)</span> String name)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestLine</span>(<span class="string">"POST /user/&#123;name&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">(@Param(<span class="string">"name"</span>)</span> String name)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestLine</span>(<span class="string">"POST /user"</span>)</span><br><span class="line">    <span class="meta">@Headers</span>(<span class="string">"Content-Type:application/json"</span>)</span><br><span class="line">    <span class="meta">@Body</span>(<span class="string">"%7B\"username\":\"&#123;user_name&#125;\",\"password\":&#123;pwd&#125;\"%7D"</span>)</span><br><span class="line">    <span class="function">String <span class="title">postUser</span><span class="params">(@Param(<span class="string">"user_name"</span>)</span> String name,@<span class="title">Param</span><span class="params">(<span class="string">"pwd"</span>)</span> String pwd)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    private UserRemoteClient userRemoteClient = Feign.builder().target(UserRemoteClient.class,"http://localhost:8081");</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/call/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">cellHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"8888888888888888888888888888"</span>);</span><br><span class="line">        <span class="keyword">return</span> userRemoteClient.hello();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/repos/&#123;id&#125;/&#123;name&#125;/xxx"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRepos</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id, @<span class="title">PathVariable</span><span class="params">(<span class="string">"name"</span>)</span> String name)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userRemoteClient.getRepos(id,name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/user/&#123;name&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">(@PathVariable(<span class="string">"name"</span>)</span> String name)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userRemoteClient.addUser(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="function">String <span class="title">postUser</span><span class="params">(@RequestParam(<span class="string">"user_name"</span>)</span> String name, @<span class="title">RequestParam</span><span class="params">(<span class="string">"pwd"</span>)</span> String pwd)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userRemoteClient.postUser(name,pwd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>依赖可以用 springcloud feign 的依赖。也可以用 feign 本身的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>10.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="构建-Feign-对象"><a href="#构建-Feign-对象" class="headerlink" title="构建 Feign 对象"></a>构建 Feign 对象</h4><p>feign 是通过 builder 模式来构建代理对象的。我们可以写一个通用的工具类来构建对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> feign.Feign;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestApiCallUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getRestClient</span><span class="params">(Class&lt;T&gt; apiType,String url)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  Feign.builder().target(apiType,url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制器中这样调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    private UserRemoteClient userRemoteClient = RestApiCallUtils.getRestClient(UserRemoteClient.class,"http://localhost:8081");</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/call/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">cellHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"8888888888888888888888888888"</span>);</span><br><span class="line">        <span class="keyword">return</span> userRemoteClient.hello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：在调用Feign.builder().target()方法的时候传的 url 是包括 http:// 前缀的。否则控制台会报错：values must be absolute.</p><h4 id="其它配置"><a href="#其它配置" class="headerlink" title="其它配置"></a>其它配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestApiCallUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getRestClient</span><span class="params">(Class&lt;T&gt; apiType,String url)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  Feign.builder()</span><br><span class="line">          <span class="comment">//编码解码</span></span><br><span class="line">                .encoder( <span class="keyword">new</span> MyEncoder())</span><br><span class="line">                .decoder( <span class="keyword">new</span> MyDecoder())</span><br><span class="line">          <span class="comment">//日志</span></span><br><span class="line">                .logger( <span class="keyword">new</span> Logger.JavaLogger().appendToFile(System.getProperties().getProperty(<span class="string">"logpath"</span>)+<span class="string">"/http.log"</span>)).logLevel(Logger.Level.BASIC)</span><br><span class="line">                <span class="comment">//超时时间</span></span><br><span class="line">          .options( <span class="keyword">new</span> Request.Options(<span class="number">10000</span>,<span class="number">10000</span>))</span><br><span class="line">          <span class="comment">//拦截器</span></span><br><span class="line">                .requestInterceptor( <span class="keyword">new</span> MyInterceptor())</span><br><span class="line">          <span class="comment">//客户端组件</span></span><br><span class="line">                .client( <span class="keyword">new</span> OkHttpClient())</span><br><span class="line">          <span class="comment">//重试</span></span><br><span class="line">                .retryer(<span class="keyword">new</span> Retryer.Default())</span><br><span class="line">                .target(apiType,url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>参考：</p><p>《spring cloud 微服务 入门、进阶与实战》</p><p>书中代码：</p><p><a href="https://github.com/yinjihuan/spring-cloud/tree/master/Spring-Cloud-Book-Code-2/ch-5" target="_blank" rel="noopener">https://github.com/yinjihuan/spring-cloud/tree/master/Spring-Cloud-Book-Code-2/ch-5</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> java </tag>
            
            <tag> spring cloud </tag>
            
            <tag> Feign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>客户端负载均衡Ribbon</title>
      <link href="/myblog/%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1Ribbon/"/>
      <url>/myblog/%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1Ribbon/</url>
      
        <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><blockquote><p>目前主流的负载方案分为两种：一种是集中式负载均衡，在消费者和服务提供方中间使用独立的代理方式进行负载，有硬件的（比如F5），也有软件的（比如 Nginx）。另一种则是客户端自己做负载均衡，根据自己的请求情况做负载， Ribbon就属于客户端自己量负载。如果用一句话介绍，那就是： Ribbon是 Netflix开源的一款用于客户端负载均衡的工具软件。</p><p align="right">——《spring cloud 微服务 入门、进阶与实战》第52页<p></blockquote><h3 id="与spring-cloud集成"><a href="#与spring-cloud集成" class="headerlink" title="与spring cloud集成"></a>与spring cloud集成</h3><p>在spring cloud 项目中集成Ribbon 只需要在pom.xml 中添加下面的依赖即可，如果用了Eureka也可以不用配置，因为Eureka 中已经引用了Ribbon</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="RestTemplate负载均衡"><a href="#RestTemplate负载均衡" class="headerlink" title="RestTemplate负载均衡"></a>RestTemplate负载均衡</h3><p>新建一个spring cloud项目 命名为 springcloud-ribbon<a id="more"></a></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#properties</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">spring-cloud-ribbon</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8083</span></span><br></pre></td></tr></table></figure><p>新建一个配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写controller 测试接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/ribbon/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">callHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://eureka-client-service/user/hello"</span>,String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>restTemplate 在这里通过服务实例的名字调用的时候，当注册在注册中心的多个服务都叫eureka-client-service名字的时候。就会自动做负载均衡（默认轮询策略）。</p><img data-src="/myblog/%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1Ribbon/image-20200502112502789.png" class=""><h3 id="RestTemplate注解原理"><a href="#RestTemplate注解原理" class="headerlink" title="@RestTemplate注解原理"></a>@RestTemplate注解原理</h3><blockquote><p>相信大家一定有一个疑问：为什么在 Rest Template上加了一个@LoadBalanced之后Resttemplate就能够跟 Eureka结合了，不但可以使用服务名称去调用接口，还可以负载均衡应该归功于 Spring Cloud给我们做了大量的底层工作，因为它将这些都封装好了，我们用起来才会那么简单。框架就是为了简化代码，提高效率而产生的。</p><p align="right">——《spring cloud 微服务 入门、进阶与实战》第58页<p></blockquote><p>这里主要的逻辑就是给 Rest Template增加拦截器，在请求之前对请求的地址进行替换或者根据具体的负载策略选择服务地址，然后再去调用，这就是@Loadbalanced的原理。</p><p>自定义@MyLoadbalanced 来实现@Loadbalanced的功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Inherited;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(&#123; ElementType.FIELD, ElementType.PARAMETER, ElementType.METHOD &#125;) <span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Qualifier</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyLoadBalanced &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalancerClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalancerRequestFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.client.ClientHttpRequestExecution;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.client.ClientHttpRequestInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.client.ClientHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.Assert;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> MyLoadBalancerInterceptor</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> wuzhiyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/5/2 11:58</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLoadBalancerInterceptor</span> <span class="keyword">implements</span> <span class="title">ClientHttpRequestInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LoadBalancerClient loadBalancer;</span><br><span class="line">    <span class="keyword">private</span> LoadBalancerRequestFactory requestFactory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyLoadBalancerInterceptor</span><span class="params">(LoadBalancerClient loadBalancer, LoadBalancerRequestFactory requestFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loadBalancer = loadBalancer;</span><br><span class="line">        <span class="keyword">this</span>.requestFactory = requestFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyLoadBalancerInterceptor</span><span class="params">(LoadBalancerClient loadBalancer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(loadBalancer, <span class="keyword">new</span> LoadBalancerRequestFactory(loadBalancer));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClientHttpResponse <span class="title">intercept</span><span class="params">(<span class="keyword">final</span> HttpRequest request, <span class="keyword">final</span> <span class="keyword">byte</span>[] body,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        <span class="keyword">final</span> ClientHttpRequestExecution execution)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> URI originalUri = request.getURI();</span><br><span class="line">        String serviceName = originalUri.getHost();</span><br><span class="line">        System.out.println(<span class="string">"进入自定义的请求拦截器中"</span> + serviceName);</span><br><span class="line">        Assert.state(serviceName != <span class="keyword">null</span>, <span class="string">"Request URI does not contain a valid hostname: "</span> + originalUri);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.loadBalancer.execute(serviceName, requestFactory.createRequest(request, body, execution));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.SmartInitializingSingleton;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalancerClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalancerRequestFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.client.ClientHttpRequestInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLoadBalancerAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@MyLoadBalanced</span></span><br><span class="line">    <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;RestTemplate&gt; restTemplates = Collections.emptyList();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyLoadBalancerInterceptor <span class="title">myLoadBalancerInterceptor</span><span class="params">(LoadBalancerClient loadBalancerClient,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                               LoadBalancerRequestFactory requestFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyLoadBalancerInterceptor(loadBalancerClient,requestFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SmartInitializingSingleton <span class="title">myLoadBalancedRestTemplateInitializer</span><span class="params">(LoadBalancerClient loadBalancerClient,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                                            LoadBalancerRequestFactory requestFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SmartInitializingSingleton() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterSingletonsInstantiated</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (RestTemplate restTemplate : MyLoadBalancerAutoConfiguration.<span class="keyword">this</span>.restTemplates) &#123;</span><br><span class="line">                    List&lt;ClientHttpRequestInterceptor&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(restTemplate.getInterceptors());</span><br><span class="line">                    list.add(myLoadBalancerInterceptor(loadBalancerClient,requestFactory));</span><br><span class="line">                    restTemplate.setInterceptors(list);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>替换上自己的 @MyLoadBalanced</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Bean</span></span><br><span class="line"><span class="comment">//    @LoadBalanced</span></span><br><span class="line">    <span class="meta">@MyLoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>重启再访问测试接口地址 /ribbon/hello  控制台如下：</p><img data-src="/myblog/%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1Ribbon/image-20200502124238291.png" class=""><p>具体逻辑可参看源代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @Loadbalancer注解相关源代码</span></span><br><span class="line">org.springframework.cloud.client.loadbalancer.LoadBalanced</span><br><span class="line"></span><br><span class="line">org.springframework.cloud.client.loadbalancer.LoadBalancerEurekaAutoConfiguration</span><br><span class="line"></span><br><span class="line">org.springframework.cloud.client.loadbalancer.LoadBalancerInterceptorConfig</span><br><span class="line"></span><br><span class="line">org.springframework.cloud.client.loadbalancer.LoadBalancerInterceptor</span><br></pre></td></tr></table></figure><h3 id="Ribbon-API-使用"><a href="#Ribbon-API-使用" class="headerlink" title="Ribbon API 使用"></a>Ribbon API 使用</h3><p>当你有一些特殊的需求，想通过Ribbon获取对应的服务信息时。可以使用LoadBalancer Client来获取。下面代码来获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> LoadBalancerClient loadBalancerClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/choose"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">chooseUrl</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ServiceInstance instance = loadBalancerClient.choose(<span class="string">"eureka-client-service"</span>);</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问后可得到类似如下内容：（监控端点没开启则会少很多）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"serviceId"</span>: <span class="string">"eureka-client-service"</span>,</span><br><span class="line">  <span class="attr">"server"</span>: &#123;</span><br><span class="line">    <span class="attr">"host"</span>: <span class="string">"localhost"</span>,</span><br><span class="line">    <span class="attr">"port"</span>: <span class="number">8081</span>,</span><br><span class="line">    <span class="attr">"id"</span>: <span class="string">"localhost:8081"</span>,</span><br><span class="line">    <span class="attr">"zone"</span>: <span class="string">"defaultZone"</span>,</span><br><span class="line">    <span class="attr">"readyToServe"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"instanceInfo"</span>: &#123;</span><br><span class="line">      <span class="attr">"instanceId"</span>: <span class="string">"eureka-client-service:localhost:8081"</span>,</span><br><span class="line">      <span class="attr">"app"</span>: <span class="string">"EUREKA-CLIENT-SERVICE"</span>,</span><br><span class="line">      <span class="attr">"ipAddr"</span>: <span class="string">"localhost"</span>,</span><br><span class="line">      <span class="attr">"sid"</span>: <span class="string">"na"</span>,</span><br><span class="line">      <span class="attr">"homePageUrl"</span>: <span class="string">"http://localhost:8081/"</span>,</span><br><span class="line">      <span class="attr">"statusPageUrl"</span>: <span class="string">"https://wu_zhiyong.gitee.io/myblog/"</span>,</span><br><span class="line">      <span class="attr">"healthCheckUrl"</span>: <span class="string">"http://localhost:8081/actuator/health"</span>,</span><br><span class="line">      <span class="attr">"vipAddress"</span>: <span class="string">"eureka-client-service"</span>,</span><br><span class="line">      <span class="attr">"secureVipAddress"</span>: <span class="string">"eureka-client-service"</span>,</span><br><span class="line">      <span class="attr">"countryId"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"dataCenterInfo"</span>: &#123;</span><br><span class="line">        <span class="attr">"@class"</span>: <span class="string">"com.netflix.appinfo.InstanceInfo$DefaultDataCenterInfo"</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"MyOwn"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"hostName"</span>: <span class="string">"localhost"</span>,</span><br><span class="line">      <span class="attr">"status"</span>: <span class="string">"UP"</span>,</span><br><span class="line">      <span class="attr">"overriddenStatus"</span>: <span class="string">"UNKNOWN"</span>,</span><br><span class="line">      <span class="attr">"leaseInfo"</span>: &#123;</span><br><span class="line">        <span class="attr">"renewalIntervalInSecs"</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">"durationInSecs"</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">"registrationTimestamp"</span>: <span class="number">1588387730005</span>,</span><br><span class="line">        <span class="attr">"lastRenewalTimestamp"</span>: <span class="number">1588400582649</span>,</span><br><span class="line">        <span class="attr">"evictionTimestamp"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"serviceUpTimestamp"</span>: <span class="number">1588387730005</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"isCoordinatingDiscoveryServer"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">"metadata"</span>: &#123;</span><br><span class="line">        <span class="attr">"create-user"</span>: <span class="string">"WuZhiYong"</span>,</span><br><span class="line">        <span class="attr">"management.port"</span>: <span class="string">"8081"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"lastUpdatedTimestamp"</span>: <span class="number">1588387730005</span>,</span><br><span class="line">      <span class="attr">"lastDirtyTimestamp"</span>: <span class="number">1588387730000</span>,</span><br><span class="line">      <span class="attr">"actionType"</span>: <span class="string">"ADDED"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"metaInfo"</span>: &#123;</span><br><span class="line">      <span class="attr">"instanceId"</span>: <span class="string">"eureka-client-service:localhost:8081"</span>,</span><br><span class="line">      <span class="attr">"appName"</span>: <span class="string">"EUREKA-CLIENT-SERVICE"</span>,</span><br><span class="line">      <span class="attr">"serviceIdForDiscovery"</span>: <span class="string">"eureka-client-service"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"alive"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"hostPort"</span>: <span class="string">"localhost:8081"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"secure"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"metadata"</span>: &#123;</span><br><span class="line">    <span class="attr">"create-user"</span>: <span class="string">"WuZhiYong"</span>,</span><br><span class="line">    <span class="attr">"management.port"</span>: <span class="string">"8081"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"host"</span>: <span class="string">"localhost"</span>,</span><br><span class="line">  <span class="attr">"port"</span>: <span class="number">8081</span>,</span><br><span class="line">  <span class="attr">"uri"</span>: <span class="string">"http://localhost:8081"</span>,</span><br><span class="line">  <span class="attr">"instanceId"</span>: <span class="string">"localhost:8081"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="负载均衡策略介绍"><a href="#负载均衡策略介绍" class="headerlink" title="负载均衡策略介绍"></a>负载均衡策略介绍</h3><p>负载策略代码整体如下，默认继承AbstractLoadBalancerRule</p><img data-src="/myblog/%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1Ribbon/image-20200502143706413.png" class=""><img data-src="/myblog/%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1Ribbon/image-20200502151313128.png" class=""><ul><li><p>BestAvailabl：选择一个最小的并发请求的 Server，逐个考察 Server，如果 Server被标记为错误，则跳过，然后再选择 ActiveRequestCount 中最小的 Server</p></li><li><p>AvailabilityFilteringRule：过滤掉那些一直连接失败的且被标记为 circuit tripped的后端 Server.，并过滤掉那些高并发的后端 Server或者使用一个 Availability Predicate来包含过滤 Server的逻辑。其实就是检查 Status里记录的各个 Server E的运行状态。</p></li><li><p>ZoneAvoidancerule：使用 Zone CAvoidancepredicate 和 Availability Predicate来判断是否选择某个 Server，前一个判断判定一个zone的运行性能是否可用，别除不可用的Zone（的所有 Server）， Availabilitypredicate用于过滤掉连接数过多的 Servero.</p></li><li><p>RandomRule：随机选择一个 Server。</p></li><li><p>RoundRobinRule：轮询选择，轮询 index，选择 index对应位置的 Server 。</p></li><li><p>RetryRule：对选定的负载均衡策略机上重试机制，也就是说当选定了某个策略进行请求负载时在一个配置时间段内若选择 Server不成功，则一直尝试使用 subrule的方式选择一个可用的 Server。</p></li><li><p>ResponseTimeWeightRule：作用同 WeightResponseTimeRule。ResponseTimeWeightRule后来更名为WeightResponseTimeRule。</p></li><li><p>WeightResponseTimeRule根据响应时间分配一个 Weight（权重），响应时间越长，Weight 越小，被选中的可能性越低。</p><p align="right">——《spring cloud 微服务 入门、进阶与实战》第65页<p></li></ul><h3 id="自定义负载策略"><a href="#自定义负载策略" class="headerlink" title="自定义负载策略"></a>自定义负载策略</h3><p>通过实现 IRule接口可以自定义负载策略，主要的选择服务逻辑在 choose方法中。这边只是演示怎么自定义负载策略，所以没写选择的逻辑，直接返回服务列表中第一个服务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.ILoadBalancer;</span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.IRule;</span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.Server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRule</span> <span class="keyword">implements</span> <span class="title">IRule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ILoadBalancer lb;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">List&lt;Server&gt; servers = lb.getAllServers();</span><br><span class="line"><span class="keyword">for</span> (Server server : servers) &#123;</span><br><span class="line">System.out.println(server.getHostPort());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> servers.get(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoadBalancer</span><span class="params">(ILoadBalancer lb)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.lb = lb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ILoadBalancer <span class="title">getLoadBalancer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> lb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置自定义的负载策略。</p><ul><li><p>第一种方式</p><p>把自定义策略注册到Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyRule <span class="title">rule</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyRule();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给eureka-client-service(服务名) 关联配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RibbonClient</span>(name = <span class="string">"eureka-client-service"</span>,configuration = BeanConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">RibbonClientConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第二种方式</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#给 eureka-client-service 服务配置自定义负载策略</span></span><br><span class="line"><span class="meta">eureka-client-service.ribbon.NFLoadBalancerRuleClassName</span>=<span class="string">com.study.ribbon.config.MyRule</span></span><br></pre></td></tr></table></figure></li></ul><p>支持配置的属性如下：</p><p><clientName>.ribbon.NFLoadBalancerClassName: 配置ILoadBalancer的实现类<br><clientName>.ribbon.NFLoadBalancerRuleClassName:配置IRule的实现类<br><clientName>.ribbon.NFLoadBalancerPingClassName: 配置IPing的实现类<br><clientName>.ribbon.NIWSServerListClassName: 配置ServerList的实现类<br><clientName>.ribbon.NIWSServerListFilterClassName:配置ServerListFilter的实现类</p><h3 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h3><ul><li><p>禁用Eureka</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">ribbon.eureka.enabled</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure><p>当禁用了Eureka 后就不能通过服务名称去调用接口了。必须指定调用地址</p></li><li><p>配置接口地址列表</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">eureka-client-service.ribbon.listOfServers</span>=<span class="string">localhost:8081,localhost:8082</span></span><br></pre></td></tr></table></figure><p>eureka-client-service是服务名称，这样配置后就可以通过服务名调用接口了。</p></li><li><p>超时时间</p><p>为每个服务配置超时时间</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#请求链接的超时时间</span></span><br><span class="line"><span class="meta">eureka-client-service.ribbon.ConnectTimeout</span>=<span class="string">2000</span></span><br><span class="line"><span class="comment">#请求处理的超时时间</span></span><br><span class="line"><span class="meta">eureka-client-service.ribbon.ReadTimeOut</span>=<span class="string">5000</span></span><br></pre></td></tr></table></figure><p>为所有服务配置超时时间</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#请求链接的超时时间</span></span><br><span class="line"><span class="meta">ribbon.ConnectTimeout</span>=<span class="string">2000</span></span><br><span class="line"><span class="comment">#请求处理的超时时间</span></span><br><span class="line"><span class="meta">ribbon.ReadTimeOut</span>=<span class="string">5000</span></span><br></pre></td></tr></table></figure></li><li><p>并发参数</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#最大链接数</span></span><br><span class="line"><span class="meta">ribbon.maxToTalConnections</span>=<span class="string">500</span></span><br><span class="line"><span class="comment">#每个host最大链接数</span></span><br><span class="line"><span class="meta">ribbon.MaxConnectionsPerHost</span>=<span class="string">500</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="重试机制"><a href="#重试机制" class="headerlink" title="重试机制"></a>重试机制</h3><p>除了使用 Ribbon 自带的重试策略，我们还可以通过集成 Spring Retry 来进行重试操作。</p><p>Spring Retry依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.retry<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-retry<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对当前实例的重试次数</span></span><br><span class="line"><span class="meta">ribbon.maxAutoRetries</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"># 切换实例的重试次数</span></span><br><span class="line"><span class="meta">ribbon.maxAutoRetriesNextServer</span>=<span class="string">3</span></span><br><span class="line"><span class="comment"># 对所有操作请求都进行重试</span></span><br><span class="line"><span class="meta">ribbon.okToRetryOnAllOperations</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 对Http响应码进行重试</span></span><br><span class="line"><span class="meta">ribbon.retryableStatusCodes</span>=<span class="string">500,404,502</span></span><br></pre></td></tr></table></figure><hr><p>参考：</p><p>《spring cloud 微服务 入门、进阶与实战》</p><p>代码来源：</p><p><a href="https://github.com/yinjihuan/spring-cloud/tree/master/Spring-Cloud-Book-Code-2/ch-4" target="_blank" rel="noopener">https://github.com/yinjihuan/spring-cloud/tree/master/Spring-Cloud-Book-Code-2/ch-4</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> java </tag>
            
            <tag> spring cloud </tag>
            
            <tag> Ribbon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Eureka编写注册中心服务</title>
      <link href="/myblog/%E4%BD%BF%E7%94%A8Eureka%E7%BC%96%E5%86%99%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%9C%8D%E5%8A%A1/"/>
      <url>/myblog/%E4%BD%BF%E7%94%A8Eureka%E7%BC%96%E5%86%99%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><blockquote><p>Spring Cloud Eureka是 Spring Cloud Netflix微服务套件的一部分，基于 Netflix Eurd做了二次封装，主要负责实现微服务架构中的服务治理功能。 Spring Cloud Eureka是一个基于REST的服务，并且提供了基于Java的客户端组件，能够非常方便地将服务注到Spring Cloud Eureka中进行统一管理。</p><p>注册中心带来的好处就是，不需要知道有多少提供方，你只需要关注注册中心即可，就像顺客不必关心有多少火车在开行，只需要去12306网站上看有没有票就可以了。为什么 Eureka比 Zookeeper更适合作为注册中心呢？主要是因为 Eureka是基于AP原则构建的，而 Zookeeper是基于CP原则构建的。在分布式系统领域有个著名的CAP定理，即C为数据一致性；A为服务可用性；P为服务对网络分区故障的容错性。这三个特性在任何分布式系统中都不能同时满足，最多同时满足两个。</p><p>Zookeeper有一个 Leader，而且在这个 Leader无法使用的时候通过 Paxos（ZAB）算法选举出一个新的 Leader.。这个 Leader的任务就是保证写数据的时候只向这个 Leader写入，Leader会同步信息到其他节点。通过这个操作就可以保证数据的一致性。</p><p>总而言之，想要保证AP就要用 Eureka，想要保证CP就要用 Zookeeper。Dubo中大部分都是基于 Zookeeper作为注册中心的。 Spring Cloud中当然首选 Eureka</p><p align="right">——《spring cloud 微服务 入门、进阶与实战》第33页<p></blockquote><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>创建一个spring cloud 项目springcloud-eureka-server。（这里创建一个spring boot 再引入 spring cloud 的依赖也是一样）<a id="more"></a></p><ol><li>这个是注册中心需要的依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>这里也贴出spring boot 与 spring cloud 的依赖（之所以贴出来是因为我没有参照书中的添加，然后服务出错了启动不了，经过折腾发现 spring boot 与 spring cloud 的版本是有对应关系的）</p><p>参照官网：</p><p><a href="https://spring.io/projects/spring-cloud" target="_blank" rel="noopener">https://spring.io/projects/spring-cloud</a></p><img data-src="/myblog/%E4%BD%BF%E7%94%A8Eureka%E7%BC%96%E5%86%99%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%9C%8D%E5%8A%A1/image-20200428193338935.png" class=""></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.SR4<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>application.properties加入配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.application.name</span>=<span class="string">eureka-server</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8761</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#由于该应用为注册中心，所以设置为false，代表不向注册中心注册自己</span></span><br><span class="line"><span class="meta">eureka.client.register-with-eureka</span>=<span class="string">false</span></span><br><span class="line"><span class="comment">#由于注册中心的职责就是维护服务实例，它并不需要去检索服务，所以也设置成false</span></span><br><span class="line"><span class="meta">eureka.client.fetch-registry</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure><p>启动类加上@EnableEurekaServer注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringcloudEurekaServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringcloudEurekaServerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动访问<a href="http://localhost:8761/" target="_blank" rel="noopener">http://localhost:8761/</a> 可看到页面：</p><img data-src="/myblog/%E4%BD%BF%E7%94%A8Eureka%E7%BC%96%E5%86%99%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%9C%8D%E5%8A%A1/image-20200428201536367.png" class=""><p>这里只是一个空的注册中心，里边还没有服务。接下来我们来创建两个服务注册到服务中心去：</p><h3 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h3><p>和上边一样创建一个spring cloud 项目 springcloud-eureka-server-Provider（引入上边spring boot 和spring cloud的依赖）再加上eureka 客户端的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 与注册中心  不同的是 这里是 eureka-client --&gt;</span></span><br></pre></td></tr></table></figure><p>在启动类上加入@EnableEurekaClient 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringcloudEurekaServerProviderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringcloudEurekaServerProviderApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在来编写一个测试的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.application.name</span>=<span class="string">eureka-client-user-service</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8081</span></span><br><span class="line"><span class="meta">eureka.client.serviceUrl.defaultZone</span>=<span class="string">http://localhost:8761/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#采用IP注册</span></span><br><span class="line"><span class="meta">eureka.instance.preferIpAddress</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#定义实例ID格式</span></span><br><span class="line"><span class="meta">eureka.instance.instance-id</span>=<span class="string">$&#123;spring.application.name&#125;:$&#123;spring.cloud.client.ip.address&#125;:$&#123;server.port&#125;</span></span><br></pre></td></tr></table></figure><p>启动后在再刷新注册中心的页面可看到有了一个服务实例：</p><img data-src="/myblog/%E4%BD%BF%E7%94%A8Eureka%E7%BC%96%E5%86%99%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%9C%8D%E5%8A%A1/image-20200428203217712.png" class=""><h3 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h3><p>首先与服务提供者一样建立一个spring cloud 项目 springcloud-eureka-server-Consumer，pom 依赖也一样</p><p>application.properties 基本一样，我们修改下服务名称和端口：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.application.name</span>=<span class="string">eureka-client-article-service</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8082</span></span><br><span class="line"><span class="meta">eureka.client.serviceUrl.defaultZone</span>=<span class="string">http://localhost:8761/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#采用IP注册</span></span><br><span class="line"><span class="meta">eureka.instance.prefer-ip-address</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#定义实例ID格式</span></span><br><span class="line"><span class="meta">eureka.instance.instance-id</span>=<span class="string">$&#123;spring.application.name&#125;:$&#123;spring.cloud.client.ip.address&#125;:$&#123;server.port&#125;</span></span><br></pre></td></tr></table></figure><p>再建立两个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/article/callHello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">callHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://localhost:8081/user/hello"</span>,String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动后可看到配置中心有了两个实例</p><img data-src="/myblog/%E4%BD%BF%E7%94%A8Eureka%E7%BC%96%E5%86%99%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%9C%8D%E5%8A%A1/image-20200428211048055.png" class=""><p>我们来访问下消费者的接口得到返回：</p><img data-src="/myblog/%E4%BD%BF%E7%94%A8Eureka%E7%BC%96%E5%86%99%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%9C%8D%E5%8A%A1/image-20200428204803431.png" class=""><p>从代码我们可以看到。我们访问 <a href="http://localhost:8082/article/callHello" target="_blank" rel="noopener">http://localhost:8082/article/callHello</a> 接口，其实在控制器里是通过restTemplate访问 服务提供者<a href="http://localhost:8081/user/hello接口返回数据的" target="_blank" rel="noopener">http://localhost:8081/user/hello接口返回数据的</a></p><p>restTemplate通过localhost:8081其实并没有通过配置中心来消费接口。</p><p>我们可以通过以下配置：</p><p>在BeanConfiguration中加入@LoadBalanced注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>restTemplate就可以通过实例的名称 eureka-client-user-service 来访问了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/article/callHello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">callHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://eureka-client-user-service/user/hello"</span>,String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这样才是利用了配置中心来消费接口</p><h3 id="开启Eureka认证"><a href="#开启Eureka认证" class="headerlink" title="开启Eureka认证"></a>开启Eureka认证</h3><blockquote><p>Eureka自带了一个Web的管理页面，方便我们查询注册到上面的实例信息，但是有一个题：如果在实际使用中，注册中心地址有公网1P的话，必然能直接访问到，这样是不安全的。所以我们需要对 Eureka进行改造，加上权限认证来保证安全性改造我们的eureka- server，通过集成 Spring-security来进行安全认证在 pom. xml中添加Spring- Security的依赖包</p><p align="right">——《spring cloud 微服务 入门、进阶与实战》第39页<p></blockquote><p>在注册中心 springcloud-eureka-server 加入security依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>增加配置class文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.csrf().disable()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .httpBasic();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>properties增加配置用户名和密码</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.security.user.name</span>=<span class="string">WuZhiYong</span></span><br><span class="line"><span class="meta">spring.security.user.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><p>重新启动注册中心，访问htp：/ localhost：8761，此时浏览器会提示你输入用户名和密，人正确后才能继续访问 Eureka提供的管理页面。</p><p>在 Eureka开启认证后，客户端注册的配置也要加上认证的用户名和密码信息：</p><p>否则无法启动成功（不能注册到注册中心）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">eureka.client.serviceUrl.defaultZone</span>=<span class="string">http://WuZhiYong:123456@localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><h3 id="关闭自我保护"><a href="#关闭自我保护" class="headerlink" title="关闭自我保护"></a>关闭自我保护</h3><blockquote><p>保护模式主要在一组客户端和 Eureka Server之间存在网络分区场景时使用。一且进入保护模式， Eureka Server将会尝试保护其服务的注册表中的信息，不再删除服务注册表中的数据。当网络故障恢复后，该 Eureka Server节点会自动退出保护模式。</p><p align="right">——《spring cloud 微服务 入门、进阶与实战》第41页<p></blockquote><p>访问注册中心页面的时候有时会出现这样的提示：即表示进入保护模式了</p><img data-src="/myblog/%E4%BD%BF%E7%94%A8Eureka%E7%BC%96%E5%86%99%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%9C%8D%E5%8A%A1/image-20200428213312803.png" class=""><p>在配置文件中我们可这样关闭保护模式</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">eureka.server.enable-self-preservation</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure><p>在刷新页面会显示：</p><blockquote><p>THE SELF PRESERVATION MODE IS TURNED OFF. THIS MAY NOT PROTECT INSTANCE EXPIRY IN CASE OF NETWORK/OTHER PROBLEMS.</p></blockquote><blockquote><p>(翻译：自我保存模式已关闭。在网络/其他问题的情况下，这可能无法保护实例到期)</p></blockquote><h3 id="自定义Eureka的实例（instanceId）ID"><a href="#自定义Eureka的实例（instanceId）ID" class="headerlink" title="自定义Eureka的实例（instanceId）ID"></a>自定义Eureka的实例（instanceId）ID</h3><p>自定义实例id在配置文件中已做了注释说明。</p><p>不过我们前面在注册中心页面上看到的实例id的时候并没有象我们配置的那样呈现出了ip地址。实际上这是由于不同版本造成的。这里改成下面这样就好了。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义实例ID格式</span></span><br><span class="line"><span class="meta">eureka.instance.instance-id</span>=<span class="string">$&#123;spring.application.name&#125;:$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span></span><br></pre></td></tr></table></figure><p>再看发现正常显示ip了</p><img data-src="/myblog/%E4%BD%BF%E7%94%A8Eureka%E7%BC%96%E5%86%99%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%9C%8D%E5%8A%A1/image-20200428215931142.png" class=""><h3 id="自定义实例跳转链接"><a href="#自定义实例跳转链接" class="headerlink" title="自定义实例跳转链接"></a>自定义实例跳转链接</h3><blockquote><p>我们通过配置实现了用IP进行注册，当点击 Instance ID进行跳转的时就可以用P跳转了，跳转的地址默认是IP+ Port/info。我们可以自定义这个跳转的地址</p></blockquote><p>比如配置跳转到我的博客（在非注册中心的项目里配置）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置跳转链接</span></span><br><span class="line"><span class="meta">eureka.instance.status-page-url</span>=<span class="string">https://wu_zhiyong.gitee.io/myblog/</span></span><br></pre></td></tr></table></figure><p>点击实例ID后就会跳转到我的博客</p><h3 id="快速移除已失效的服务信息"><a href="#快速移除已失效的服务信息" class="headerlink" title="快速移除已失效的服务信息"></a>快速移除已失效的服务信息</h3><blockquote><p>在实际开发过程中，我们可能会不停地重启服务，由于 Eureka有自己的保护机制，故节点下线后，服务信息还会一直存在于 Eureka中。我们可以通过增加一些配置让移除的速度更快一点，当然只在开发环境下使用，生产环境下不推荐使用。</p><p align="right">——《spring cloud 微服务 入门、进阶与实战》第43页<p></blockquote><p>首先在 eureka-server 注册中心添加配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#别是关闭自我保护</span></span><br><span class="line"><span class="meta">eureka.server.enable-self-preservation</span>=<span class="string">false</span></span><br><span class="line"><span class="comment">#清理间隔 默认60000</span></span><br><span class="line"><span class="meta">eureka.server.eviction-interval-timer-in-ms</span>=<span class="string">5000</span></span><br></pre></td></tr></table></figure><p>然后在具体的服务中配置：（本例中就是前面说的服务提供者和消费者两个服务）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开启健康检查</span></span><br><span class="line"><span class="meta">eureka.client.healthcheck.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 表示注册的服务向eureka配置中心发送心跳的频率  默认30秒</span></span><br><span class="line"><span class="meta">eureka.instance.lease-renewal-interval-in-seconds</span>=<span class="string">5</span></span><br><span class="line"><span class="comment"># 表示eureka配置中心向注册的服务们自上一次心跳后等待下一次心跳的超时时间，</span></span><br><span class="line"><span class="comment"># 在这个过程中没有收到则移除实例  默认90秒</span></span><br><span class="line"><span class="meta">eureka.instance.lease-expiration-duration-in-seconds</span>=<span class="string">5</span></span><br></pre></td></tr></table></figure><p>同时加上健康检查的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>更多的配置信息可参考EurekaInstanceConfigBean 和 EurekaServerConfigBean</p><h3 id="Eureka高可用搭建"><a href="#Eureka高可用搭建" class="headerlink" title="Eureka高可用搭建"></a>Eureka高可用搭建</h3><h4 id="高可用原理"><a href="#高可用原理" class="headerlink" title="高可用原理"></a>高可用原理</h4><blockquote><p>前面我们搭建的注册中心只适合本地开发使用，在生产环境中必须搭建一个集群来保证高可用。 Eureka的集群搭建方法很简单：每一台 Eureka只需要在配置中指定另外多个Eureka的地址就可以实现一个集群的搭建了。</p><p align="right">——《spring cloud 微服务 入门、进阶与实战》第39页<p></blockquote><h4 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h4><p>简单说明：</p><p>如果有主、从两个注册中心</p><p>将    主    注册-&gt;到    从</p><p>将    从    注册-&gt;到    主</p><p>如果有主、从1、从2三个注册中心（以此类推）</p><p>将    主    注册-&gt;到    从1、从2</p><p>将    从1    注册-&gt;到    主、从2</p><p>将    从2    注册-&gt;到    主、从1    </p><p>以搭建主、从注册中心为例：</p><p>参照eureka-server建立一个项目（或复制一个项目）项目名我们就叫做 springcloud-eureka-server-cluster.</p><p>至此我们现在有四个项目了</p><img data-src="/myblog/%E4%BD%BF%E7%94%A8Eureka%E7%BC%96%E5%86%99%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%9C%8D%E5%8A%A1/image-20200429132054476.png" class=""><p>简单说明下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#注册中心服务</span></span><br><span class="line"><span class="attr">springcloud-eureka-server</span></span><br><span class="line"><span class="comment">#注册中心服务的复制版（用于高可用）</span></span><br><span class="line"><span class="attr">springcloud-eureka-server-cluster</span></span><br><span class="line"><span class="comment">#服务消费者 注册到注册中心</span></span><br><span class="line"><span class="attr">springcloud-eureka-server-consumer</span></span><br><span class="line"><span class="comment">#服务提供者 注册到注册中心</span></span><br><span class="line"><span class="attr">springcloud-eureka-server-provider</span></span><br></pre></td></tr></table></figure><p>我们先看eureka-server的application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8761</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">eureka-server</span></span><br><span class="line"><span class="comment">#指向从节点的注册中心</span></span><br><span class="line"><span class="meta">eureka.client.serviceUrl.defaultZone</span>=<span class="string">http://WuZhiYong:123456@localhost:8762/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#由于该应用为注册中心，所以设置为false，代表不向注册中心注册自己</span></span><br><span class="line"><span class="meta">eureka.client.register-with-eureka</span>=<span class="string">false</span></span><br><span class="line"><span class="comment">#由于注册中心的职责就是维护服务实例，它并不需要去检索服务，所以也设置成false</span></span><br><span class="line"><span class="meta">eureka.client.fetch-registry</span>=<span class="string">false</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.security.user.name</span>=<span class="string">WuZhiYong</span></span><br><span class="line"><span class="meta">spring.security.user.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment">#别是关闭自我保护</span></span><br><span class="line"><span class="meta">eureka.server.enable-self-preservation</span>=<span class="string">false</span></span><br><span class="line"><span class="comment">#清理间隔 默认60000</span></span><br><span class="line"><span class="meta">eureka.server.eviction-interval-timer-in-ms</span>=<span class="string">5000</span></span><br></pre></td></tr></table></figure><p>再看看eureka-server-cluster的application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8762</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">eureka-server-cluster</span></span><br><span class="line"><span class="comment">#指向主节点的注册中心</span></span><br><span class="line"><span class="meta">eureka.client.serviceUrl.defaultZone</span>=<span class="string">http://WuZhiYong:123456@localhost:8761/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#由于该应用为注册中心，所以设置为false，代表不向注册中心注册自己</span></span><br><span class="line"><span class="meta">eureka.client.register-with-eureka</span>=<span class="string">false</span></span><br><span class="line"><span class="comment">#由于注册中心的职责就是维护服务实例，它并不需要去检索服务，所以也设置成false</span></span><br><span class="line"><span class="meta">eureka.client.fetch-registry</span>=<span class="string">false</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.security.user.name</span>=<span class="string">WuZhiYong</span></span><br><span class="line"><span class="meta">spring.security.user.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment">#别是关闭自我保护</span></span><br><span class="line"><span class="meta">eureka.server.enable-self-preservation</span>=<span class="string">false</span></span><br><span class="line"><span class="comment">#清理间隔 默认60000</span></span><br><span class="line"><span class="meta">eureka.server.eviction-interval-timer-in-ms</span>=<span class="string">5000</span></span><br></pre></td></tr></table></figure><p>配置也基本相同。只是端口和注册中心的地址不一样。</p><p>好的。我们再把server-provider和server-consumer的application.properties里的注册中心指向上面的两个：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">eureka.client.serviceUrl.defaultZone</span>=<span class="string">http://WuZhiYong:123456@localhost:8761/eureka/,http://WuZhiYong:123456@localhost:8762/eureka/</span></span><br></pre></td></tr></table></figure><p>好了，高可用的配置已经完成，我们分别启动主从注册中心，然后再启动 server-provider和server-consumer。</p><p>分别访问<a href="http://localhost:8762/与http://localhost:8761/都能看到里边俩个服务。" target="_blank" rel="noopener">http://localhost:8762/与http://localhost:8761/都能看到里边俩个服务。</a></p><img data-src="/myblog/%E4%BD%BF%E7%94%A8Eureka%E7%BC%96%E5%86%99%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%9C%8D%E5%8A%A1/image-20200429133958776.png" class=""><img data-src="/myblog/%E4%BD%BF%E7%94%A8Eureka%E7%BC%96%E5%86%99%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%9C%8D%E5%8A%A1/image-20200429134015432.png" class=""><p>然后我们后台任意停止一个注册中心。我们访问server-consumer的接口时，依然能正确调用到server-provider的服务并返回数据。</p><h3 id="扩展使用"><a href="#扩展使用" class="headerlink" title="扩展使用"></a>扩展使用</h3><h4 id="Eureka-REST-API"><a href="#Eureka-REST-API" class="headerlink" title="Eureka REST API"></a>Eureka REST API</h4><p>Eureka 提供了一些API用于获取某个服务的注册信息</p><p>官方文档：</p><p><a href="https://github.com/Netflix/eureka/wiki/Eureka-REST-operations" target="_blank" rel="noopener">https://github.com/Netflix/eureka/wiki/Eureka-REST-operations</a></p><p>以上面我们启动的服务为例调用api</p><p><a href="http://localhost:8761/eureka/apps/eureka-client-user-service" target="_blank" rel="noopener">http://localhost:8761/eureka/apps/eureka-client-user-service</a></p><p>localhost:8761 是注册中心的地址</p><p>eureka-client-user-service  是服务实例的名称</p><p>如果配置中心没有加入security认证机制直接访问上面的地址就可以得到xml格式的数据响应。</p><p>如果 Eureka开启了认证，记得添加认证信息，用户名和密码必须是Base64编码过的Authorization： Basic用户名：密码，其余的接口就不做过多讲解了，大家可以自己去尝试。Postman直接支持了 Basic认证，将选项从 Headers切换到 Authorization，选择认证方式为Basic Auth就可以填写用户信息了</p><img data-src="/myblog/%E4%BD%BF%E7%94%A8Eureka%E7%BC%96%E5%86%99%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%9C%8D%E5%8A%A1/image-20200429135803033.png" class=""><p>如果想返回json需在headers 中添加：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">Content-Type</span>:<span class="string">application/json</span></span><br><span class="line"><span class="attr">Accept</span>:<span class="string">application/json</span></span><br></pre></td></tr></table></figure><img data-src="/myblog/%E4%BD%BF%E7%94%A8Eureka%E7%BC%96%E5%86%99%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%9C%8D%E5%8A%A1/image-20200429135941147.png" class=""><p>配置好后点击发送</p><img data-src="/myblog/%E4%BD%BF%E7%94%A8Eureka%E7%BC%96%E5%86%99%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%9C%8D%E5%8A%A1/image-20200429140121377.png" class=""><p>响应的json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"application"</span>: &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"EUREKA-CLIENT-USER-SERVICE"</span>,</span><br><span class="line">        <span class="attr">"instance"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"instanceId"</span>: <span class="string">"eureka-client-user-service:192.168.0.106:8081"</span>,</span><br><span class="line">                <span class="attr">"hostName"</span>: <span class="string">"192.168.0.106"</span>,</span><br><span class="line">                <span class="attr">"app"</span>: <span class="string">"EUREKA-CLIENT-USER-SERVICE"</span>,</span><br><span class="line">                <span class="attr">"ipAddr"</span>: <span class="string">"192.168.0.106"</span>,</span><br><span class="line">                <span class="attr">"status"</span>: <span class="string">"UP"</span>,</span><br><span class="line">                <span class="attr">"overriddenStatus"</span>: <span class="string">"UNKNOWN"</span>,</span><br><span class="line">                <span class="attr">"port"</span>: &#123;</span><br><span class="line">                    <span class="attr">"$"</span>: <span class="number">8081</span>,</span><br><span class="line">                    <span class="attr">"@enabled"</span>: <span class="string">"true"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"securePort"</span>: &#123;</span><br><span class="line">                    <span class="attr">"$"</span>: <span class="number">443</span>,</span><br><span class="line">                    <span class="attr">"@enabled"</span>: <span class="string">"false"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"countryId"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">"dataCenterInfo"</span>: &#123;</span><br><span class="line">                    <span class="attr">"@class"</span>: <span class="string">"com.netflix.appinfo.InstanceInfo$DefaultDataCenterInfo"</span>,</span><br><span class="line">                    <span class="attr">"name"</span>: <span class="string">"MyOwn"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"leaseInfo"</span>: &#123;</span><br><span class="line">                    <span class="attr">"renewalIntervalInSecs"</span>: <span class="number">5</span>,</span><br><span class="line">                    <span class="attr">"durationInSecs"</span>: <span class="number">5</span>,</span><br><span class="line">                    <span class="attr">"registrationTimestamp"</span>: <span class="number">1588138533939</span>,</span><br><span class="line">                    <span class="attr">"lastRenewalTimestamp"</span>: <span class="number">1588140045949</span>,</span><br><span class="line">                    <span class="attr">"evictionTimestamp"</span>: <span class="number">0</span>,</span><br><span class="line">                    <span class="attr">"serviceUpTimestamp"</span>: <span class="number">1588138533939</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"metadata"</span>: &#123;</span><br><span class="line">                    <span class="attr">"management.port"</span>: <span class="string">"8081"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"homePageUrl"</span>: <span class="string">"http://192.168.0.106:8081/"</span>,</span><br><span class="line">                <span class="attr">"statusPageUrl"</span>: <span class="string">"https://wu_zhiyong.gitee.io/myblog/"</span>,</span><br><span class="line">                <span class="attr">"healthCheckUrl"</span>: <span class="string">"http://192.168.0.106:8081/actuator/health"</span>,</span><br><span class="line">                <span class="attr">"vipAddress"</span>: <span class="string">"eureka-client-user-service"</span>,</span><br><span class="line">                <span class="attr">"secureVipAddress"</span>: <span class="string">"eureka-client-user-service"</span>,</span><br><span class="line">                <span class="attr">"isCoordinatingDiscoveryServer"</span>: <span class="string">"false"</span>,</span><br><span class="line">                <span class="attr">"lastUpdatedTimestamp"</span>: <span class="string">"1588138533939"</span>,</span><br><span class="line">                <span class="attr">"lastDirtyTimestamp"</span>: <span class="string">"1588138533909"</span>,</span><br><span class="line">                <span class="attr">"actionType"</span>: <span class="string">"ADDED"</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="元数据使用"><a href="#元数据使用" class="headerlink" title="元数据使用"></a>元数据使用</h4><blockquote><p>Eureka的元数据有两种类型，分别是框架定好了的标准元数据和用户自定义元数据标准元数据指的是主机名、IP地址、端口号、状态页和健康检查等信息，这些信息都会被发布在服务注册表中，用于服务之间的调用。自定义元数据可以使用 eureka. Instance metadatamap进行配置。</p><p>自定义元数据说得通俗点就是自定义配置，我们可以为每个 Eureka Client定义一些属于自己的配置，这个配置不会影响 Eureka的功能。自定义元数据可以用来做一些扩展信息，比如灰度发布之类的功能，可以用元数据来存储灰度发布的状态数据， Ribbon转发的时候就可以根据服务的元数据来做一些处理。当不需要灰度发布的时候可以调用 Eureka提供的 REST API将元数据清除掉。</p><p align="right">——《spring cloud 微服务 入门、进阶与实战》第47页<p></blockquote><p>下面我们来自定义一个简单的元数据，在属性文件中配置如下</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置元数据(不同版本有细微的差别，可通过提示来选择)</span></span><br><span class="line"><span class="meta">eureka.instance.metadata-map.create-user</span>=<span class="string">WuZhiYong</span></span><br></pre></td></tr></table></figure><p>然后再次通过postman 来请上面的rest api 地址</p><p>我们定义的元数据已经呈现出来了</p><img data-src="/myblog/%E4%BD%BF%E7%94%A8Eureka%E7%BC%96%E5%86%99%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%9C%8D%E5%8A%A1/image-20200429141503793.png" class=""><h4 id="EurekaClient-使用"><a href="#EurekaClient-使用" class="headerlink" title="EurekaClient 使用"></a>EurekaClient 使用</h4><p>当我们项目中集成了Eureka之后，可以通过EurekaClient来获取一些我们想要的数据，比如上面的元数据，我们就可以直接通过EurekaClient来获取。</p><p>首先我们在server-cunsumer 的controller 中加入下面代码并重启</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"eurekaClient"</span>)</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> EurekaClient eurekaClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/article/info"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">serviceUrl</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> eurekaClient.getInstancesByVipAddress(<span class="string">"eureka-client-user-service"</span>,<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后通过postman请求可以得到相同的结果：(server-cunsumer没有认证所以这里直接访问即可)</p><img data-src="/myblog/%E4%BD%BF%E7%94%A8Eureka%E7%BC%96%E5%86%99%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%9C%8D%E5%8A%A1/image-20200429142503537.png" class=""><h4 id="健康检查"><a href="#健康检查" class="headerlink" title="健康检查"></a>健康检查</h4><blockquote><p>默认情况下， Eureka客户端是使用心跳和服务端通信来判断客户端是否存活，在某些场景下，比如 Mongodb出现了异常，但你的应用进程还是存在的，这就意味着应用可以继续通过心跳上报，保持应用自己的信息在 Eureka中不被剔除掉。</p><p>Spring Boot Actuator提供了/ actuator/ health端点，该端点可展示应用程序的健康信息，当 MONGODB异常时，/ actuator/health端点的状态会变成DOWN，由于应用本身确实处于存活状态，但是 Mongodb的异常会影响某些功能，当请求到达应用之后会发生操作失败的</p><p>情况。</p><p>在这种情况下，我们希望可以将健康信息传递给 Eureka服务端。这样 Eureka中就能及时将应用的实例信息下线，隔离正常请求，防止出错。通过配置如下内容开启健康检查</p><p>eureka. client healthcheck. enabled-true</p><p>我们可以通过扩展健康检查的端点来模拟异常情况，定义一个扩展端点，将状态设置为DOWN</p><p align="right">——《spring cloud 微服务 入门、进阶与实战》第49页<p></blockquote><p>我们在server-consumer application.properties中开启健康检查：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开启健康检查（可以让注册中心获取检查状态）</span></span><br><span class="line"><span class="meta">eureka.client.healthcheck.enabled</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p>当然前提需要添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>自定义类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHealthIndicator</span> <span class="keyword">extends</span> <span class="title">AbstractHealthIndicator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doHealthCheck</span><span class="params">(Health.Builder builder)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        builder.down().withDetail(<span class="string">"status"</span>,<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启后访问注册中心</p><img data-src="/myblog/%E4%BD%BF%E7%94%A8Eureka%E7%BC%96%E5%86%99%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%9C%8D%E5%8A%A1/image-20200429144244592.png" class=""><h4 id="服务上下线监控"><a href="#服务上下线监控" class="headerlink" title="服务上下线监控"></a>服务上下线监控</h4><blockquote><p>在某些特定的需求下，我们需要对服务的上下线进行监控，上线或下线都进行邮件通知， Eureka中提供了事件监听的方式来扩展。</p><p>目前支持的事件如下：</p><ul><li><p>EurekalnstanceCanceledEvent服务下线事件。</p></li><li><p>EurekalnstanceRegisteredEvent服务注册事件。</p></li><li><p>EurekalnstanceRenewedEvent服务续约事件。</p></li><li><p>EurekaRegistry AvailableEvent Eureka注册中心启动事件。</p></li><li><p>EurekaServerStartedEvent Eureka Server启动事件。</p></li></ul><p>基于 Eureka提供的事件机制，可以监控服务的上下线过程，在过程发生中可以发送邮</p><p align="right">——《spring cloud 微服务 入门、进阶与实战》第50页<p></blockquote><p>我们在注册中心Eureka-server的项目里加上下面代码：（集群就每个集群项目里加上）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaStateChangeListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">(EurekaInstanceCanceledEvent event)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//发送邮件。。。</span></span><br><span class="line">      <span class="comment">//发送短信。。。</span></span><br><span class="line">        System.err.println(event.getServerId() + <span class="string">"\t"</span> + event.getAppName() + <span class="string">" 服务下线"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">(EurekaInstanceRegisteredEvent event)</span> </span>&#123;</span><br><span class="line">        InstanceInfo instanceInfo = event.getInstanceInfo();</span><br><span class="line">        System.err.println(instanceInfo.getAppName() + <span class="string">"进行注册"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">(EurekaInstanceRenewedEvent event)</span> </span>&#123;</span><br><span class="line">        System.err.println(event.getServerId() + <span class="string">"\t"</span> + event.getAppName() + <span class="string">" 服务进行续约"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">(EurekaRegistryAvailableEvent event)</span> </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"注册中心 启动"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">(EurekaServerStartedEvent event)</span> </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"Eureka Server 启动"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意</p><p>注在 Eureka集群环境下，每个节点都会触发事件，这个时侯需要控制下发送通知的行为，不控制的话每个节点都会发送通知。</p></blockquote><p>重启后控制台：</p><img data-src="/myblog/%E4%BD%BF%E7%94%A8Eureka%E7%BC%96%E5%86%99%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%9C%8D%E5%8A%A1/image-20200429152545740.png" class="">]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> java </tag>
            
            <tag> spring cloud </tag>
            
            <tag> Eureka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义Starter</title>
      <link href="/myblog/%E8%87%AA%E5%AE%9A%E4%B9%89Starter/"/>
      <url>/myblog/%E8%87%AA%E5%AE%9A%E4%B9%89Starter/</url>
      
        <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><blockquote><p>spring boot 的便利体现在，它简化了很多繁琐的配置，这对开发人员来说是一个福音。只要引入框架的starter就可以使用框架的功能了。不过当出现错误时，排查问题的难度就上升了。因为自动配置的逻辑都在spring boot starter中，想要快速定位问题，就必须了解spring boot starter的内部原理。下面我们自己动手来实现一个spring boot starter</p><p align="right">——《spring cloud 微服务 入门、进阶与实战》25页<p></blockquote><h3 id="spring-boot-starter-项目创建"><a href="#spring-boot-starter-项目创建" class="headerlink" title="spring boot starter 项目创建"></a>spring boot starter 项目创建</h3><p>创建一个项目 spring-starter-demo。 </p><p><strong>注意！！！</strong></p><p>这里创建的不是spring boot ，也不是 maven web。因为试过，即使 maven install 成功生成了一个starter的 jar 包，但在spring boot 项目中却不能正常注入。经查多篇博客发现这里创建的是maven quick start 项目<a id="more"></a>（有的说是 j2ee - simple 我还没检验 ）。</p><img data-src="/myblog/%E8%87%AA%E5%AE%9A%E4%B9%89Starter/image-20200427161948084.png" class=""><p>项目最终目录结构如下：</p><img data-src="/myblog/%E8%87%AA%E5%AE%9A%E4%B9%89Starter/image-20200427163018487.png" class=""><p>创建好后包（自定义的包名）com.study 下面原本只有一个 App类（这个App.class 在这个starter 项目中没有任何作用，可以删除掉，不删掉也不影响）。</p><p>其它类是后面添加的。resources 资源文件夹也是后面自己添加的,创建完是没有的。</p><hr><p>pom配置如下：（手动添加的已做标注，其它的都是自动生成的）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- idea 创建时默认生成的 --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.study<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-starter-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-starter-demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- FIXME change it to the project's website --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 自己添加的 start --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 自己添加的 end --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span><span class="comment">&lt;!-- 这里可以根据自己的情况修改 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span><span class="comment">&lt;!-- 这里可以根据自己的情况修改 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自己添加的 start --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自己添加的 end --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-site-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-project-info-reports-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>UserProperties</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(<span class="string">"spring.user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">    <span class="comment">//set get 方法省略。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>UserClient</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserProperties userProperties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserClient</span><span class="params">(UserProperties p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userProperties = p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userProperties.getUsername();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userProperties.getPwd();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>UserAutoConfigure</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(UserProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserAutoConfigure</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.user"</span>,value = <span class="string">"enabled"</span>,havingValue = <span class="string">"true"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserClient <span class="title">userClient</span><span class="params">(UserProperties userProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserClient(userProperties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>spring.factories</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">\</span></span><br><span class="line"><span class="attr">com.study.UserAutoConfigure</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="maven打包"><a href="#maven打包" class="headerlink" title="maven打包"></a>maven打包</h3><p>这里用maven clean; maven install.（如果已经配置好的话。直接点击idea右边的maven命令即可）</p><p>那么这个 starter 就制作好了</p><h3 id="引入stater"><a href="#引入stater" class="headerlink" title="引入stater"></a>引入stater</h3><p>在springboot 中引入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.study<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-starter-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我这里引入是提示没找到。没有关系，</p><img data-src="/myblog/%E8%87%AA%E5%AE%9A%E4%B9%89Starter/image-20200427163601006.png" class=""><p>只要这里注入时没有提示错误就可以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserClient userClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/user/name"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    logger.info(<span class="string">"lalalalalalallalala"</span> + userClient.toString());</span><br><span class="line">    <span class="keyword">return</span> userClient.getName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在spring boot 项目配置文件中加入：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.user.username</span>=<span class="string">WuZhiYong</span></span><br><span class="line"><span class="meta">spring.user.pwd</span>=<span class="string">123456</span></span><br><span class="line"><span class="meta">spring.user.enabled</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p>启动项目，请求测试地址得到返回：</p><img data-src="/myblog/%E8%87%AA%E5%AE%9A%E4%B9%89Starter/image-20200427164403776.png" class=""><h3 id="使用注解开启自动构建"><a href="#使用注解开启自动构建" class="headerlink" title="使用注解开启自动构建"></a>使用注解开启自动构建</h3><p>starter项目里建立一个类（我是放在同包下，这个位置应该没什么关系）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Import</span>(UserAutoConfigure<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableUserClient</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以把resource 下 META-INF 里边的spring.factories 删掉了。然后在spring boot项目 的启动类上加入注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableUserClient</span></span><br></pre></td></tr></table></figure><p>启动spring boot 访问测试地址 同样也能得到想要的结果</p><h3 id="使用配置开启自动构建"><a href="#使用配置开启自动构建" class="headerlink" title="使用配置开启自动构建"></a>使用配置开启自动构建</h3><p>这一点其实已经结合在前面的配置中了</p><p>在类UserAutoConfigure里注解@ConditionalOnProperty,就表示必须配置文件中指定，spring.user.enabled=true</p><p>这里才会构建这个bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.user"</span>,value = <span class="string">"enabled"</span>,havingValue = <span class="string">"true"</span>)</span><br></pre></td></tr></table></figure><p>例如在springboot 中我们把spring.user.enabled=true 注释掉再启动项目会报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Field userClient <span class="keyword">in</span> com.example.springbootbase.controller.HelloController required a bean of <span class="built_in">type</span> <span class="string">'com.study.UserClient'</span> that could not be found.</span><br><span class="line"></span><br><span class="line">The injection point has the following annotations:</span><br><span class="line">- @org.springframework.beans.factory.annotation.Autowired(required=<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">The following candidates were found but could not be injected:</span><br><span class="line">- Bean method <span class="string">'userClient'</span> <span class="keyword">in</span> <span class="string">'UserAutoConfigure'</span> not loaded because @ConditionalOnProperty (spring.user.enabled=<span class="literal">true</span>) did not find property <span class="string">'enabled'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line"></span><br><span class="line">Consider revisiting the entries above or defining a bean of <span class="built_in">type</span> <span class="string">'com.study.UserClient'</span> <span class="keyword">in</span> your configuration.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure><p>在实际的场景中我们自定义的starter 功能肯定不会这么单一，在UserAutoConfigure中定会有多个bean。这些bean 我们根据功能模块的不同进行封装后，通过如上@ConditionalOnProperty的配置。在实际应用时，我们可通过配置 不同的enable=true来加载不同的功能。</p><p>这就是使用配置开启自动构建。</p><h3 id="配置starter内容提示"><a href="#配置starter内容提示" class="headerlink" title="配置starter内容提示"></a>配置starter内容提示</h3><p>在starter项目里 resources 的META-INF下建立spring-configuration-metadata.json文件</p><p>写入如下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"properties"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"spring.user.username"</span>,</span><br><span class="line">      <span class="attr">"defaultValue"</span>: <span class="string">"wu_zhi_yong999"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"spring.user.pwd"</span>,</span><br><span class="line">      <span class="attr">"defaultValue"</span>: <span class="string">"lalalalalla"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"spring.user.enabled"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"java.lang.Boolean"</span>,</span><br><span class="line">      <span class="attr">"defaultValue"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新 clean install</p><p>在spring boot 项目里我们配置spring.user.  会有自动提示 ：</p><img data-src="/myblog/%E8%87%AA%E5%AE%9A%E4%B9%89Starter/image-20200428102410838.png" class=""><h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><p>spring 自定义 starter 还有很多值得深究的地方。我在抄写代码时抄错了（抄都能抄错 哎 以后只能 CV了） 后来造成不能配置使用starter 。在网上看了很多博客。虽然最后发现了是自己的问题（抄错了）。但也发现了很不错的文章 这里分享下:</p><p><a href="https://blog.csdn.net/qq_31445987/article/details/105152837?utm_source=distribute.pc_relevant.none-task-blog-baidujs-2" target="_blank" rel="noopener">https://blog.csdn.net/qq_31445987/article/details/105152837?utm_source=distribute.pc_relevant.none-task-blog-baidujs-2</a></p><p><a href="https://blog.csdn.net/qq_25863973/article/details/99343187?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1&amp;utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1" target="_blank" rel="noopener">https://blog.csdn.net/qq_25863973/article/details/99343187?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1&amp;utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1</a></p><p>这几天都是在参照《spring cloud 微服务 入门、进阶与实战》这本书在学习。接下来终于要开始spring cloud 了</p><hr><p>参考：</p><p>《spring cloud 微服务 入门、进阶与实战》</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随机端口</title>
      <link href="/myblog/%E9%9A%8F%E6%9C%BA%E7%AB%AF%E5%8F%A3/"/>
      <url>/myblog/%E9%9A%8F%E6%9C%BA%E7%AB%AF%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>代码部署总是需要一个端口，虽然我们可以在配置文件中定义与修改，也可以在部署的时候手动指定。为避免端口冲突何不用代码来为我们自动随机一个端口呢？</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>设置server.port=0，当应用启动的时候会自动的分配一个随机端口，但是该方式在注册到Eureka的时候会一个问题：所有实例都使用了同样的实例名（如：Lenovo-test:hello-service:0），这导致只出现了一个实例。所以，我们还需要修改实例ID的定义，让每个实例的ID不同，比如使用随机数来配置实</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">0</span></span><br><span class="line"><span class="meta">eureka.instance.instance-id</span>=<span class="string">$&#123;spring.application.name&#125;:$&#123;random.int&#125;</span></span><br></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>除了上面的方法，实际上我们还可以直接使用random函数来配置server.port。这样就可以指定端口的取值范围，比如：<a id="more"></a></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">$&#123;random.int[10000,19999]&#125;</span></span><br></pre></td></tr></table></figure><p>由于默认的实例ID会由server.port拼接，而此时server.port设置的随机值会重新取一次随机数，所以使用这种方法的时候不需要重新定义实例ID的规则就能产生不同的实例ID了。</p><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p>在《spring cloud 微服务 入门、进阶与实战》中说方法二的配置如果随机的端口刚好已经被使用了，那么启动就会报错。于是通过代码的方式来随机生成一个端口</p><p><a href="https://github.com/yinjihuan/spring-cloud/tree/master/Spring-Cloud-Book-Code-2/ch-2/spring-boot-example/src/main/java/com/cxytiandi/spring_boot_example" target="_blank" rel="noopener">书中源代码</a></p><p><strong>StartCommand</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StartCommand</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(StartCommand<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StartCommand</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Boolean isServerPort = <span class="keyword">false</span>;</span><br><span class="line">        String serverPort = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span> (args != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String arg : args) &#123;</span><br><span class="line">                System.out.println(<span class="string">"args out ==&gt; "</span>+arg);</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.hasText(arg) &amp;&amp; arg.startsWith(<span class="string">"--server.port"</span>)) &#123;</span><br><span class="line">                    isServerPort = <span class="keyword">true</span>;</span><br><span class="line">                    serverPort = arg;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 没有指定端口，则随机生成一个可用的端口</span></span><br><span class="line">        <span class="keyword">if</span> (!isServerPort) &#123;</span><br><span class="line">            <span class="keyword">int</span> port = ServerPortUtils.getAvailablePort();</span><br><span class="line">            logger.info(<span class="string">"no   ====  current server.port="</span> + port);</span><br><span class="line">            System.setProperty(<span class="string">"server.port"</span>, String.valueOf(port));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.info(<span class="string">"yes ===== current server.port="</span> + serverPort.split(<span class="string">"="</span>)[<span class="number">1</span>]);</span><br><span class="line">            System.setProperty(<span class="string">"server.port"</span>, serverPort.split(<span class="string">"="</span>)[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerPortUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取可用端口，范围2000-65535</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getAvailablePort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">65535</span>;</span><br><span class="line">        <span class="keyword">int</span> min = <span class="number">2000</span>;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> port = random.nextInt(max)%(max-min+<span class="number">1</span>) + min;</span><br><span class="line">        <span class="keyword">boolean</span> using = NetUtils.isLoclePortUsing(port);</span><br><span class="line">        <span class="keyword">if</span> (using) &#123;</span><br><span class="line">            <span class="keyword">return</span> getAvailablePort();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> port;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NetUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     *  true:already in using  false:not using</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> port</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isLoclePortUsing</span><span class="params">(<span class="keyword">int</span> port)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            flag = isPortUsing(<span class="string">"127.0.0.1"</span>, port);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     *  true:already in using  false:not using</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> host</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> port</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPortUsing</span><span class="params">(String host,<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InetAddress theAddress = InetAddress.getByName(host);</span><br><span class="line">            Socket socket = <span class="keyword">new</span> Socket(theAddress,port);</span><br><span class="line">            socket.close();</span><br><span class="line">            flag = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在启动类里：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootBaseApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> StartCommand(args);<span class="comment">//加上这一行</span></span><br><span class="line">        SpringApplication.run(SpringbootBaseApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>通过对启动参数进行遍历判断，如果有指定启动端口，后续就不自动生成了；如果没有指定，就通过ServerPortUtils获取一个可以使用的端口，然后设置道环境变量中。在application.properties中通过下面的方式获取端口：</p><p align="right">——《spring cloud 微服务 入门、进阶与实战》23页<p>  server.port=${server.port}        </blockquote><p>项目启动后发现的确重新生成了端口：（但生成了两次目前还不知道为什么）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">22</span>:<span class="string">26:19.423 [main] INFO com.example.springbootbase.common.StartCommand -     current server.port=39401</span></span><br><span class="line"><span class="attr">22</span>:<span class="string">26:21.550 [restartedMain] INFO com.example.springbootbase.common.StartCommand -   current server.port=2204</span></span><br></pre></td></tr></table></figure><hr><p>参考博客：</p><p><a href="https://www.dazhuanlan.com/2019/09/26/5d8bcffa2a4ae/" target="_blank" rel="noopener">springboot:随机端口</a></p><p>部分代码源自《spring cloud 微服务 入门、进阶与实战》</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异步执行</title>
      <link href="/myblog/%E5%BC%82%E6%AD%A5%E6%89%A7%E8%A1%8C/"/>
      <url>/myblog/%E5%BC%82%E6%AD%A5%E6%89%A7%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<p>部分代码来自《spring cloud 微服务 入门、进阶与实战》</p><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><p>spring 中想要方法是异步执行只需要加上@Async注解即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAsyncMethod</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i&lt;<span class="number">5</span>)&#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"test222222"</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">10L</span>);</span><br><span class="line">        System.out.println(<span class="string">"test333333"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myAsyncMethod.test1();</span><br><span class="line">myAsyncMethod.test2();</span><br></pre></td></tr></table></figure><p>控制台输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">test222222</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">test333333</span><br></pre></td></tr></table></figure><h3 id="配置线程池"><a href="#配置线程池" class="headerlink" title="配置线程池"></a>配置线程池</h3><p>有时我们想要自定义线程池的参数我们可增加如下配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.task.pool"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskThreadPoolConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**核心线程数*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> corePoolSize = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**最大线程数*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxPoolSize = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**线程池维护线程所允许的空闲时间*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> keepAliveSeconds = <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**队列长度*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> queueCapacity = <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**线程名称前缀*/</span></span><br><span class="line">    <span class="keyword">private</span> String threadNamePrefix = <span class="string">"FSH-AsyncTask-"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTaskExecutePool</span> <span class="keyword">implements</span> <span class="title">AsyncConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(AsyncTaskExecutePool<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskThreadPoolConfig config;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">getAsyncExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ThreadPoolTaskExecutor executor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        executor.setCorePoolSize(config.getCorePoolSize());</span><br><span class="line">        executor.setMaxPoolSize(config.getMaxPoolSize());</span><br><span class="line">        executor.setQueueCapacity(config.getQueueCapacity());</span><br><span class="line">        executor.setKeepAliveSeconds(config.getKeepAliveSeconds());</span><br><span class="line">        executor.setThreadNamePrefix(config.getThreadNamePrefix());</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 线程池拒绝策略：如果不配置并超过了负荷会造成溢出</span></span><br><span class="line"><span class="comment">         * AbortPolicy:直接抛出异常  会丢弃任务</span></span><br><span class="line"><span class="comment">         * CallerRunsPolicy 先由主线程执行当前任务，下个任务继续交给线程池来执行</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        executor.setRejectedExecutionHandler(<span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());</span><br><span class="line">        executor.initialize();</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AsyncUncaughtExceptionHandler <span class="title">getAsyncUncaughtExceptionHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 异步任务中异常处理</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AsyncUncaughtExceptionHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleUncaughtException</span><span class="params">(Throwable arg0, Method arg1, Object... arg2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                logger.error(<span class="string">"=========================="</span> + arg0.getMessage() + <span class="string">"======================="</span>, arg0);</span><br><span class="line">                logger.error(<span class="string">"exception method:"</span> + arg1.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在配置文件中配置相关参数</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.task.pool.corePoolSize</span>=<span class="string">9</span></span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">异步执行方法需在外部调用，在异步类中通过 this.xxx() 方式调用会无效</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统一异常处理</title>
      <link href="/myblog/%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>/myblog/%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>对于接口的定义往往规范后会有一个统一的格式如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">"status"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"success"</span>,</span><br><span class="line">    "data": &#123;xxx&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但由于用户请求以及代码逻辑运行的不确定性造成的异常，系统可能返回的数据并不是我们规范的格式，甚至返回一个页面。</p><p>如访问一个不存在的接口得到：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"timestamp"</span>: <span class="string">"2020-04-25T08:09:43.538+0000"</span>,</span><br><span class="line">    <span class="attr">"status"</span>: <span class="number">404</span>,</span><br><span class="line">    <span class="attr">"error"</span>: <span class="string">"Not Found"</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"No message available"</span>,</span><br><span class="line">    <span class="attr">"path"</span>: <span class="string">"/testException/2/55"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以我们需要把这些异常返回做集中（统一）式处理。</p><h3 id="代码准备"><a href="#代码准备" class="headerlink" title="代码准备"></a>代码准备</h3><ul><li><p>CustomException.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义异常类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ResponseData.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//统一返回的数据格式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseData</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code = <span class="number">200</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> status = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> String message = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> Object Data = <span class="keyword">null</span>;</span><br><span class="line">...此处省略 get set 方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>HelloController.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用于测试统一异常处理的接口</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"testException/&#123;type&#125;"</span>) HelloController</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testException</span><span class="params">(@PathVariable(<span class="string">"type"</span>)</span> String type ) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (type)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"default Exception"</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> CustomException(<span class="string">"custom Exception"</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"3"</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"null Exception"</span>);</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>GlobalExceptionHandler.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 统一异常处理类</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = CustomException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    /** @ <span class="title">ExceptionHandler</span>(</span>&#123;CustomException<span class="class">.<span class="keyword">class</span>,<span class="title">Exception</span>.<span class="title">class</span>&#125;)  多个异常配置 */</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ResponseData</span> <span class="title">CustomExceptionHandler</span>(<span class="title">HttpServletRequest</span> <span class="title">request</span>, <span class="title">CustomException</span> <span class="title">e</span>)</span>&#123;</span><br><span class="line">        logger.info(e.getMessage());</span><br><span class="line">        ResponseData responseData = <span class="keyword">new</span> ResponseData();</span><br><span class="line">        responseData.setCode(<span class="number">405</span>);</span><br><span class="line">        responseData.setMessage(e.getMessage());</span><br><span class="line">        responseData.setStatus(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> responseData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ResponseData</span> <span class="title">defaultExceptionHandler</span>(<span class="title">HttpServletRequest</span> <span class="title">request</span>, <span class="title">Exception</span> <span class="title">e</span>)</span>&#123;</span><br><span class="line">        logger.info(e.getMessage());</span><br><span class="line">        ResponseData responseData = <span class="keyword">new</span> ResponseData();</span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> NullPointerException)&#123;</span><br><span class="line">            responseData.setCode(<span class="number">407</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            responseData.setCode(<span class="number">406</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        responseData.setMessage(e.getMessage());</span><br><span class="line">        responseData.setStatus(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> responseData;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>请求：<a href="http://localhost:8082/testException/1" target="_blank" rel="noopener">http://localhost:8082/testException/1</a></p><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="number">406</span>,</span><br><span class="line">    <span class="attr">"status"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"default Exception"</span>,</span><br><span class="line">    <span class="attr">"data"</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求：<a href="http://localhost:8082/testException/2" target="_blank" rel="noopener">http://localhost:8082/testException/2</a></p><p>响应：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"code"</span>: <span class="number">405</span>,</span><br><span class="line">    <span class="string">"status"</span>: <span class="keyword">false</span>,</span><br><span class="line">    <span class="string">"message"</span>: <span class="string">"custom Exception"</span>,</span><br><span class="line">    <span class="string">"data"</span>: <span class="keyword">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求：<a href="http://localhost:8082/testException/3" target="_blank" rel="noopener">http://localhost:8082/testException/3</a></p><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="number">407</span>,</span><br><span class="line">    <span class="attr">"status"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"null Exception"</span>,</span><br><span class="line">    <span class="attr">"data"</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求：<a href="http://localhost:8082/testException/3/xxx" target="_blank" rel="noopener">http://localhost:8082/testException/3/xxx</a>      (没有此接口)</p><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"timestamp"</span>: <span class="string">"2020-04-25T08:30:12.922+0000"</span>,</span><br><span class="line">    <span class="attr">"status"</span>: <span class="number">404</span>,</span><br><span class="line">    <span class="attr">"error"</span>: <span class="string">"Not Found"</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"No message available"</span>,</span><br><span class="line">    <span class="attr">"path"</span>: <span class="string">"/testException/3/xxx"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现请求不存在的接口返回的不是我们统一的格式我们需要程序对这种不存在的资源不能映射到404</p><h3 id="增加配置"><a href="#增加配置" class="headerlink" title="增加配置"></a>增加配置</h3><ul><li><p>application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#出现错误时 直接抛出异常</span></span><br><span class="line"><span class="meta">spring.mvc.throw-exception-if-no-handler-found</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#不对资源文件做映射</span></span><br><span class="line"><span class="meta">spring.resources.add-mappings</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure><p>再次请求得到响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="number">406</span>,</span><br><span class="line">    <span class="attr">"status"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"No handler found for GET /testException/3/xxx"</span>,</span><br><span class="line">    <span class="attr">"data"</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> java </tag>
            
            <tag> 异常处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Actuator模块监控springboot信息</title>
      <link href="/myblog/Actuator%E6%A8%A1%E5%9D%97%E7%9B%91%E6%8E%A7springboot%E4%BF%A1%E6%81%AF/"/>
      <url>/myblog/Actuator%E6%A8%A1%E5%9D%97%E7%9B%91%E6%8E%A7springboot%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><blockquote><p>Spring Boot包含许多其他功能，可在您将应用程序投入生产时帮助您监视和管理应用程序。您可以选择使用HTTP端点或JMX管理和监视应用程序。审核，运行状况和指标收集也可以自动应用于您的应用程序</p></blockquote><h3 id="maven依赖"><a href="#maven依赖" class="headerlink" title="maven依赖"></a>maven依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="查看监控"><a href="#查看监控" class="headerlink" title="查看监控"></a>查看监控</h3><p>添加依赖后启动项目控制台看到如下信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-04-25 13:35:12.836  INFO 748 --- [  restartedMain] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 2 endpoint(s) beneath base path '/actuator'</span><br></pre></td></tr></table></figure><p>在《Spring Cloud 微服务 入门、实战、进阶》这本书里描述说控制台输出了一系列的监控  路径（url）。可能是不同版本差异造成的吧。</p><hr><p>我们通过端口+/actuator  接口（端点）得到下面的响应。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"_links"</span>: &#123;</span><br><span class="line">        <span class="attr">"self"</span>: &#123;</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8082/actuator"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"health-component"</span>: &#123;</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8082/actuator/health/&#123;component&#125;"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"health"</span>: &#123;</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8082/actuator/health"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"health-component-instance"</span>: &#123;</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8082/actuator/health/&#123;component&#125;/&#123;instance&#125;"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"info"</span>: &#123;</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8082/actuator/info"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再来访问下这个端点</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8082/actuator/health</span><br></pre></td></tr></table></figure><p>得到响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"status"</span>: <span class="string">"UP"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在actuator中，status状态 其中up表示健康，down表示不健康</p></blockquote><p>可以通过如下配置展示更多信息：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#显示健康详情</span></span><br><span class="line"><span class="meta">management.endpoint.health.show-details</span>=<span class="string">always</span></span><br></pre></td></tr></table></figure><p>再次请求得到响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"status"</span>: <span class="string">"UP"</span>,</span><br><span class="line">    <span class="attr">"details"</span>: &#123;</span><br><span class="line">        <span class="attr">"diskSpace"</span>: &#123;</span><br><span class="line">            <span class="attr">"status"</span>: <span class="string">"UP"</span>,</span><br><span class="line">            <span class="attr">"details"</span>: &#123;</span><br><span class="line">                <span class="attr">"total"</span>: <span class="number">127718649856</span>,</span><br><span class="line">                <span class="attr">"free"</span>: <span class="number">43498004480</span>,</span><br><span class="line">                <span class="attr">"threshold"</span>: <span class="number">10485760</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>actuator的默认配置有很多端点是不暴露的我们可通过如下配置来暴露指定端点和所有端点</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#暴露 configprops,和beans  使用逗号分隔</span></span><br><span class="line"><span class="meta">management.endpoints.web.exposure.exclude</span>=<span class="string">configprops,beans</span></span><br><span class="line"><span class="comment">#暴露所有端点</span></span><br><span class="line"><span class="meta">management.endpoints.web.exposure.include</span>=<span class="string">*</span></span><br></pre></td></tr></table></figure><p>在spring cloud ‘全家桶’里集成不同的模块会有不同的端点，具体得参考官方文档</p><p>springboot 2.2.6 RELEASE actuator 文档地址：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">https://docs.spring.io/spring-boot/docs/2.2.6.RELEASE/actuator-api/html/#overview</span></span><br></pre></td></tr></table></figure><h3 id="自定义actuator端点"><a href="#自定义actuator端点" class="headerlink" title="自定义actuator端点"></a>自定义actuator端点</h3><p>有时候这些默认的信息并不能满足我们的业务场景与需求，我们可通过自定义添加额外信息或自定义新的端点来进行扩展。</p><h4 id="扩展健康端点添加额外信息"><a href="#扩展健康端点添加额外信息" class="headerlink" title="扩展健康端点添加额外信息"></a>扩展健康端点添加额外信息</h4><p>添加自定义类MyHealthIndicator继承自AbstractHealthIndicator</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHealthIndicator</span> <span class="keyword">extends</span> <span class="title">AbstractHealthIndicator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doHealthCheck</span><span class="params">(Health.Builder builder)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        builder.up().withDetail(<span class="string">"my_status"</span>,<span class="string">"success"</span>);</span><br><span class="line"><span class="comment">//        builder.down().withDetail("my_status","err");</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次请求健康端点得到响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"status"</span>: <span class="string">"UP"</span>,</span><br><span class="line">    <span class="attr">"details"</span>: &#123;</span><br><span class="line">        <span class="attr">"my"</span>: &#123; <span class="comment">// 我们的类名MyHealthIndicator已my开头所以这里是my</span></span><br><span class="line">            <span class="attr">"status"</span>: <span class="string">"UP"</span>,</span><br><span class="line">            <span class="attr">"details"</span>: &#123;</span><br><span class="line">                <span class="attr">"my_status"</span>: <span class="string">"success"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"diskSpace"</span>: &#123;</span><br><span class="line">            <span class="attr">"status"</span>: <span class="string">"UP"</span>,</span><br><span class="line">            <span class="attr">"details"</span>: &#123;</span><br><span class="line">                <span class="attr">"total"</span>: <span class="number">127718649856</span>,</span><br><span class="line">                <span class="attr">"free"</span>: <span class="number">43498000384</span>,</span><br><span class="line">                <span class="attr">"threshold"</span>: <span class="number">10485760</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义新的端点"><a href="#自定义新的端点" class="headerlink" title="自定义新的端点"></a>自定义新的端点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Endpoint</span>(id = <span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserEndpoint</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ReadOperation</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String,Object&gt;&gt; health()&#123;</span><br><span class="line">        List&lt;Map&lt;String,Object&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Map m = <span class="keyword">new</span> HashMap();</span><br><span class="line">        m.put(<span class="string">"username"</span>,<span class="string">"wuzhiyong"</span>);</span><br><span class="line">        m.put(<span class="string">"pwd"</span>,<span class="string">"123456"</span>);</span><br><span class="line">        m.put(<span class="string">"age"</span>,<span class="number">88</span>);</span><br><span class="line">        list.add(m);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问：ip:+port+/actuator/user  响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"pwd"</span>: <span class="string">"123456"</span>,</span><br><span class="line">        <span class="attr">"age"</span>: <span class="number">88</span>,</span><br><span class="line">        <span class="attr">"username"</span>: <span class="string">"wuzhiyong"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> java </tag>
            
            <tag> 监控 </tag>
            
            <tag> Actuator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多环境与热部署</title>
      <link href="/myblog/%E5%A4%9A%E7%8E%AF%E5%A2%83%E4%B8%8E%E7%83%AD%E9%83%A8%E7%BD%B2/"/>
      <url>/myblog/%E5%A4%9A%E7%8E%AF%E5%A2%83%E4%B8%8E%E7%83%AD%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h3 id="profiles多环境配置"><a href="#profiles多环境配置" class="headerlink" title="profiles多环境配置"></a>profiles多环境配置</h3><p>定义多个配置文件，每个文件对应一个环境，格式为 application-环境.properties</p><table><thead><tr><th align="left">application.properties</th><th align="center">通用配置，不区分环境</th></tr></thead><tbody><tr><td align="left">application-dev.properties</td><td align="center">开发环境</td></tr><tr><td align="left">application-test.properties</td><td align="center">测试环境</td></tr><tr><td align="left">application-prod.properties</td><td align="center">生产环境</td></tr></tbody></table><p>application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.profiles.active</span>=<span class="string">prod</span></span><br></pre></td></tr></table></figure><p>application-dev.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8081</span></span><br><span class="line"><span class="meta">com.study.name</span>=<span class="string">WuZhiYong7777-dev</span></span><br></pre></td></tr></table></figure><p>application-test.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8083</span></span><br><span class="line"><span class="meta">com.study.name</span>=<span class="string">WuZhiYong7777-test</span></span><br></pre></td></tr></table></figure><p>application-prod.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8082</span></span><br><span class="line"><span class="meta">com.study.name</span>=<span class="string">WuZhiYong7777-prod</span></span><br></pre></td></tr></table></figure><p>在开发环境中，可以通过修改 application.properties 中的spring.profiles.active 的值来激活对应环境的配置，在部署的时候可以通过 java -jar xxx.jar –spring.profiles.active=dev 来指定使用对应的环境</p><h3 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h3><p>开发时为了减少项目启动的时间经行调试，可配置为热部署</p><p>maven依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span> <span class="comment">&lt;!-- 这个需要为 true 热部署才有效 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>IDEA中还需要开启自动编译功能</p><p>第一步：同时按下 shift+ctrl+alt+/ 选择 registry  然后勾选蓝色条目</p><img data-src="/myblog/%E5%A4%9A%E7%8E%AF%E5%A2%83%E4%B8%8E%E7%83%AD%E9%83%A8%E7%BD%B2/image-20200424234617475.png" class=""><p>第二部</p><img data-src="/myblog/%E5%A4%9A%E7%8E%AF%E5%A2%83%E4%B8%8E%E7%83%AD%E9%83%A8%E7%BD%B2/image-20200424235127499.png" class=""><p>第三步：重启IDEA</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> java </tag>
            
            <tag> 配置 </tag>
            
            <tag> 热部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot读取配置文件</title>
      <link href="/myblog/springboot%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>/myblog/springboot%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="配置属性值"><a href="#配置属性值" class="headerlink" title="配置属性值"></a>配置属性值</h3><p>application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8080</span></span><br><span class="line"></span><br><span class="line"><span class="meta">com.study.name</span>=<span class="string">WuZhiYong</span></span><br></pre></td></tr></table></figure><h3 id="Environment对象读取"><a href="#Environment对象读取" class="headerlink" title="Environment对象读取"></a>Environment对象读取</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入 Environment 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment env;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/port"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPort</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//读取并返回配置</span></span><br><span class="line">        <span class="keyword">return</span> env.getProperty(<span class="string">"server.port"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行项目 访问 <a href="http://localhost:8080/port" target="_blank" rel="noopener">http://localhost:8080/port</a></p><p>返回8080</p><h3 id="value注解读取"><a href="#value注解读取" class="headerlink" title="@value注解读取"></a>@value注解读取</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/getPortByValeAnnotation"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPortByValeAnnotation</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> port;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="prefix前缀读取"><a href="#prefix前缀读取" class="headerlink" title="prefix前缀读取"></a>prefix前缀读取</h3><p>新建配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"com.study"</span>)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制器获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> MyConfig myConfig;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"getPropByPrefix"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPropByPrefix</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> myConfig.getName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> java </tag>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo主页图片显示问题</title>
      <link href="/myblog/hexo%E4%B8%BB%E9%A1%B5%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/"/>
      <url>/myblog/hexo%E4%B8%BB%E9%A1%B5%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>用hexo+typora写博客时会面临一个图片显示的问题。</p><p>md文件中插入图片，md的语法为</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![]()</span><br></pre></td></tr></table></figure><p>其中【】里写图片文件的描述</p><p>（）里填写图片的src    (可以是网络地址，也可以是本地的绝对或相对地址)</p><p>初期的时候为了图片的统一管理，我们会在myblog-&gt;source  文件下建立个img文件夹，图片都放在这个文件夹里，在编写博客文章的时候通过相对引用  比如：../img/xxx.png 来插入这张图片。(在typora的设置中的也对图片的存放提供了很好的支持)</p><p>通过hexo 发布服务后我们能在文章中正确浏览到该图片</p><p>但是在博客的主页中 文章中如果有图片却看不到图片。</p><p>在hexo的官方文档中也有说明：</p><p><a href="https://hexo.io/zh-cn/docs/asset-folders" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/asset-folders</a></p><img data-src="/myblog/hexo%E4%B8%BB%E9%A1%B5%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/image-20200424165223145.png" class=""><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>网络上有很多方案比如安装 hexo-asset-image 第三方插件、还有编写hexo过滤器等等。</p><p>比如这篇网站就说写给拦截器（我看到这篇尝试修改源码但没成功）</p><p><a href="https://www.cnblogs.com/guide2it/p/11111715.html" target="_blank" rel="noopener">https://www.cnblogs.com/guide2it/p/11111715.html</a></p><p>安装第三方插件的方式我也没有使用，因为有人说很久没维护了。我没安装是因为实在是不喜欢给电脑上安装太多东西。</p><hr><p>官方提供了解决方案</p><p><a href="https://hexo.io/zh-cn/docs/asset-folders" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/asset-folders</a></p><img data-src="/myblog/hexo%E4%B8%BB%E9%A1%B5%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/image-20200424170427331.png" class=""><p>说实话我没看懂：</p><p>我曾以为是在  头部的标签中加入这些代码</p><p>还以为:  “不是 markdown”  是不是不能下载md文件里，我差点去源代码的文章模块js中 写了。</p><p>然后把那段代码贴到typora 中，typora没有实时显示图片然后我以为错了。</p><p>。。。真的找了很久找到这篇博客才搞清除。</p><p><a href="https://www.jianshu.com/p/cf0628478a4e" target="_blank" rel="noopener">https://www.jianshu.com/p/cf0628478a4e</a></p><hr><p>首先得参照官方的解决方案 在hexo配置文件中 把post_asset_folder 属性设置为true。</p><p>改完后  通过  hexo new “xxx” 就会多生成一个与md文件同名的文件夹。</p><p>如果是之前md文件没有同名文件夹 。手动建立一个就好</p><p>然后得把图片放在那个同名的文件夹里。</p><p>贴上官方的那段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img example.jpg This is an example image %&#125;</span><br></pre></td></tr></table></figure><p>然后把 example.jpg 替换掉自己的图片名字（后面的提示随便写）并保存</p><p>这个时候 typora 中是不展示图片的   记住  <strong><em>typora中是不展示图片的</em></strong></p><p>得通过 hexo发布成服务后 通过网页才能展示。</p><p>ps：如果有同名的文件夹。typora 中通过如下设置插入图片的时候会自动将图片存入到同名的文件夹中</p><img data-src="/myblog/hexo%E4%B8%BB%E9%A1%B5%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/image-20200424172520555.png" class=""><p>如果是后来手动建立的同名文件夹想把之前md文件里的图片搬过去。typora中鼠标右击图片可选择存入同名文件夹。然后再用官方解决办法的标签语法再写一遍就好了。</p><h3 id="解决办法二"><a href="#解决办法二" class="headerlink" title="解决办法二"></a>解决办法二</h3><p>前两天在微信公众号里看了一篇 picgo + typoa 的文章。后来好奇的百度上搜了搜关于picgo的文章。</p><p>picgo就是一图片上传和管理的工具。图片上传到第三方平台后有个外链。picgo本身不存贮图片。只是通过第三方授权（token），管理在第三方的图片的工具。</p><p>picgo gitHub地址：<a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">https://github.com/Molunerfinn/PicGo</a></p><hr><p>解决办法：</p><p>思路：hexo 主页图片不显示的主要是typora里的相对路径与hexo里的目录的处理方式不一致。如果我们引用的是外链图片那么这种相对路径的问题就不存在了。不管是博客首页还是文章里，图片的路径都是外链也就是都能正常显示。</p><p>typora提供了对picgo的支持（现在去官网下的typora都会支持）。</p><p>typora设置picgo.</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200502181611617.png" alt="image-20200502181611617"></p><p>我是自己下好picgo 并配置了gitee.io的仓库。然后在这里把picgo 的路径设置在这里。然后点击验证图片上传：</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200502183107903.png" alt="image-20200502183107903"></p><p>验证成功后会上传俩个图片。（如果图片没删除掉再次点击验证会提示验证失败和 {“success”:false}）</p><p>好了：</p><p>我们把图片黏贴进来后会存到同名的文件夹中，并且在typora能预览到图片。然后鼠标右击图片选择上传。上传成功后会自动将外链地址替换掉图片的引用地址。</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200502194913442.png" alt="image-20200502194913442"></p><hr><p>picgo 配置 gitee 可参考这篇博客</p><p><a href="https://www.jianshu.com/p/b69950a49ae2" target="_blank" rel="noopener">https://www.jianshu.com/p/b69950a49ae2</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 其它 </category>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo配置next主题</title>
      <link href="/myblog/hexo%E9%85%8D%E7%BD%AEnext%E4%B8%BB%E9%A2%98/"/>
      <url>/myblog/hexo%E9%85%8D%E7%BD%AEnext%E4%B8%BB%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="next主页"><a href="#next主页" class="headerlink" title="next主页"></a>next主页</h3><p><a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">https://github.com/theme-next/hexo-theme-next</a></p><img data-src="/myblog/hexo%E9%85%8D%E7%BD%AEnext%E4%B8%BB%E9%A2%98/image-20200424100945802.png" class=""><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> hexo/themes</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next next</span></span><br></pre></td></tr></table></figure><p>修改hexo项目根目录下的_config.yml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># theme: landscape</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure><p>命令行执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">D:\myblog&gt;hexo s</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><h3 id="配置标签和分类"><a href="#配置标签和分类" class="headerlink" title="配置标签和分类"></a>配置标签和分类</h3><ol><li><p>生成标签页<a id="more"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>打开目录  myblog-&gt;source-&gt;tage  下的index.md</p><p>在title下面添加属性</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type: tags</span><br></pre></td></tr></table></figure></li><li><p>生成分类页</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>   打开目录  myblog-&gt;source-&gt;categories下的index.md</p><p>   在title下面添加属性</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type: categories</span><br></pre></td></tr></table></figure></li><li><p>配置</p><p>在next主题的配置文件 _config.yml 中修改</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">home</span>: <span class="string">/ || fa fa-home</span></span><br><span class="line"><span class="comment">  #about: /about/ || fa fa-user</span></span><br><span class="line">  <span class="attr">tags</span>: <span class="string">/tags/ || fa fa-tags</span></span><br><span class="line">  <span class="attr">categories</span>: <span class="string">/categories/ || fa fa-th</span></span><br><span class="line">  <span class="attr">archives</span>: <span class="string">/archives/ || fa fa-archive</span></span><br><span class="line"><span class="comment">  # schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line"><span class="comment">  # sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line"><span class="comment">  #commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure></li><li><p>预览效果</p><img data-src="/myblog/hexo%E9%85%8D%E7%BD%AEnext%E4%B8%BB%E9%A2%98/image-20200424102317862.png" class=""><hr><img data-src="/myblog/hexo%E9%85%8D%E7%BD%AEnext%E4%B8%BB%E9%A2%98/image-20200424102336933.png" class=""></li></ol><h3 id="配置本地搜索"><a href="#配置本地搜索" class="headerlink" title="配置本地搜索"></a>配置本地搜索</h3><ul><li>在站点目录执行：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><ul><li>站点配置文件：没有就添加节点</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Search </span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">./public/search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><ul><li>next 主题配置文件</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200519082834340.png" alt="image-20200519082834340"></p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200519082808111.png" alt="image-20200519082808111"></p><h3 id="配置评论"><a href="#配置评论" class="headerlink" title="配置评论"></a>配置评论</h3><ol><li><p>进入 <a href="https://www.leancloud.cn/" target="_blank" rel="noopener">https://www.leancloud.cn/</a> 网站注册一个账号（建议选国际版的开发版）</p></li><li><p>然后通过邮箱与手机验证</p></li><li><p>再创建一个应用（应用名称随便填写）</p></li><li><p>进入应用实例的控制界面配置下博客域名</p><img data-src="/myblog/hexo%E9%85%8D%E7%BD%AEnext%E4%B8%BB%E9%A2%98/image-20200424103031055.png" class=""><p>然后在点击</p><p>应用keys</p><img data-src="/myblog/hexo%E9%85%8D%E7%BD%AEnext%E4%B8%BB%E9%A2%98/image-20200424103153599.png" class=""></li><li><p>打开next的配置修改配置</p></li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">valine</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">enable</span>: <span class="string">true</span></span><br></pre></td></tr></table></figure><p>填写相应的  appid 和 appkey</p><img data-src="/myblog/hexo%E9%85%8D%E7%BD%AEnext%E4%B8%BB%E9%A2%98/image-20200424103256162.png" class=""><ol start="6"><li><p>重新发布预览</p><img data-src="/myblog/hexo%E9%85%8D%E7%BD%AEnext%E4%B8%BB%E9%A2%98/image-20200424103640801.png" class=""></li></ol><h3 id="配置文章访问统计"><a href="#配置文章访问统计" class="headerlink" title="配置文章访问统计"></a>配置文章访问统计</h3><p>在前面配置评论的基础上登录LeanCloud</p><p>选择应用实例后-&gt;存储-&gt;结构化数据-&gt;创建class</p><p>class 名填写 Counter</p><img data-src="/myblog/hexo%E9%85%8D%E7%BD%AEnext%E4%B8%BB%E9%A2%98/image-20200502164821552.png" class=""><p>打开next主题的配置文件 找到 leancloud_visitors 节点</p><img data-src="/myblog/hexo%E9%85%8D%E7%BD%AEnext%E4%B8%BB%E9%A2%98/image-20200502165309316.png" class=""><p>把enable 设置成true .</p><p>appid 和 appkey  参照前面的 配置评论。填写LeanCloud里的 id 和 key 。</p><p>效果：</p><img data-src="/myblog/hexo%E9%85%8D%E7%BD%AEnext%E4%B8%BB%E9%A2%98/image-20200502165547221.png" class=""><hr><p>过了很多天 更新：</p><p>访问统计数全部为 0 了</p><p><img data-src="hexo%E9%85%8D%E7%BD%AEnext%E4%B8%BB%E9%A2%98/image-20200515190437877.png" alt="image-20200515190437877"></p><p>创建函数-选择 hook</p><p><img data-src="hexo%E9%85%8D%E7%BD%AEnext%E4%B8%BB%E9%A2%98/image-20200515190633339.png" alt="image-20200515190633339"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> query = <span class="keyword">new</span> AV.Query(<span class="string">"Counter"</span>);</span><br><span class="line"><span class="keyword">if</span> (request.object.updatedKeys.indexOf(<span class="string">'time'</span>) !== <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> query.get(request.object.id).then(<span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj.get(<span class="string">"time"</span>) + <span class="number">1</span> !== request.object.get(<span class="string">"time"</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AV.Cloud.Error(<span class="string">'Invalid update!'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>部署到生产环境：</p><p><img data-src="hexo%E9%85%8D%E7%BD%AEnext%E4%B8%BB%E9%A2%98/image-20200515190848917.png" alt="image-20200515190848917"></p><p>在 next 主题配置文件中 把 security 设置成 true：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">leancloud_visitors:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Required for apps from CN region</span></span><br><span class="line">  <span class="attr">server_url:</span> <span class="comment"># &lt;your server url&gt;</span></span><br><span class="line">  <span class="comment"># Dependencies: https://github.com/theme-next/hexo-leancloud-counter-security</span></span><br><span class="line">  <span class="comment"># If you don't care about security in leancloud counter and just want to use it directly</span></span><br><span class="line">  <span class="comment"># (without hexo-leancloud-counter-security plugin), set `security` to `false`.</span></span><br><span class="line">  <span class="attr">security:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>在站点目录安装插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-leancloud-counter-security --save</span><br><span class="line"><span class="meta">#</span><span class="bash"> 成功后</span></span><br><span class="line">hexo lc-counter register WuZhiYongBlog wzy95537551</span><br></pre></td></tr></table></figure><p>hexo 站点配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">leancloud_counter_security:</span></span><br><span class="line">  <span class="attr">enable_sync:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">app_id:</span> <span class="string">jOjNqcMeMLL4ntoMdf13veTb-MdYXbMMI</span>   <span class="comment"># 同前文的id</span></span><br><span class="line">  <span class="attr">app_key:</span> <span class="string">v50rUeYs7yeT6hECN7XAhYYM</span>  <span class="comment"># 同前文的key</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">WuZhiYongBlog</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">wzy95537551</span></span><br></pre></td></tr></table></figure><p><img data-src="hexo%E9%85%8D%E7%BD%AEnext%E4%B8%BB%E9%A2%98/image-20200515191817312.png" alt="image-20200515191817312"></p><p>复制 id</p><p><img data-src="hexo%E9%85%8D%E7%BD%AEnext%E4%B8%BB%E9%A2%98/image-20200515192302588.png" alt="image-20200515192302588"></p><p>编辑 counter 的权限</p><p><img data-src="hexo%E9%85%8D%E7%BD%AEnext%E4%B8%BB%E9%A2%98/image-20200515192852917.png" alt="image-20200515192852917"></p><p>依然没有效果！！！！！</p><hr><p>最后通过调试代码发现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">leancloudSelector</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">      url = <span class="built_in">encodeURI</span>(url);</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(url).querySelector(<span class="string">'.leancloud-visitors-count'</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在渲染访问量的时候，会通过 encodeURI(url)  进行转码。中文的 url 。这里转过之后就变成 unicode 码了。实际上 节点里的 浏览器已经自动变成中文了。所以这里匹配不到，也就会提示 querySelector 为 null。那么就没办法赋值。 把这段转码的代码 找到后注释掉就可以了。</p><p>代码位置在：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">D:\myblog\themes\next\layout\_third-party\statistics\lean-analytics.swig:</span><br><span class="line">    <span class="number">3</span>    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="number">4</span>      <span class="function"><span class="keyword">function</span> <span class="title">leancloudSelector</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="number">5</span>:       url = <span class="built_in">encodeURI</span>(url);</span><br><span class="line">    <span class="number">6</span>        <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(url).querySelector(<span class="string">'.leancloud-visitors-count'</span>);</span><br><span class="line">    <span class="number">7</span>      &#125;</span><br></pre></td></tr></table></figure><h3 id="配置打赏"><a href="#配置打赏" class="headerlink" title="配置打赏"></a>配置打赏</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="attr">wechatpay:</span> <span class="string">https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/微信图片_20200501220918.png</span> <span class="comment">#/images/wechatpay.png</span></span><br><span class="line">  <span class="attr">alipay:</span> <span class="string">https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/微信图片_20200501220907.jpg</span> <span class="comment">#/images/alipay.png</span></span><br><span class="line">  <span class="comment">#paypal: /images/paypal.png</span></span><br><span class="line">  <span class="comment">#bitcoin: /images/bitcoin.png</span></span><br></pre></td></tr></table></figure><p>找到reward 节点 配置上对应的支付二维码的图片即可</p><h3 id="配置首页文章显示摘要"><a href="#配置首页文章显示摘要" class="headerlink" title="配置首页文章显示摘要"></a>配置首页文章显示摘要</h3><p>很多博客说是这样配置：（自动生成一定长度的摘要）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Automatically Excerpt (Not recommend).</span></span><br><span class="line"><span class="comment"># Use &lt;!-- more --&gt; in the post to control excerpt accurately.</span></span><br><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">150</span></span><br></pre></td></tr></table></figure><p>找到auto_excerpt节点（没有就自己加上） 把 enable 设置成true 。 length表示文章摘要的长度。</p><p><strong>但是！！！  我配置的没有效果</strong></p><p>后来在其它的博客中说到得在文章中手动截取摘要就是在 文章中写上more标记</p><img data-src="/myblog/hexo%E9%85%8D%E7%BD%AEnext%E4%B8%BB%E9%A2%98/image-20200502170353655.png" class=""><p>这中方式成功了！！！！</p><p>效果：</p><img data-src="/myblog/hexo%E9%85%8D%E7%BD%AEnext%E4%B8%BB%E9%A2%98/image-20200502170836777.png" class=""><h3 id="配置分享"><a href="#配置分享" class="headerlink" title="配置分享"></a>配置分享</h3><ul><li>add_this 分享</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># AddThis Share. See: https://www.addthis.com</span></span><br><span class="line"><span class="comment"># Go to https://www.addthis.com/dashboard to customize your tools.</span></span><br><span class="line"><span class="attr">add_this_id:</span> <span class="string">your</span> <span class="string">id</span></span><br></pre></td></tr></table></figure><p>打开 <a href="https://www.addthis.com" target="_blank" rel="noopener">https://www.addthis.com</a> 进行注册</p><p>第一步：注册完后会有个界面让你选择工具类型  Select a Tool</p><p>这里我选择的是分享按钮</p><p>第二部：接下来会引导你配置（英文的没有关系，可用谷歌浏览器右键翻译网页）</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200503111330975.png" alt="image-20200503111330975"></p><ol><li>配置分享到哪些第三方</li><li>配置分享按钮的颜色</li><li>配置分享按钮的位置</li><li>配置哪些页面显示，哪些页面不显示</li><li>6 切换电脑端和手机端预览效果</li></ol><p>第三步：上面配置好后会到这里</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200503111451300.png" alt="image-20200503111451300"></p><p>点击代码试图。看到下面的安装代码。可以看到代码中的 pubid  </p><p>这个id 也可以在这里看到。</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200503111709010.png" alt="image-20200503111709010"></p><p>然后把 自己的 id 填写到 上面的配置文件的  add_this_id 后面。</p><p>hexo 重新生成并部署博客。（本地 localhost:4000 是看不到效果的）</p><p>我的gitee 博客效果如下：</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200503112057114.png" alt="image-20200503112057114"></p><p>参考：</p><p><a href="http://tding.top/archives/7696c13f.html" target="_blank" rel="noopener">http://tding.top/archives/7696c13f.html</a></p><hr><h3 id="配置浏览进度"><a href="#配置浏览进度" class="headerlink" title="配置浏览进度"></a>配置浏览进度</h3><p>在主题配置文件中搜索 scrollpercent</p><p>把 scrollpercent 的值改成 true</p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200506015947127.png" alt="image-20200506015947127"  /><h3 id="给文章配置加密访问"><a href="#给文章配置加密访问" class="headerlink" title="给文章配置加密访问"></a>给文章配置加密访问</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>找到next主题下的文件head.swig：</p><p>next\layout_partials\head\head.swig</p><p>加入 script 代码保存</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=<span class="string">"generator"</span> content=<span class="string">"Hexo &#123;&#123; hexo_version &#125;&#125;"</span>&gt;</span><br><span class="line"><span class="comment">//省略。。。。  </span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (prompt(<span class="string">'请输入密码'</span>) !== <span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</span><br><span class="line">                alert(<span class="string">'密码错误'</span>);</span><br><span class="line">                history.back();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/省略。。。。</span></span><br></pre></td></tr></table></figure><p>然后在typora 中的文章头部添加</p><p>password: yourpassword</p><p>保存后发布服务。再次访问该文章有</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200507102729827.png" alt="image-20200507102729827"></p><p>缺点：界面不好看。本地效果正常，发布到gitee 后无效。</p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>进入 hexo 根目录</p><p>执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure><p>在hexo 配置文件中加入：encrypt</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br><span class="line"><span class="attr">encrypt:</span> </span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>文章头部添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">password:</span> <span class="string">pwd</span></span><br><span class="line"><span class="attr">message:</span> <span class="string">输入密码界面提示说明</span></span><br><span class="line"><span class="attr">abstract:</span> <span class="string">文章界面介绍</span></span><br></pre></td></tr></table></figure><p>访问文章提示：</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200507104409453.png" alt="image-20200507104409453"></p><h3 id="配置验证"><a href="#配置验证" class="headerlink" title="配置验证"></a>配置验证</h3><h4 id="百度网站验证"><a href="#百度网站验证" class="headerlink" title="百度网站验证"></a>百度网站验证</h4><p>访问地址：<a href="https://ziyuan.baidu.com/site（没有百度账号就注册一个）" target="_blank" rel="noopener">https://ziyuan.baidu.com/site（没有百度账号就注册一个）</a></p><p>填写自己的网站地址 点击下一步</p><p><img data-src="hexo%E9%85%8D%E7%BD%AEnext%E4%B8%BB%E9%A2%98/image-20200507204315434.png" alt="image-20200507204315434"></p><p>选择三个标签 点击下一步</p><p><img data-src="hexo%E9%85%8D%E7%BD%AEnext%E4%B8%BB%E9%A2%98/image-20200507204524855.png" alt="image-20200507204524855"></p><p>这里我选择的是   验证</p><p><img data-src="hexo%E9%85%8D%E7%BD%AEnext%E4%B8%BB%E9%A2%98/image-20200507204700445.png" alt="image-20200507204700445"></p><p>把域名添加一条解析</p><p><img data-src="hexo%E9%85%8D%E7%BD%AEnext%E4%B8%BB%E9%A2%98/image-20200507204919243.png" alt="image-20200507204919243"></p><p>点击百度页面的 完成验证：</p><p><img data-src="hexo%E9%85%8D%E7%BD%AEnext%E4%B8%BB%E9%A2%98/image-20200507205205010.png" alt="image-20200507205205010"></p><p>失败了。我点了重新认证</p><p><img data-src="hexo%E9%85%8D%E7%BD%AEnext%E4%B8%BB%E9%A2%98/image-20200507205401220.png" alt="image-20200507205401220"></p><p>what???  要一天！！！</p><p>过了半小时 刷新页面  发现ok了.用了两天发现我通过域名访问很卡不好用，怀疑可能是这里的问题。就把百度的解析删除键了。用了下面的  htm 标签认证的方式。</p><p><img data-src="hexo%E9%85%8D%E7%BD%AEnext%E4%B8%BB%E9%A2%98/image-20200508144441101.png" alt="image-20200508144441101"></p><h4 id="Bing网站验证"><a href="#Bing网站验证" class="headerlink" title="Bing网站验证"></a>Bing网站验证</h4><h3 id="博客图片点击放大"><a href="#博客图片点击放大" class="headerlink" title="博客图片点击放大"></a>博客图片点击放大</h3><p>在主题配置文件中找到：fancybox 并设置成 true  重新发布即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># FancyBox is a tool that offers a nice and elegant way to add zooming functionality for images.</span></span><br><span class="line"><span class="comment"># For more information: https://fancyapps.com/fancybox</span></span><br><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>如果想要自定义 第三方 依赖的版本 请参考官方文档：</p><p><a href="http://theme-next.iissnan.com/advanced-settings.html" target="_blank" rel="noopener">http://theme-next.iissnan.com/advanced-settings.html</a></p><h3 id="配置文字统计和阅读时长"><a href="#配置文字统计和阅读时长" class="headerlink" title="配置文字统计和阅读时长"></a>配置文字统计和阅读时长</h3><p>安装插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-symbols-count-time</span></span><br></pre></td></tr></table></figure><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200511181259182.png" alt="image-20200511181259182"></p><p>hexo 站点配置文件</p><p>没有就添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置文章字数统计和时长 </span></span><br><span class="line"><span class="comment">#依赖于：https://github.com/theme-next/hexo-symbols-count-time</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span> <span class="comment">#文章字数统计</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span> <span class="comment">#阅读时长</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span> <span class="comment">#站点总字数统计</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">true</span> <span class="comment">#站点总阅读时长</span></span><br><span class="line">  <span class="attr">exclude_codeblock:</span> <span class="literal">false</span> <span class="comment">#排除代码字数统计</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">4</span> <span class="comment">#平均字长 这里表示 以4个字符 作为一个字</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span> <span class="comment">#设定每分钟阅读多少字</span></span><br><span class="line">  <span class="attr">suffix:</span> <span class="string">"mins."</span> <span class="comment">#如果读取时间少于60分钟，请添加后缀作为字符串参数。 如果未定义，则为分钟。将用作默认值。</span></span><br></pre></td></tr></table></figure><p>next 主题配置文件找到该节点 默认的可以不用改</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>都改好后 保存</p><p>执行  hexo clean   一定要 clean</p><p>再 hexo g    hexo  s</p><p>效果如下：</p><p><img data-src="https://gitee.com/wu_zhiyong/pic-bed/raw/master/img/image-20200511183648884.png" alt="image-20200511183648884"></p><p>参考：</p><p><a href="https://www.himmy.cn/2019/07/06/hexo博客next主题下添加字数统计和阅读时长/" target="_blank" rel="noopener">野猿新一的博客</a></p><p><a href="https://github.com/theme-next/hexo-symbols-count-time" target="_blank" rel="noopener">hexo-symbols-count-time官网</a></p><p><a href="https://blog.tomandersen.cn/2020/03/06/Hexo之NexT主题中设置symbols-count-time统计单词/" target="_blank" rel="noopener">Eden的博客</a></p><hr><p>参考：<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">next 官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 其它 </category>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一文多发ArtiPub</title>
      <link href="/myblog/%E4%B8%80%E6%96%87%E5%A4%9A%E5%8F%91ArtiPub/"/>
      <url>/myblog/%E4%B8%80%E6%96%87%E5%A4%9A%E5%8F%91ArtiPub/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p>ArtiPub (Article Publisher 的简称，意为 “文章发布者”) 是一款开源的一文多发平台，可以帮助文章作者将编写好的文章自动发布到掘金、SegmentFault、CSDN、知乎、开源中国等技术媒体平台，传播优质知识，获取最大的曝光度。ArtiPub 安装简单，提供了多种安装方式，可以一键安装使用，安装一般只要 5 分钟。</p><p>ArtiPub 目前支持文章编辑、文章发布、数据统计的功能，后期我们会加入存量文章导入、数据分析的功能，让您更好的管理、优化您的技术文章。此外，我们还会接入更多媒体渠道，真正做到让文章随处可阅。</p></blockquote><p>（gitHub原文）</p><p>地址：<a href="https://github.com/crawlab-team/artipub" target="_blank" rel="noopener">https://github.com/crawlab-team/artipub</a></p><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><p>尝试过npm 在线安装发现num 地址下下来的不是最新版本。启动的时候有mongoDB 链接的错误。</p><p>后手动下载zip包到本地进行安装</p><img data-src="/myblog/%E4%B8%80%E6%96%87%E5%A4%9A%E5%8F%91ArtiPub/image-20200422114015781.png" class=""><p>解压出 artipub-master</p><p>安装参考gitHub</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> artipub-master</span><br><span class="line"></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动前端</span></span><br><span class="line">npm run start:frontend</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动后端</span></span><br><span class="line">npm run start:backend</span><br><span class="line"></span><br><span class="line"><span class="comment">#备注：</span></span><br><span class="line"><span class="comment">#1、这两个命令需在当前目录执行  即解压后的项目根目录</span></span><br><span class="line"><span class="comment">#2、命令执行成功后会hold命令行，所以两个命令需分别用两个命令行执行</span></span><br></pre></td></tr></table></figure><img data-src="/myblog/%E4%B8%80%E6%96%87%E5%A4%9A%E5%8F%91ArtiPub/image-20200422114747648.png" class=""><h3 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h3><p>访问 localhost：8000（命令行提示）</p><img data-src="/myblog/%E4%B8%80%E6%96%87%E5%A4%9A%E5%8F%91ArtiPub/image-20200422115009963.png" class=""><p>安装说明操作即可</p><img data-src="/myblog/%E4%B8%80%E6%96%87%E5%A4%9A%E5%8F%91ArtiPub/image-20200422114903962.png" class=""><h3 id="注意项"><a href="#注意项" class="headerlink" title="注意项"></a>注意项</h3><ol><li><p>编写文章时文章标题无法输入，且提示字数限制</p><p>请检查后端是否正常启动</p></li><li><p>点击  平台管理菜单-&gt;更新Cookie状态 按钮没反应</p><p>有可能是页面没有刷新       点击左上角的项目logo刷新</p><p>有可能是后端卡住了     在后端命令行 执行 ctrl + c  结束进程3</p></li><li><p>没看到发布按钮</p><p>在文章的条目上点击发布（云状图标）</p><p>在弹出的列表页勾选平台后  滚动到最下边有个发布按钮</p></li><li><p>点击发布   与   前面的更新Cookie状态按钮是会弹出内置浏览器打开相应的平台</p><p>不要担心  功能执行完毕后 会自动关掉的。</p></li><li><p>在启动前端后在命令行 看到了一个 3000 端口上的服务</p><p>打开地址呈现如下。似乎是一个前端的服务框架（容器），不太懂。</p><p>（不知道为什么代码里会嵌入这个，内容（依赖）似乎还挺大的，下了蛮久）</p><img data-src="/myblog/%E4%B8%80%E6%96%87%E5%A4%9A%E5%8F%91ArtiPub/image-20200422123253222.png" class=""></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>由于项目正处在开发阶段，许多功能还不稳定。比如我尝试发布文章，却没有一个发布成功的（简书里只新建了个草稿文章且文章内容还没有）。看错误信息有提示  type 什么的。（应该是分类不好处理吧，毕竟每个平台的分类是不一样的）</p><p>相比较于OpenWrite，功能上都差不多，界面布局也很相近。只是技术上还不够成熟。</p><p>不过OpenWrite是正式运营中的项目了（开始赚钱）Cookie 什么的可能会有泄露的风险。且免费的功能限制比较多。费用的话不打折还是挺贵的。</p><p>artiPub 则是自己部署，数据都是保存在服务器或本地，理论上安全些。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 其它 </category>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yapi 使用</title>
      <link href="/myblog/Yapi-%E4%BD%BF%E7%94%A8/"/>
      <url>/myblog/Yapi-%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>Yapi server</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:\Program Files\nodejs\node_modules\npm&gt;yapi server</span><br><span class="line">在浏览器打开 http://0.0.0.0:9090 访问。非本地服务器，请将 0.0.0.0 替换成指定的域名或ip</span><br></pre></td></tr></table></figure><p>表示 yapi 初始化服务 访问 <a href="http://0.0.0.0:9090" target="_blank" rel="noopener">http://0.0.0.0:9090</a> 后有一个表单填写完提交后会在指定的目录创建一个yapi 的配置文件 config.json 文件内容如下：存放在 D:\YApi</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "port": "3000",</span><br><span class="line">  "adminAccount": "admin@admin.com",</span><br><span class="line">  "db": &#123;</span><br><span class="line">    "servername": "127.0.0.1",</span><br><span class="line">    "DATABASE": "yapi",</span><br><span class="line">    "port": 27017,</span><br><span class="line">    "user": "",</span><br><span class="line">    "pass": "",</span><br><span class="line">  &#125;,</span><br><span class="line">  "mail": &#123;</span><br><span class="line">    "enable": true,</span><br><span class="line">    "host": "smtp.163.com",</span><br><span class="line">    "port": 465,</span><br><span class="line">    "from": "***@163.com",</span><br><span class="line">    "auth": &#123;</span><br><span class="line">      "user": "***@163.com",</span><br><span class="line">      "pass": "*****"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后控制台 CTRL + C</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">^C终止批处理操作吗(Y/N)? y</span><br><span class="line"></span><br><span class="line">D:\Program Files\nodejs\node_modules\npm&gt;cd \YApi</span><br><span class="line"></span><br><span class="line">D:\YApi&gt;node vendors\server\app.js</span><br><span class="line">log: -------------------------------------swaggerSyncUtils constructor-----------------------------------------------</span><br><span class="line">log: 服务已启动，请打开下面链接访问:</span><br><span class="line">http://127.0.0.1:3000/</span><br><span class="line">log: mongodb load success...</span><br></pre></td></tr></table></figure><p>我的yapi安装在D:\YApi\YApi目录下</p><p>在当前配置文件目录执行命令 node vendors\server\app.js 发布yapi服务</p><p>访问<a href="http://127.0.0.1:3000/得到如下界面：" target="_blank" rel="noopener">http://127.0.0.1:3000/得到如下界面：</a></p><img data-src="/myblog/Yapi-%E4%BD%BF%E7%94%A8/image-20200422013510685.png" class=""><p>点击登录</p><p>用户名：<a href="mailto:admin@admin.com">admin@admin.com</a>（配置文件里的用户名）</p><p>密    码：ymfe.org （默认）</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 前端 </category>
          
          <category> API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA常用快捷键</title>
      <link href="/myblog/IDEA%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/myblog/IDEA%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<h4 id="清除无效的导包"><a href="#清除无效的导包" class="headerlink" title="清除无效的导包"></a>清除无效的导包</h4><p>ctrl + alt + o</p><h4 id="代码块上下移动"><a href="#代码块上下移动" class="headerlink" title="代码块上下移动"></a>代码块上下移动</h4><p>上移：ctrl + shift + ↑</p><p>下移：ctrl + shift + ↓</p><h4 id="类中的方法间跳动"><a href="#类中的方法间跳动" class="headerlink" title="类中的方法间跳动"></a>类中的方法间跳动</h4><p>往上跳动：alt + ↑</p><p>往下跳动：alt + ↓</p><h4 id="光标下另起一行"><a href="#光标下另起一行" class="headerlink" title="光标下另起一行"></a>光标下另起一行</h4><p>shift + Enter</p><h4 id="选定代码转大写"><a href="#选定代码转大写" class="headerlink" title="选定代码转大写"></a>选定代码转大写</h4><p>ctrl + shift + U</p><h4 id="撤销与反撤销"><a href="#撤销与反撤销" class="headerlink" title="撤销与反撤销"></a>撤销与反撤销</h4><p>撤销：ctrl + z</p><p>反撤销： ctrl + shift + z</p><h4 id="查看子类"><a href="#查看子类" class="headerlink" title="查看子类"></a>查看子类</h4><p>ctrl + h</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 其它 </category>
          
          <category> 快捷键 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快捷键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot 整合spring security</title>
      <link href="/myblog/springboot-%E6%95%B4%E5%90%88spring-security/"/>
      <url>/myblog/springboot-%E6%95%B4%E5%90%88spring-security/</url>
      
        <content type="html"><![CDATA[<p>security作为一个流行的安全框架，很多公司都用其来做web的认证与授权。activiti7 工作流默认使用其的 用户-角色 功能。所以我们必须了解它。</p><h3 id="建立web项目"><a href="#建立web项目" class="headerlink" title="建立web项目"></a>建立web项目</h3><p>首先建立一个web项目（springboot）同时我们写上一个接口用于测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(TestController<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/admin/1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">admin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">"code"</span>,<span class="number">200</span>);</span><br><span class="line">        map.put(<span class="string">"msg"</span>,<span class="string">"success"</span>);</span><br><span class="line">        map.put(<span class="string">"data"</span>,<span class="string">"admin"</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">"code"</span>,<span class="number">200</span>);</span><br><span class="line">        map.put(<span class="string">"msg"</span>,<span class="string">"success"</span>);</span><br><span class="line">        map.put(<span class="string">"data"</span>,<span class="string">"user"</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/free/1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">free</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">"code"</span>,<span class="number">200</span>);</span><br><span class="line">        map.put(<span class="string">"msg"</span>,<span class="string">"success"</span>);</span><br><span class="line">        map.put(<span class="string">"data"</span>,<span class="string">"free"</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/logout/success"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">logoutSuccess</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"logout success POST"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/logout/success"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">logoutSuccessGet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"logout success Get"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/login/error2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">loginError</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"logoin error"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动项目访问我们的接口</p><p>（正常返回数据）</p><img data-src="/myblog/springboot-%E6%95%B4%E5%90%88spring-security/image-20200331163706253.png" class=""><h3 id="添加security依赖"><a href="#添加security依赖" class="headerlink" title="添加security依赖"></a>添加security依赖</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-security --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再次访问接口：</p><img data-src="/myblog/springboot-%E6%95%B4%E5%90%88spring-security/image-20200331164035818.png" class=""><p>接口提示401 msg显示没有认证  说明security已经其作用了</p><p>接着我们再用浏览器看看</p><p><a href="http://localhost:8080/admin/1" target="_blank" rel="noopener">http://localhost:8080/admin/1</a></p><img data-src="/myblog/springboot-%E6%95%B4%E5%90%88spring-security/image-20200331164253612.png" class=""><p>发现浏览器重定向到一个登录页面</p><p>从IDEA控制台我们发现密码巴拉巴拉什么的</p><img data-src="/myblog/springboot-%E6%95%B4%E5%90%88spring-security/image-20200331164557365.png" class=""><p>然后我们使用  用户名：user   还有控制台的密码登录及可返回我们想要的数据。</p><p>从spring security 的文档中也可以找到说明：</p><img data-src="/myblog/springboot-%E6%95%B4%E5%90%88spring-security/image-20200331165141402.png" class=""><p>当然这种用户名和密码我们也可以自定义：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.security.user.name</span>=<span class="string">abc</span></span><br><span class="line"><span class="meta">spring.security.user.password</span>=<span class="string">123457</span></span><br></pre></td></tr></table></figure><h3 id="简单配置与说明"><a href="#简单配置与说明" class="headerlink" title="简单配置与说明"></a>简单配置与说明</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springbootactiviti.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> SpringSecurityCustomConfig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> wuzhiyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/3/4 21:17</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringSecurityCustomConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder encoding;</span><br><span class="line"><span class="comment">//    @Autowired</span></span><br><span class="line"><span class="comment">//    private SpringDataUserDetailsService userDetailsService;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定加密方式（默认会自动配上BCrypt加密）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line"><span class="comment">//        return new Md4PasswordEncoder();</span></span><br><span class="line">        <span class="comment">//配置不加密的时候  下方的用户的密码用明文即可</span></span><br><span class="line"><span class="comment">//        return  NoOpPasswordEncoder.getInstance(); //不加密</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Bean</span></span><br><span class="line"><span class="comment">//    public SpringDataUserDetailsService customUserDetailsService() &#123;</span></span><br><span class="line"><span class="comment">//        return new SpringDataUserDetailsService();</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureGlobal</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth</span><br><span class="line"><span class="comment">//                .userDetailsService(userDetailsService)//配置自定义的验证（从数据库查询）逻辑</span></span><br><span class="line">                .inMemoryAuthentication()</span><br><span class="line">                .withUser(<span class="string">"user"</span>).password(encoding.encode(<span class="string">"123"</span>)).roles(<span class="string">"USER"</span>).and()</span><br><span class="line">                .withUser(<span class="string">"admin"</span>).password(encoding.encode(<span class="string">"1234"</span>)).roles(<span class="string">"USER"</span>, <span class="string">"ADMIN"</span>)</span><br><span class="line">                .and().withUser(<span class="string">"zhnagsan"</span>).password(encoding.encode(<span class="string">"12345"</span>)).roles(<span class="string">"LEADER"</span>)</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">                <span class="comment">//关闭 CSRF 保护（如果不关闭  访问logoutUrl 必须为post方式  见源码注释）</span></span><br><span class="line">                .csrf().disable()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                <span class="comment">//允许匿名访问</span></span><br><span class="line">                .antMatchers(<span class="string">"/free/**"</span>,<span class="string">"/logout/success"</span>).permitAll()</span><br><span class="line">                <span class="comment">//匹配/admin/**  API需要ADMIN的角色</span></span><br><span class="line">                .antMatchers(<span class="string">"/admin/**"</span>).hasRole(<span class="string">"ADMIN"</span>)</span><br><span class="line">                <span class="comment">//拥有其中任意权限</span></span><br><span class="line">                .antMatchers(<span class="string">"/user/**"</span>).hasAnyAuthority(<span class="string">"ROLE_USER"</span>,<span class="string">"ROLE_ADMIN"</span>)</span><br><span class="line">                <span class="comment">//拥有其中任意权限（与上面不同的是这里不用  ROLE_前缀）</span></span><br><span class="line">                .antMatchers(<span class="string">"/test"</span>).hasAnyRole(<span class="string">"USER"</span>,<span class="string">"ADMIN"</span>)</span><br><span class="line">                <span class="comment">//任何请求都需要认证</span></span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                <span class="comment">//配置登录页面,登录错误后的路径（同样是登录的页面）</span></span><br><span class="line">                .formLogin().failureUrl( <span class="string">"/login/error2"</span> )</span><br><span class="line">                <span class="comment">//配置登出的 url  以及  登出成功后 重定向的url地址</span></span><br><span class="line">                <span class="comment">//注意：logoutSuccessUrl url  必须是 能够匿名访问的  否则 重定向过去后 会被拦截 再跳转到登录页面</span></span><br><span class="line">                .and().logout().logoutUrl(<span class="string">"/logout/out"</span>).logoutSuccessUrl(<span class="string">"/logout/success"</span>)</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在配置权限认证的时候，遵循自上而下的匹配规则。</p><p>上面我们的用户是在代码中写死的，而实际项目中我们的用户信息都是在数据库里接下来我们来实现从数据库里读取用户的逻辑。</p><p>新建一个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springbootactiviti.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.springbootactiviti.demo.model.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.authority.SimpleGrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> SpringDataUserDetailsService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> wuzhiyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/3/6 12:37</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDataUserDetailsService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需新建配置类注册一个指定的加密方式Bean，或在下一步Security配置类中注册指定</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// 通过用户名从数据库获取用户信息</span></span><br><span class="line"><span class="comment">//        User userInfo = userInfoService.queryForObject("select * fron user", com.example.springbootactiviti.demo.model.User.class);</span></span><br><span class="line">        List&lt;User&gt; userList = jdbcTemplate.query(<span class="string">"select * from user where username = ?"</span>,<span class="keyword">new</span> Object[]&#123;username&#125;, <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(User<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (userList == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"用户不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        userList.forEach(i-&gt; System.out.println(i.toString()));</span><br><span class="line">        <span class="comment">// 得到用户角色</span></span><br><span class="line">        String role = userList.get(<span class="number">0</span>).getRole();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 角色集合</span></span><br><span class="line">        List&lt;GrantedAuthority&gt; authorities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 角色必须以`ROLE_`开头，数据库中没有，则在这里加</span></span><br><span class="line">        authorities.add(<span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">"ROLE_"</span> + role));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> org.springframework.security.core.userdetails.User(</span><br><span class="line">                userList.get(<span class="number">0</span>).getUsername(),</span><br><span class="line">                <span class="comment">// 如果数据库是明文，这里需加密，除非指定配置了不加密（一般数据库里存的都是加密后的字符串）</span></span><br><span class="line">                userList.get(<span class="number">0</span>).getPassword(),</span><br><span class="line">                authorities</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String role;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//set get 方法就省略不贴了</span></span><br></pre></td></tr></table></figure><p>准备数据：</p><p>其中user密码明文是123 ，admin 密码明文是1234.这里插入的都是BCrypt加密后的密文。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">id</span>       <span class="built_in">varchar</span>(<span class="number">20</span>)  <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    username <span class="built_in">varchar</span>(<span class="number">50</span>)  <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    <span class="keyword">password</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    <span class="keyword">role</span>     <span class="built_in">varchar</span>(<span class="number">50</span>)  <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">)</span><br><span class="line">    <span class="keyword">collate</span> = utf8_bin;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> spring_security.user (<span class="keyword">id</span>, username, <span class="keyword">password</span>, <span class="keyword">role</span>) <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'user'</span>, <span class="string">'$2a$10$elDLIbuSf9UZ9XpLr2FVPOgfAQARQURnbymSg7HyxCTW.copZR3Y6'</span>, <span class="string">'USER'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> spring_security.user (<span class="keyword">id</span>, username, <span class="keyword">password</span>, <span class="keyword">role</span>) <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'admin'</span>, <span class="string">'$2a$10$P0mwGYvKDgK5KBr7ybQ7D.GJJ4Ban3wSB/1DvOo17qjktvgH5Pwh6'</span>, <span class="string">'ADMIN'</span>);</span><br></pre></td></tr></table></figure><p>修改配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> SpringDataUserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SpringDataUserDetailsService <span class="title">customUserDetailsService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> SpringDataUserDetailsService();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureGlobal</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  auth</span><br><span class="line">    .userDetailsService(userDetailsService)<span class="comment">//配置自定义的验证（从数据库查询）逻辑</span></span><br><span class="line">    <span class="comment">//                .inMemoryAuthentication()</span></span><br><span class="line">    <span class="comment">//                .withUser("user").password(encoding.encode("123")).roles("USER").and()</span></span><br><span class="line">    <span class="comment">//                .withUser("admin").password(encoding.encode("1234")).roles("USER", "ADMIN")</span></span><br><span class="line">    <span class="comment">//                .and().withUser("zhnagsan").password(encoding.encode("12345")).roles("LEADER")</span></span><br><span class="line">    ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了！如果是一般的单体架构web项目，了解这些基本满足使用了。</p><p>由于restful API 与分布式、微服务的流行，现在很多项目都已经实现了前后端的分离。服务端（后端）只提供调用方API，前后端采用token认证的方式进行数据交互。而在token认证方式中 jwt 是比较流行的一种。接下来开始spring security 与 jwt 的整合。</p><h3 id="security-JWT"><a href="#security-JWT" class="headerlink" title="security+JWT"></a>security+JWT</h3><p>首先简单说下token认证授权的逻辑<strong>3步走</strong>。</p><ol><li>用户通过名称和密码访问登录接口    登录成功返回  token</li><li>用户带上token（一般存放在head中） 访问 资源地址  服务端拦截请求解析token  如果正确则返回资源</li><li>用户访问登出接口  服务端清除token</li></ol><p>再简单认识下security中的常见的过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可简单认为是  登录前置 的过滤器</span></span><br><span class="line">UsernamePasswordAuthenticationFilter</span><br><span class="line">  </span><br><span class="line"><span class="comment">//可简单认为是   认证与授权的  过滤器</span></span><br><span class="line">BasicAuthenticationFilter</span><br><span class="line">  </span><br><span class="line"><span class="comment">//对用户名密码的一层封装</span></span><br><span class="line">UsernamePasswordAuthenticationToken</span><br><span class="line">  </span><br><span class="line"><span class="comment">//认证对象的封装  也是UsernamePasswordAuthenticationToken的顶级父类</span></span><br><span class="line">Authentication</span><br><span class="line">  </span><br><span class="line"><span class="comment">//security  中对用户的抽象 通常业务中的User类继承自此类</span></span><br><span class="line">UserDetails</span><br><span class="line">  </span><br><span class="line"><span class="comment">//通过传入的名称  返回UserDetails 对象  相当于userDao，在这里可以自定从不同的数据源里获取所需的对象数据</span></span><br><span class="line">UserDetailsService</span><br><span class="line">  </span><br><span class="line"><span class="comment">//认证管理</span></span><br><span class="line">authenticationManager</span><br></pre></td></tr></table></figure><p>security 默认的 /login（可配置）  作为登录的url 。当访问该login时。会被 </p><p>AbstractAuthenticationProcessingFilter拦截后调用UsernamePasswordAuthenticationFilter 的方法得到UsernamePasswordAuthenticationToken做认证。然后调用过滤器链继续过滤</p><p>其中UsernamePasswordAuthenticationFilter 里是将读取用户名密码等信息封装成UsernamePasswordAuthenticationToken</p><p>当访问需要某项权限的url时（/login 接口不需要权限）会经过BasicAuthenticationFilter过滤器时会进行认证授权。并把认证结果保存在上下文中。</p><p>在BasicAuthenticationFilter中这里会在request中解析（通过存在请求头中的内容）出UsernamePasswordAuthenticationToken委托给authenticationManager的authenticate方法进行认证。</p><p>在authenticate的具体实现中会取出前面解析出的UsernamePasswordAuthenticationToken 中的用户名</p><p>通过UserDetailsService获取到数据库的用户信息（密码）与UsernamePasswordAuthenticationToken 中的密码进行比对。如果发生异常则抛出。</p><p>抛出的异常会被BasicAuthenticationFilter捕获  并交给认证失败处理方法（可重写）进行后续处理。</p><p>如果没有异常就继续交给过滤器链过滤处理。</p><p><strong>还记得上面的4步走么</strong></p><p><strong>其中第一步</strong></p><p>我们可以手动写一个restful接口用于登录。接口内验证用户名密码无误后通过jwt工具生成一个token返回给客户端。也可以继承自UsernamePasswordAuthenticationFilter 类在请求中拿到用户名密码验证无误后返回token给客户端。（返回客户端前 可把token存入redis 等）</p><p><strong>其中第二步</strong></p><p>用户访问资源链接时带上token会被BasicAuthenticationFilter拦截。</p><p>我们自定义一个类继承与它。把请求头中的token用jwt工具类解析然后封装成UsernamePasswordAuthenticationToken 其它代码不变。（当然如果前面把相关信息存在了redis里这里可直接在redis里取）</p><p><strong>其中第三步</strong></p><p>我们可以写个restful接口，客户端访问后，我们通过token解析出用户后，清除token（如果是redis做token验证这里清空redis里的token即可，如果不是可通过jwt工具类设置token的时效性使其失效）</p><p><strong>补充说明</strong></p><p>由于前后端的交互统一的json格式。所以我们需要重写掉security验证失败的默认处理unsuccessfulAuthentication方法。</p><p>很多地方是通过AuthenticationFailureHandler类来做默认处理的这里我们继承重写掉这个类即可</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">extends</span><br><span class="line">UsernamePasswordAuthenticationFilter </span><br><span class="line">BasicAuthenticationFilter </span><br><span class="line">AbstractSecurityInterceptor </span><br><span class="line">OncePerRequestFilter </span><br><span class="line">AbstractAuthenticationProcessingFilter </span><br><span class="line">implements</span><br><span class="line">FilterInvocationSecurityMetadataSource </span><br><span class="line">AccessDecisionManager</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> java </tag>
            
            <tag> spring security </tag>
            
            <tag> jwt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot jdbcTemplate 连接mysql</title>
      <link href="/myblog/springboot-jdbcTemplate-%E8%BF%9E%E6%8E%A5mysql/"/>
      <url>/myblog/springboot-jdbcTemplate-%E8%BF%9E%E6%8E%A5mysql/</url>
      
        <content type="html"><![CDATA[<p>本实例 是在 springboot-base 的基础上进行的。</p><h4 id="第一步：添加依赖"><a href="#第一步：添加依赖" class="headerlink" title="第一步：添加依赖"></a>第一步：添加依赖</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这里不需要版本号 --&gt;</span></span><br></pre></td></tr></table></figure><p>这里我们另外再添加两个依赖。等下写http接口的发布之后，可以帮我们生成一个可访问的接口文档。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;swagger.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;swagger.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中的版本是在上方定义的：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">swagger.version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">swagger.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="第二步：配置数据库连接信息"><a href="#第二步：配置数据库连接信息" class="headerlink" title="第二步：配置数据库连接信息"></a>第二步：配置数据库连接信息</h4><p>在 applcatiion.properties 文件里：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里根据自己的数据库信息填写</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/web?serverTimezone=UTC</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="meta">spring.datasource.name</span>=<span class="string">test</span></span><br></pre></td></tr></table></figure><h4 id="第三步：在数据库建表："><a href="#第三步：在数据库建表：" class="headerlink" title="第三步：在数据库建表："></a>第三步：在数据库建表：</h4><p>这里可以通过idea 本身的database 模块连接数据库建表：</p><img data-src="/myblog/springboot-jdbcTemplate-%E8%BF%9E%E6%8E%A5mysql/1569679502067.png" class=""><p>也可以用其它工具（例如navicat）连接数据库建表：</p><img data-src="/myblog/springboot-jdbcTemplate-%E8%BF%9E%E6%8E%A5mysql/1569679591601.png" class=""><p>这里建议用idea 本身的 databases 模块连接数据库。因为等下我们可以用idea的一些插件来一件生成代码</p><p>这边我们来建个学生表：</p><img data-src="/myblog/springboot-jdbcTemplate-%E8%BF%9E%E6%8E%A5mysql/1569680104922.png" class=""><p>(建表时记得把备注（comment）填写全，后面生成代码时，可以帮助我们生成注释)</p><p>sql语句为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student</span><br><span class="line">(</span><br><span class="line">    <span class="keyword">id</span>         <span class="built_in">int</span> auto_increment <span class="keyword">comment</span> <span class="string">'数据id'</span> primary <span class="keyword">key</span>,</span><br><span class="line">    study_no   <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'学号'</span>,</span><br><span class="line">    stu_name   <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'学生姓名'</span>,</span><br><span class="line">    stu_age    <span class="built_in">int</span>         <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'学生年龄'</span>,</span><br><span class="line">    class_name <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'班级名称'</span></span><br><span class="line">)</span><br><span class="line">    <span class="keyword">comment</span> <span class="string">'学生表'</span>;</span><br></pre></td></tr></table></figure><p>我们再双击student 表添加两条数据：</p><img data-src="/myblog/springboot-jdbcTemplate-%E8%BF%9E%E6%8E%A5mysql/1569680601726.png" class=""><p>控制台自动把插入数据的sql 打印了出来</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[2019-09-28 22:20:43] 0 rows retrieved in 43 ms (execution: 8 ms, fetching: 35 ms)</span><br><span class="line">sql&gt; INSERT INTO `web`.`student` (`study_no`, `stu_name`, `stu_age`, `class_name`) VALUES ('00110', '张三', 12, '初一6班')</span><br><span class="line">[2019-09-28 22:22:33] 1 row affected in 14 ms</span><br><span class="line">sql&gt; INSERT INTO `web`.`student` (`study_no`, `stu_name`, `stu_age`, `class_name`) VALUES ('00111', '李四', 12, '初一3班')</span><br></pre></td></tr></table></figure><h4 id="第四步：我们来自动生成个实体类（也可以自己手动写这个类）"><a href="#第四步：我们来自动生成个实体类（也可以自己手动写这个类）" class="headerlink" title="第四步：我们来自动生成个实体类（也可以自己手动写这个类）"></a>第四步：我们来自动生成个实体类（也可以自己手动写这个类）</h4><p>我们在这里新建一个包来存放实体类。</p><img data-src="/myblog/springboot-jdbcTemplate-%E8%BF%9E%E6%8E%A5mysql/1569680881837.png" class=""><p>然后我们再右击表名 选择 generate java class</p><img data-src="/myblog/springboot-jdbcTemplate-%E8%BF%9E%E6%8E%A5mysql/1569680862129.png" class=""><p>没有这个选项的需要安装一个插件。（插件为收费版）</p><img data-src="/myblog/springboot-jdbcTemplate-%E8%BF%9E%E6%8E%A5mysql/1569681007667.png" class=""><p>点击generate java class 后：</p><img data-src="/myblog/springboot-jdbcTemplate-%E8%BF%9E%E6%8E%A5mysql/1569681201640.png" class=""><p>java class path 选择我们前面建的包名。</p><p>勾选 comment 能够帮我们生成备注。</p><p>勾选swagger 能够帮我们生成swagger 的一些注解注释。</p><p>点击ok 就会生成好一个实体类。</p><img data-src="/myblog/springboot-jdbcTemplate-%E8%BF%9E%E6%8E%A5mysql/1569681488344.png" class=""><h4 id="第五步：我们来写调用数据库的一些方法。"><a href="#第五步：我们来写调用数据库的一些方法。" class="headerlink" title="第五步：我们来写调用数据库的一些方法。"></a>第五步：我们来写调用数据库的一些方法。</h4><img data-src="/myblog/springboot-jdbcTemplate-%E8%BF%9E%E6%8E%A5mysql/1569682912018.png" class=""><p>这里的代码先简单这样写了。实际开发中业务相关的代码一般不放在 controller.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springbootbase.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.springbootbase.model.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> StudentController</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> wuzhiyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/9/28 22:41</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/stu/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">getStuById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Student) jdbcTemplate.queryForObject(<span class="string">"select * from  student where  id = "</span>+id,<span class="keyword">new</span> BeanPropertyRowMapper(Student<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/stu/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">delStuById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>&#123;</span><br><span class="line">        jdbcTemplate.execute(<span class="string">"delect from  student when  id = "</span>+id);</span><br><span class="line">        Map result = <span class="keyword">new</span> HashMap(<span class="number">2</span>);</span><br><span class="line">        result.put(<span class="string">"code"</span>,<span class="number">200</span>);</span><br><span class="line">        result.put(<span class="string">"msg"</span>,<span class="string">"success"</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们今天测接口不用postman 也不用浏览器，我们来用一个叫 restfulToolKit 的插件</p><p>装好之后 侧边栏有个 restServices 的选项卡点开后 找到我们编写的接口。修改参数后点击send  即可发送请求测试</p><img data-src="/myblog/springboot-jdbcTemplate-%E8%BF%9E%E6%8E%A5mysql/1569683461753.png" class=""><p>点击send 后 response 里可看到请求的结果。下面看到了数据表的数据表示我们成功的从数据库里拿到了数据</p><img data-src="/myblog/springboot-jdbcTemplate-%E8%BF%9E%E6%8E%A5mysql/1569683819259.png" class=""><h4 id="第六步：利用swagger框架生成接口文档同时测试接口。"><a href="#第六步：利用swagger框架生成接口文档同时测试接口。" class="headerlink" title="第六步：利用swagger框架生成接口文档同时测试接口。"></a>第六步：利用swagger框架生成接口文档同时测试接口。</h4><p>最简单的使用我们只需要在启动类上加上@EnableSwagger2注解然后重启就可以了</p><img data-src="/myblog/springboot-jdbcTemplate-%E8%BF%9E%E6%8E%A5mysql/1569683988703.png" class=""><p>然后我们就可以通过浏览器访问地址 <a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html</a> 看到我们的接口了</p><p><video src="./bandicam 2019-09-30 12-07-11-599.mp4" controls="controls"></video></p><h4 id="第七步：配置连接池"><a href="#第七步：配置连接池" class="headerlink" title="第七步：配置连接池"></a>第七步：配置连接池</h4><p>由于spring boot默认集成hikari 链接池</p><p>所以我们直接复制一段连接池的配置就可以了。不需要额外添加依赖。当然如果你不想用这个链接池那么得自行添加依赖了</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.datasource.type</span>=<span class="string">com.zaxxer.hikari.HikariDataSourcespring.datasource.hikari.minimum-idle=5</span></span><br><span class="line"><span class="meta">spring.datasource.hikari.maximum-pool-size</span>=<span class="string">15spring.datasource.hikari.auto-commit=true</span></span><br><span class="line"><span class="meta">spring.datasource.hikari.idle-timeout</span>=<span class="string">30000spring.datasource.hikari.pool-name=DatebookHikariCP</span></span><br><span class="line"><span class="meta">spring.datasource.hikari.max-lifetime</span>=<span class="string">1800000spring.datasource.hikari.connection-timeout=30000</span></span><br><span class="line"><span class="meta">spring.datasource.hikari.connection-test-query</span>=<span class="string">SELECT 1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> java </tag>
            
            <tag> mysql </tag>
            
            <tag> jdbcTemplate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot发布http接口</title>
      <link href="/myblog/springboot%E5%8F%91%E5%B8%83http%E6%8E%A5%E5%8F%A3/"/>
      <url>/myblog/springboot%E5%8F%91%E5%B8%83http%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<p>本例子是再springboot-base 基础上进行</p><p>新建一个包用来存放接口类文件</p><img data-src="/myblog/springboot%E5%8F%91%E5%B8%83http%E6%8E%A5%E5%8F%A3/1569397133707.png" class=""><p>再新建一个HelloWorld类文件敲上如下代码：</p><img data-src="/myblog/springboot%E5%8F%91%E5%B8%83http%E6%8E%A5%E5%8F%A3/1569399733325.png" class=""><img data-src="/myblog/springboot%E5%8F%91%E5%B8%83http%E6%8E%A5%E5%8F%A3/1569399861010.png" class=""><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springbootbase.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> HelloWorld</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> wuzhiyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/9/25 15:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; list_str = Arrays.asList(<span class="string">"java"</span>,<span class="string">"php"</span>,<span class="string">"go"</span>,<span class="string">"c"</span>);</span><br><span class="line"></span><br><span class="line">    Map map_str = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello world"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"list"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list_str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"list/&#123;index&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getListByIndex</span><span class="params">(@PathVariable(<span class="string">"index"</span>)</span> <span class="keyword">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list_str.get(index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"list01/&#123;index&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getListByIndex01</span><span class="params">(@PathVariable(<span class="string">"index"</span>)</span> <span class="keyword">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list_str.get(index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"map/&#123;key&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getValueByKeyOnMap</span><span class="params">(@PathVariable (<span class="string">"key"</span>)</span> String key)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map_str.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"map/&#123;key&#125;/&#123;value&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">putMapBykv</span><span class="params">( @PathVariable(<span class="string">"key"</span>)</span> String key, @<span class="title">PathVariable</span><span class="params">(<span class="string">"value"</span>)</span> String value) </span>&#123;</span><br><span class="line">        map_str.put(key,value);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动项目打开浏览器（或用接口测试工具 例：postman）测试</p><img data-src="/myblog/springboot%E5%8F%91%E5%B8%83http%E6%8E%A5%E5%8F%A3/1569403680828.png" class=""><p>浏览器请求 /hello 接口404错误  是因为 该接口没有加 @ResponseBody 注解。系统会去找页面。由于页面没有配置，所以这里出现404</p><img data-src="/myblog/springboot%E5%8F%91%E5%B8%83http%E6%8E%A5%E5%8F%A3/1569403744387.png" class=""><p>请求list 接口 数据正常返回了</p><img data-src="/myblog/springboot%E5%8F%91%E5%B8%83http%E6%8E%A5%E5%8F%A3/1569403782104.png" class=""><p>这个是用 postman 测试list接口 也正常返回了</p><img data-src="/myblog/springboot%E5%8F%91%E5%B8%83http%E6%8E%A5%E5%8F%A3/1569403842099.png" class=""><p>测试 /list/0 接口返回了 list 的0位数据，正常得到了  java</p><img data-src="/myblog/springboot%E5%8F%91%E5%B8%83http%E6%8E%A5%E5%8F%A3/1569403925422.png" class=""><p>访问/list01/0 接口。虽然接口内容相同。 出现400  是因为接口没有加上 @ResponseBody 注解。</p><img data-src="/myblog/springboot%E5%8F%91%E5%B8%83http%E6%8E%A5%E5%8F%A3/1569404022936.png" class=""><p>出现了405 是因为 请求方法不对。后台这个接口请求得 用post 方式请求（浏览器默认是GET方式请求）。</p><p>下面用工具 用post方式 请求就正常了。</p><img data-src="/myblog/springboot%E5%8F%91%E5%B8%83http%E6%8E%A5%E5%8F%A3/1569404512476.png" class=""><img data-src="/myblog/springboot%E5%8F%91%E5%B8%83http%E6%8E%A5%E5%8F%A3/1569404548317.png" class=""><p>这里 再通过 /map/{key}接口获取 刚刚 存入map 里的数据。正常返回！</p><h4 id="听说前后台都是用JSON数据进行交互的，这里我要返回一个json字符串怎么办。"><a href="#听说前后台都是用JSON数据进行交互的，这里我要返回一个json字符串怎么办。" class="headerlink" title="听说前后台都是用JSON数据进行交互的，这里我要返回一个json字符串怎么办。"></a>听说前后台都是用JSON数据进行交互的，这里我要返回一个json字符串怎么办。</h4><p>我们先加上这样一个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="meta">@GetMapping</span>(<span class="string">"getjson"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">getjson</span><span class="params">( )</span> </span>&#123;</span><br><span class="line">       map_str.put(<span class="string">"我要学习"</span>,<span class="string">"java"</span>);</span><br><span class="line">       map_str.put(<span class="string">"我要认真学习"</span>,<span class="string">"数据库"</span>);</span><br><span class="line">       map_str.put(<span class="string">"我要好好学习"</span>,<span class="string">"spring"</span>);</span><br><span class="line">       map_str.put(<span class="string">"所以我今晚打算"</span>,<span class="string">"去搓麻将"</span>);</span><br><span class="line">       <span class="keyword">return</span> map_str;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="然后重启项目"><a href="#然后重启项目" class="headerlink" title="然后重启项目"></a>然后重启项目</h4><p>然后浏览器访问：</p><img data-src="/myblog/springboot%E5%8F%91%E5%B8%83http%E6%8E%A5%E5%8F%A3/1569406143618.png" class=""><p>用postman访问：</p><img data-src="/myblog/springboot%E5%8F%91%E5%B8%83http%E6%8E%A5%E5%8F%A3/1569406193340.png" class=""><p>postman 自动将返回的数据格式化了。</p><p>ps:由于map 是无序的 所以这里得到的结果是无序的。</p><p>使用工具来测试接口。可以更直观的看到请求方式、参数列表、请求状态、响应时间、数据大小。并且填写好备注后，可以直接生成接口文档。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> java </tag>
            
            <tag> 接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea 创建springboot项目</title>
      <link href="/myblog/idea-%E5%88%9B%E5%BB%BAspringboot%E9%A1%B9%E7%9B%AE/"/>
      <url>/myblog/idea-%E5%88%9B%E5%BB%BAspringboot%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="idea创建springboot项目"><a href="#idea创建springboot项目" class="headerlink" title="idea创建springboot项目"></a>idea创建springboot项目</h2><h3 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h3><p>打开idea 选择 file &gt; new &gt; project </p><img data-src="/myblog/idea-%E5%88%9B%E5%BB%BAspringboot%E9%A1%B9%E7%9B%AE/1569395305579.png" class=""><p>选择spring initializr 点击 next</p><img data-src="/myblog/idea-%E5%88%9B%E5%BB%BAspringboot%E9%A1%B9%E7%9B%AE/1569395451125.png" class=""><p>填写完项目必要的信息后点击 next</p><img data-src="/myblog/idea-%E5%88%9B%E5%BB%BAspringboot%E9%A1%B9%E7%9B%AE/1569395633321.png" class=""><p>勾选 springweb 点击next</p><img data-src="/myblog/idea-%E5%88%9B%E5%BB%BAspringboot%E9%A1%B9%E7%9B%AE/1569395926511.png" class=""><p>点击finish</p><img data-src="/myblog/idea-%E5%88%9B%E5%BB%BAspringboot%E9%A1%B9%E7%9B%AE/1569395996902.png" class=""><p>提示当前窗口或新窗口打开时，自己随意选。</p><p>完成后展开目录结构如下：</p><img data-src="/myblog/idea-%E5%88%9B%E5%BB%BAspringboot%E9%A1%B9%E7%9B%AE/1569396146937.png" class=""><p>此时项目框架已经完成</p><p>点击右上角的 运行按钮就可以启动了</p><img data-src="/myblog/idea-%E5%88%9B%E5%BB%BAspringboot%E9%A1%B9%E7%9B%AE/1569396307782.png" class=""><p>下方的日志中即可看到启动成功！</p><img data-src="/myblog/idea-%E5%88%9B%E5%BB%BAspringboot%E9%A1%B9%E7%9B%AE/1569396462364.png" class="">]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习计划</title>
      <link href="/myblog/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
      <url>/myblog/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码界面提示说明</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="2f4ce4b5a1726f47e315939786cc6c66e177078287df95db6c55d33f066aff29">608153e352e1a45bd96bf70d26c7636dff872c30ddbb1875a5df58619317a42a5b68ea39a3227ef6b2ce400f8465c263bb09f031d400b91f84eb162ec7517f3aaea9ccdfeec92859b7c0d44adaaab960ef483a66d3792eda5ff4517b652e2ecd6a93bda96a7db6cf1f969b21d45a80a2a6e581e4a7c3adfc41f75b2539362e47ed6fbd35629b462b3c2a96133aeca3828ed3c75d137dc06a35edf9cde828a829c05b4ba2b843ff259a8f04304c7fc05b07be947de3cfc180e141a523d517f22f64aae45310069ef8d1074c8cf3553c06780a769a4e385ba4cf24abb8388457a327c923efb98bc9a60330c51c45786537ac587a368eabfa520b54bdf5b8dbdafc6a9f94eb0d6829be6a8c4f65f2e467db42b7a0ec9a4f48f21f68265f452fc676048ea2f6dbb2f4f2b6730b202ef07c6d1a3ce5654719767dafdd4c0720089abc55b008103ed95bdf1af044e1ac90e7f3814faf582d473c7a18318c583d9a944f80b7a6790f11823a2a5c7102aae21cce784430f011c8a10724b54faa64181172f51cd5079fd5fe1f421b4874794ac290eabe7a8c3aa3f63db06e18857ea1cd3ad6b6fe9442f43582678ddc7d8ff44507be491ea0468c2522badf394025a50fa860b6378fa94987f455f4d33d7a52a7112554f0d12a5b99512341ece6576ba012a6f24ce76cf1c377be0ccc0c24244f04067a69ac7f3fa8ec71f296aa7cb4ab636c40d8817c31cc89778038834eddcc032ec41c6239201d75a6e050d11ab65ad036f97c1593bd0e4a88b1452e605a6c0a06a88d20ab688d6b74e582bdf1739b6c2658dc2c412473f1b0ef284b7fd68f794ae382fb2fbb36eb5b064a472dd070ddf390ebc7a549d2a8badf84419638847a0ab9dd34ccec88bb9293bbac4f28a0ff19f2d9d65ee67f3c2398e7ee206e2b2e748e70a42655676b3ce665496c3fe1906de0eacb860b80c6d8d0f48abe2545d5fe2f654b1088d02dfcbbb55da99f46c478b9be2f3464f610d21a4b4cc14ec443145182fa04044537bd2639a23e283200fb9e4fe80c17a0052c394f5acdcc0ef98a360023471a6b35bc439815bda74fb465fc86aee140607cd79ede242d59426ae1617d827fa612af7515a1b1b5afbe332b97014d05aea47f5190f6aa8f75252870dc865ad908742533a92c2ec4a50cfa367f69e79e13ae2ed98853598ef99638e5535253b1d7f0cab99402901e7ed4d940cb5ea6f8e77f70152c48e0ec6d5490fd4e93214fc117ce9ddae1fb9e62ddef5f014ab83d3f45c76e76cd127a2baf5d5c5048006724484e2a4b67283124a1700a7d9a995dd7723eb37073e047beef84862b85d5c23f833af4ba5b7d50999a56df8b75dc05ae9c9243e92072853e492c58897246dc35e5e5580dbcb4749de313844ef1516b94d2dabe1182b7e4b729c8ab9e466c2c6b60868869eb9e37f6296d78bfb8f922f5c5fadbee1673cf624b27ae719b403bc8ea215f9d3ffe3a7a3f777e219a2d8d23890f367ae598236fa75c0210058f200a906cf84ab9bc9a05cea4d36b6643464718fea134a6169e5a51e53be7e36bcfd2a5f3cc0a7747833f2b556bfd7c8c18566e6df02da13253b273d9893b0e3142b7e4ac188ba390566c5736e8a41b958d6234f98a776564dc06eda6af2771345bf109b4f089de4d929ad1d4aa3b3e874523065d42b74f608ef0532bc1778f265e80a808f05e97703b78e8cbaf87998076ad8fa160fc854dc8828b3151092519c64728ce522e8111eee77b6fb1f78fa9e7d2b69b302faa630d08c7a2ca19a5cfbd7f0b0acbdb98a1c3f41fd61d0b65636a3cd98690020d8fb872ff3cdbc8ac584c666c05e1a9a22c1c058704486357bfec6bcc7a4ee742453e9cb30524e6e15bd901fe66d6d051387b304295cda9003d5991740084a59a3327659be9c5a24b5346fa9f1db643c29700062761672a1558934019c6f6b99b8c021a5488006c4f72a65cacdbd6f2a113e08dd360ace6df304b57a23388d3c576a43f96d7fd482005e48bffd68eacf4114b2db6b142dcbcabfbe6481e135fadca905a4cee286a32ebfb7710e15a04538ede37a0b7ce9e6c3836032aaef286f3a41bab99676e30c50f33b922c83496a758414e2830b92bf3e7b2d3679b4976ecb8c5a62565d134baf3459595be8e80e8aeccb7053816ebfaeafa5257390a0f0f4c046fc38055e84b7bec79d469f7d6653f81cafea84805b4f1f7c3c2dd2772063e50811405e6278a39b36701e5ba43d7b41a33ddb3578443c242365f565e874c2d8c786a288f6926de5beb6e8ec6443dcd2c9c7211a5dc9d3767d7c25ad8057141bc11f1d6f7c8507c225e9b5a7d921823a89f555854059a71eb946102797838b29a1a13899fe7d5b7a915e4e2a854c71b72c57709ff4b519e3648b48d2c660ba6c24292dae4d8424a289a7f077c2883118e42ab74726fb189239c4e61c23d51b953ae6e7d03eba9132e7c66bc37e26c7cb925b9c6dce8f0ba4dad1c0f2988ce5a7d83f285405e87d7a1c0584c2ae05995c5750c68b67ce4a6cd74e83ce032f49f7114939fe32ec30d55692c1d4c5050036c8641f1c6cfe93eb05f3653b83e99eb394d2f9e636459e02eb2cb9bbb6a014648b8b11b2bb0ea1030d6b85665a06bee98b8a8267fa26c8feb8751fa40c036ed8603a36a033612b8d472e2f0bf80051c59128f8056723aa174779b7190a49400f93c3078b64089f50fbdafabba6f08c288a21a5026c1da105d0ce0ec4ce48d2ee531e67bbdb0d0e224436c1c59b07dcb8200f18b486a93842094ae49e258b10a09f1b76654e9448d7a23a7040aff1621726ec6d28dc88c456ceb045fba3800a28cce418f992548c1caa0aadb08f03b29903da5ba8d876ecf8acd33e90fb380b285a59ddb92d5e553516d87fa440f259be12c3fbc9d6cac283dd35f4dae3707773677e95c5faef83a4491348f705e72ae5c7f77841ec68bb3d9ca980042d47335174a1636bb65042daa066b380eac822cc0a2280deb1e3c4128fbc34d08ee9d10e506086159a586200a975e9eaded11662381d179841085bda955b6469e07ccf8b47754e85e2ab8422b50a52da90716d618e065f2b1ddd62f8238377d222ae492e4691d8b5aff1b297e7af70ee23744f06df684dc23abb96ea9557a28022e12be087af6151cac9a47608dc11e90232aea763ba0f36070ae5c20bf29cf685cecd287d9eec9b29ec88050b1dfd385ee36e691fc414287ad9bb1c7b2a2d532dd1e001fd3c493bcffb6496e47453a63ccf52f2b82067f</script></div><script src="/myblog/lib/blog-encrypt.js"></script><link href="/myblog/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> studyPlan </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
